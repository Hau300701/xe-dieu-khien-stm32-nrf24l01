
F411_NRF24_PART2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000560c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  080057ac  080057ac  000157ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d60  08005d60  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005d60  08005d60  00015d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d68  08005d68  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d68  08005d68  00015d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d6c  08005d6c  00015d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005d70  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000078  08005de8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08005de8  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecc6  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f92  00000000  00000000  0002ed6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00030d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac8  00000000  00000000  00031880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177f1  00000000  00000000  00032348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d213  00000000  00000000  00049b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094691  00000000  00000000  00056d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb3dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032dc  00000000  00000000  000eb430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005794 	.word	0x08005794

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005794 	.word	0x08005794

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	b097      	sub	sp, #92	; 0x5c
 800058c:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fbef 	bl	8000d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f85f 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f999 	bl	80008cc <MX_GPIO_Init>
  MX_SPI1_Init();
 800059a:	f000 f917 	bl	80007cc <MX_SPI1_Init>
  MX_DMA_Init();
 800059e:	f000 f975 	bl	800088c <MX_DMA_Init>
  MX_ADC1_Init();
 80005a2:	f000 f8b3 	bl	800070c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 f947 	bl	8000838 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


	NRF24_begin(GPIOC, nrf_CSN_PIN, nrf_CE_PIN, hspi1);
 80005aa:	4c23      	ldr	r4, [pc, #140]	; (8000638 <main+0xb0>)
 80005ac:	4668      	mov	r0, sp
 80005ae:	1d23      	adds	r3, r4, #4
 80005b0:	2254      	movs	r2, #84	; 0x54
 80005b2:	4619      	mov	r1, r3
 80005b4:	f004 fcb8 	bl	8004f28 <memcpy>
 80005b8:	6823      	ldr	r3, [r4, #0]
 80005ba:	2210      	movs	r2, #16
 80005bc:	2120      	movs	r1, #32
 80005be:	481f      	ldr	r0, [pc, #124]	; (800063c <main+0xb4>)
 80005c0:	f003 fcfc 	bl	8003fbc <NRF24_begin>
	nrf24_DebugUART_Init(huart2);
 80005c4:	4e1e      	ldr	r6, [pc, #120]	; (8000640 <main+0xb8>)
 80005c6:	466d      	mov	r5, sp
 80005c8:	f106 0410 	add.w	r4, r6, #16
 80005cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005d8:	6823      	ldr	r3, [r4, #0]
 80005da:	602b      	str	r3, [r5, #0]
 80005dc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80005e0:	f004 fc60 	bl	8004ea4 <nrf24_DebugUART_Init>

	printRadioSettings();
 80005e4:	f004 f836 	bl	8004654 <printRadioSettings>

	//**** TRANSMIT - ACK ****//
	NRF24_stopListening();
 80005e8:	f003 fdc8 	bl	800417c <NRF24_stopListening>
	NRF24_openWritingPipe(TxpipeAddrs);
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <main+0xbc>)
 80005ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005f2:	4610      	mov	r0, r2
 80005f4:	4619      	mov	r1, r3
 80005f6:	f003 fe21 	bl	800423c <NRF24_openWritingPipe>
	NRF24_setAutoAck(true);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f003 feaa 	bl	8004354 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 8000600:	2034      	movs	r0, #52	; 0x34
 8000602:	f003 fe5a 	bl	80042ba <NRF24_setChannel>
	NRF24_setPayloadSize(4);
 8000606:	2004      	movs	r0, #4
 8000608:	f003 fe6c 	bl	80042e4 <NRF24_setPayloadSize>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_value, 2);
 800060c:	2202      	movs	r2, #2
 800060e:	490e      	ldr	r1, [pc, #56]	; (8000648 <main+0xc0>)
 8000610:	480e      	ldr	r0, [pc, #56]	; (800064c <main+0xc4>)
 8000612:	f000 fc87 	bl	8000f24 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if(NRF24_write(adc_value, 4))
 8000616:	2104      	movs	r1, #4
 8000618:	480b      	ldr	r0, [pc, #44]	; (8000648 <main+0xc0>)
 800061a:	f003 fdbb 	bl	8004194 <NRF24_write>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d005      	beq.n	8000630 <main+0xa8>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *)"Transmitted Successfully\r\n", strlen("Transmitted Successfully\r\n"), 10);
 8000624:	230a      	movs	r3, #10
 8000626:	221a      	movs	r2, #26
 8000628:	4909      	ldr	r1, [pc, #36]	; (8000650 <main+0xc8>)
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <main+0xb8>)
 800062c:	f003 f8c1 	bl	80037b2 <HAL_UART_Transmit>

		}
		HAL_Delay(20);
 8000630:	2014      	movs	r0, #20
 8000632:	f000 fc0f 	bl	8000e54 <HAL_Delay>
		if(NRF24_write(adc_value, 4))
 8000636:	e7ee      	b.n	8000616 <main+0x8e>
 8000638:	20000238 	.word	0x20000238
 800063c:	40020800 	.word	0x40020800
 8000640:	20000290 	.word	0x20000290
 8000644:	20000000 	.word	0x20000000
 8000648:	2000018c 	.word	0x2000018c
 800064c:	20000190 	.word	0x20000190
 8000650:	080057ac 	.word	0x080057ac

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f004 fc6e 	bl	8004f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <SystemClock_Config+0xb0>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a20      	ldr	r2, [pc, #128]	; (8000704 <SystemClock_Config+0xb0>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <SystemClock_Config+0xb0>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <SystemClock_Config+0xb4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a1a      	ldr	r2, [pc, #104]	; (8000708 <SystemClock_Config+0xb4>)
 800069e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <SystemClock_Config+0xb4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b0:	2301      	movs	r3, #1
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fe0c 	bl	80022e0 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80006ce:	f000 f973 	bl	80009b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006d6:	2301      	movs	r3, #1
 80006d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 f86f 	bl	80027d0 <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006f8:	f000 f95e 	bl	80009b8 <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3750      	adds	r7, #80	; 0x50
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000712:	463b      	mov	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800071e:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <MX_ADC1_Init+0xb4>)
 8000720:	4a28      	ldr	r2, [pc, #160]	; (80007c4 <MX_ADC1_Init+0xb8>)
 8000722:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000724:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <MX_ADC1_Init+0xb4>)
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800072a:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <MX_ADC1_Init+0xb4>)
 800072c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000730:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000732:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <MX_ADC1_Init+0xb4>)
 8000734:	2201      	movs	r2, #1
 8000736:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000738:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <MX_ADC1_Init+0xb4>)
 800073a:	2201      	movs	r2, #1
 800073c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <MX_ADC1_Init+0xb4>)
 8000740:	2200      	movs	r2, #0
 8000742:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_ADC1_Init+0xb4>)
 8000748:	2200      	movs	r2, #0
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <MX_ADC1_Init+0xb4>)
 800074e:	4a1e      	ldr	r2, [pc, #120]	; (80007c8 <MX_ADC1_Init+0xbc>)
 8000750:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_ADC1_Init+0xb4>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_ADC1_Init+0xb4>)
 800075a:	2202      	movs	r2, #2
 800075c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_ADC1_Init+0xb4>)
 8000760:	2201      	movs	r2, #1
 8000762:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_ADC1_Init+0xb4>)
 8000768:	2201      	movs	r2, #1
 800076a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076c:	4814      	ldr	r0, [pc, #80]	; (80007c0 <MX_ADC1_Init+0xb4>)
 800076e:	f000 fb95 	bl	8000e9c <HAL_ADC_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000778:	f000 f91e 	bl	80009b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800077c:	2301      	movs	r3, #1
 800077e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000780:	2301      	movs	r3, #1
 8000782:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000784:	2307      	movs	r3, #7
 8000786:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	4619      	mov	r1, r3
 800078c:	480c      	ldr	r0, [pc, #48]	; (80007c0 <MX_ADC1_Init+0xb4>)
 800078e:	f000 fcd7 	bl	8001140 <HAL_ADC_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000798:	f000 f90e 	bl	80009b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800079c:	2302      	movs	r3, #2
 800079e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_ADC1_Init+0xb4>)
 80007aa:	f000 fcc9 	bl	8001140 <HAL_ADC_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007b4:	f000 f900 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000190 	.word	0x20000190
 80007c4:	40012000 	.word	0x40012000
 80007c8:	0f000001 	.word	0x0f000001

080007cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_SPI1_Init+0x64>)
 80007d2:	4a18      	ldr	r2, [pc, #96]	; (8000834 <MX_SPI1_Init+0x68>)
 80007d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_SPI1_Init+0x64>)
 80007d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_SPI1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_SPI1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_SPI1_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_SPI1_Init+0x64>)
 80007f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_SPI1_Init+0x64>)
 8000800:	2208      	movs	r2, #8
 8000802:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_SPI1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_SPI1_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_SPI1_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_SPI1_Init+0x64>)
 8000818:	220a      	movs	r2, #10
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_SPI1_Init+0x64>)
 800081e:	f002 f9d3 	bl	8002bc8 <HAL_SPI_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000828:	f000 f8c6 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000238 	.word	0x20000238
 8000834:	40013000 	.word	0x40013000

08000838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	; (8000888 <MX_USART2_UART_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000870:	f002 ff52 	bl	8003718 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800087a:	f000 f89d 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000290 	.word	0x20000290
 8000888:	40004400 	.word	0x40004400

0800088c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_DMA_Init+0x3c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <MX_DMA_Init+0x3c>)
 800089c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_DMA_Init+0x3c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	2038      	movs	r0, #56	; 0x38
 80008b4:	f000 ffcf 	bl	8001856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008b8:	2038      	movs	r0, #56	; 0x38
 80008ba:	f000 ffe8 	bl	800188e <HAL_NVIC_EnableIRQ>

}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b31      	ldr	r3, [pc, #196]	; (80009ac <MX_GPIO_Init+0xe0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a30      	ldr	r2, [pc, #192]	; (80009ac <MX_GPIO_Init+0xe0>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <MX_GPIO_Init+0xe0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <MX_GPIO_Init+0xe0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a29      	ldr	r2, [pc, #164]	; (80009ac <MX_GPIO_Init+0xe0>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b27      	ldr	r3, [pc, #156]	; (80009ac <MX_GPIO_Init+0xe0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b23      	ldr	r3, [pc, #140]	; (80009ac <MX_GPIO_Init+0xe0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a22      	ldr	r2, [pc, #136]	; (80009ac <MX_GPIO_Init+0xe0>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b20      	ldr	r3, [pc, #128]	; (80009ac <MX_GPIO_Init+0xe0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <MX_GPIO_Init+0xe0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <MX_GPIO_Init+0xe0>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <MX_GPIO_Init+0xe0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|CSN_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2130      	movs	r1, #48	; 0x30
 8000956:	4816      	ldr	r0, [pc, #88]	; (80009b0 <MX_GPIO_Init+0xe4>)
 8000958:	f001 fca8 	bl	80022ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000962:	4814      	ldr	r0, [pc, #80]	; (80009b4 <MX_GPIO_Init+0xe8>)
 8000964:	f001 fca2 	bl	80022ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 CSN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|CSN_Pin;
 8000968:	2330      	movs	r3, #48	; 0x30
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <MX_GPIO_Init+0xe4>)
 8000980:	f001 fb10 	bl	8001fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_GPIO_Init+0xe8>)
 800099e:	f001 fb01 	bl	8001fa4 <HAL_GPIO_Init>

}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	; 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020800 	.word	0x40020800
 80009b4:	40020c00 	.word	0x40020c00

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a2f      	ldr	r2, [pc, #188]	; (8000af0 <HAL_ADC_MspInit+0xdc>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d157      	bne.n	8000ae6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <HAL_ADC_MspInit+0xe0>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a2d      	ldr	r2, [pc, #180]	; (8000af4 <HAL_ADC_MspInit+0xe0>)
 8000a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <HAL_ADC_MspInit+0xe0>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <HAL_ADC_MspInit+0xe0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a26      	ldr	r2, [pc, #152]	; (8000af4 <HAL_ADC_MspInit+0xe0>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <HAL_ADC_MspInit+0xe0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000a6e:	2306      	movs	r3, #6
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a72:	2303      	movs	r3, #3
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	481d      	ldr	r0, [pc, #116]	; (8000af8 <HAL_ADC_MspInit+0xe4>)
 8000a82:	f001 fa8f 	bl	8001fa4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a86:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <HAL_ADC_MspInit+0xe8>)
 8000a88:	4a1d      	ldr	r2, [pc, #116]	; (8000b00 <HAL_ADC_MspInit+0xec>)
 8000a8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <HAL_ADC_MspInit+0xe8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <HAL_ADC_MspInit+0xe8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_ADC_MspInit+0xe8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <HAL_ADC_MspInit+0xe8>)
 8000aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aa4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_ADC_MspInit+0xe8>)
 8000aa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <HAL_ADC_MspInit+0xe8>)
 8000ab0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ab4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <HAL_ADC_MspInit+0xe8>)
 8000ab8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000abc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <HAL_ADC_MspInit+0xe8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <HAL_ADC_MspInit+0xe8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000aca:	480c      	ldr	r0, [pc, #48]	; (8000afc <HAL_ADC_MspInit+0xe8>)
 8000acc:	f000 fefa 	bl	80018c4 <HAL_DMA_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000ad6:	f7ff ff6f 	bl	80009b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <HAL_ADC_MspInit+0xe8>)
 8000ade:	639a      	str	r2, [r3, #56]	; 0x38
 8000ae0:	4a06      	ldr	r2, [pc, #24]	; (8000afc <HAL_ADC_MspInit+0xe8>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3728      	adds	r7, #40	; 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40012000 	.word	0x40012000
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	200001d8 	.word	0x200001d8
 8000b00:	40026410 	.word	0x40026410

08000b04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_SPI_MspInit+0x84>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12b      	bne.n	8000b7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b5e:	23e0      	movs	r3, #224	; 0xe0
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6e:	2305      	movs	r3, #5
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <HAL_SPI_MspInit+0x8c>)
 8000b7a:	f001 fa13 	bl	8001fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	; 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40013000 	.word	0x40013000
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020000 	.word	0x40020000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <HAL_UART_MspInit+0x84>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d12b      	bne.n	8000c0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_UART_MspInit+0x88>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_UART_MspInit+0x88>)
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_UART_MspInit+0x88>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_UART_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <HAL_UART_MspInit+0x88>)
 8000bdc:	f043 0308 	orr.w	r3, r3, #8
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_UART_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0308 	and.w	r3, r3, #8
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000bee:	2360      	movs	r3, #96	; 0x60
 8000bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bfe:	2307      	movs	r3, #7
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <HAL_UART_MspInit+0x8c>)
 8000c0a:	f001 f9cb 	bl	8001fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	; 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40004400 	.word	0x40004400
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020c00 	.word	0x40020c00

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler+0x4>

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler+0x4>

08000c36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f000 f8d0 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <DMA2_Stream0_IRQHandler+0x10>)
 8000c7e:	f000 ff27 	bl	8001ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200001d8 	.word	0x200001d8

08000c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c94:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <_sbrk+0x5c>)
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <_sbrk+0x60>)
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <_sbrk+0x64>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <_sbrk+0x68>)
 8000cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d207      	bcs.n	8000ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cbc:	f004 f90a 	bl	8004ed4 <__errno>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	e009      	b.n	8000ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <_sbrk+0x64>)
 8000cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20020000 	.word	0x20020000
 8000cec:	00000400 	.word	0x00000400
 8000cf0:	20000094 	.word	0x20000094
 8000cf4:	200002e8 	.word	0x200002e8

08000cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <SystemInit+0x20>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d02:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <SystemInit+0x20>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d22:	490e      	ldr	r1, [pc, #56]	; (8000d5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d24:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d38:	4c0b      	ldr	r4, [pc, #44]	; (8000d68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d46:	f7ff ffd7 	bl	8000cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d4a:	f004 f8c9 	bl	8004ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4e:	f7ff fc1b 	bl	8000588 <main>
  bx  lr    
 8000d52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d60:	08005d70 	.word	0x08005d70
  ldr r2, =_sbss
 8000d64:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d68:	200002e8 	.word	0x200002e8

08000d6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC_IRQHandler>
	...

08000d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <HAL_Init+0x40>)
 8000d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_Init+0x40>)
 8000d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <HAL_Init+0x40>)
 8000d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f000 fd51 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9e:	200f      	movs	r0, #15
 8000da0:	f000 f808 	bl	8000db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da4:	f7ff fe0e 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023c00 	.word	0x40023c00

08000db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_InitTick+0x54>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_InitTick+0x58>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 fd69 	bl	80018aa <HAL_SYSTICK_Config>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00e      	b.n	8000e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b0f      	cmp	r3, #15
 8000de6:	d80a      	bhi.n	8000dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de8:	2200      	movs	r2, #0
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f000 fd31 	bl	8001856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <HAL_InitTick+0x5c>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e000      	b.n	8000e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000010 	.word	0x20000010
 8000e10:	2000000c 	.word	0x2000000c

08000e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x20>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x24>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <HAL_IncTick+0x24>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000010 	.word	0x20000010
 8000e38:	200002d4 	.word	0x200002d4

08000e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <HAL_GetTick+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	200002d4 	.word	0x200002d4

08000e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff ffee 	bl	8000e3c <HAL_GetTick>
 8000e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6c:	d005      	beq.n	8000e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_Delay+0x44>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e7a:	bf00      	nop
 8000e7c:	f7ff ffde 	bl	8000e3c <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d8f7      	bhi.n	8000e7c <HAL_Delay+0x28>
  {
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000010 	.word	0x20000010

08000e9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e033      	b.n	8000f1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d109      	bne.n	8000ece <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff fdaa 	bl	8000a14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f003 0310 	and.w	r3, r3, #16
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d118      	bne.n	8000f0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ee2:	f023 0302 	bic.w	r3, r3, #2
 8000ee6:	f043 0202 	orr.w	r2, r3, #2
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 fa58 	bl	80013a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f023 0303 	bic.w	r3, r3, #3
 8000f02:	f043 0201 	orr.w	r2, r3, #1
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	641a      	str	r2, [r3, #64]	; 0x40
 8000f0a:	e001      	b.n	8000f10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d101      	bne.n	8000f42 <HAL_ADC_Start_DMA+0x1e>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e0ce      	b.n	80010e0 <HAL_ADC_Start_DMA+0x1bc>
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d018      	beq.n	8000f8a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f042 0201 	orr.w	r2, r2, #1
 8000f66:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f68:	4b5f      	ldr	r3, [pc, #380]	; (80010e8 <HAL_ADC_Start_DMA+0x1c4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a5f      	ldr	r2, [pc, #380]	; (80010ec <HAL_ADC_Start_DMA+0x1c8>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	0c9a      	lsrs	r2, r3, #18
 8000f74:	4613      	mov	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000f7c:	e002      	b.n	8000f84 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	3b01      	subs	r3, #1
 8000f82:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1f9      	bne.n	8000f7e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f98:	d107      	bne.n	8000faa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fa8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	f040 8086 	bne.w	80010c6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fc2:	f023 0301 	bic.w	r3, r3, #1
 8000fc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d007      	beq.n	8000fec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fe4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ff8:	d106      	bne.n	8001008 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f023 0206 	bic.w	r2, r3, #6
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	645a      	str	r2, [r3, #68]	; 0x44
 8001006:	e002      	b.n	800100e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2200      	movs	r2, #0
 800100c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001016:	4b36      	ldr	r3, [pc, #216]	; (80010f0 <HAL_ADC_Start_DMA+0x1cc>)
 8001018:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800101e:	4a35      	ldr	r2, [pc, #212]	; (80010f4 <HAL_ADC_Start_DMA+0x1d0>)
 8001020:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001026:	4a34      	ldr	r2, [pc, #208]	; (80010f8 <HAL_ADC_Start_DMA+0x1d4>)
 8001028:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102e:	4a33      	ldr	r2, [pc, #204]	; (80010fc <HAL_ADC_Start_DMA+0x1d8>)
 8001030:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800103a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800104a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800105a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	334c      	adds	r3, #76	; 0x4c
 8001066:	4619      	mov	r1, r3
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f000 fcd8 	bl	8001a20 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 031f 	and.w	r3, r3, #31
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10f      	bne.n	800109c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d129      	bne.n	80010de <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	e020      	b.n	80010de <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a17      	ldr	r2, [pc, #92]	; (8001100 <HAL_ADC_Start_DMA+0x1dc>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d11b      	bne.n	80010de <HAL_ADC_Start_DMA+0x1ba>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d114      	bne.n	80010de <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	e00b      	b.n	80010de <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f043 0210 	orr.w	r2, r3, #16
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f043 0201 	orr.w	r2, r3, #1
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000008 	.word	0x20000008
 80010ec:	431bde83 	.word	0x431bde83
 80010f0:	40012300 	.word	0x40012300
 80010f4:	0800159d 	.word	0x0800159d
 80010f8:	08001657 	.word	0x08001657
 80010fc:	08001673 	.word	0x08001673
 8001100:	40012000 	.word	0x40012000

08001104 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001154:	2b01      	cmp	r3, #1
 8001156:	d101      	bne.n	800115c <HAL_ADC_ConfigChannel+0x1c>
 8001158:	2302      	movs	r3, #2
 800115a:	e113      	b.n	8001384 <HAL_ADC_ConfigChannel+0x244>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b09      	cmp	r3, #9
 800116a:	d925      	bls.n	80011b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68d9      	ldr	r1, [r3, #12]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	461a      	mov	r2, r3
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	3b1e      	subs	r3, #30
 8001182:	2207      	movs	r2, #7
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43da      	mvns	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	400a      	ands	r2, r1
 8001190:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68d9      	ldr	r1, [r3, #12]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	4603      	mov	r3, r0
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4403      	add	r3, r0
 80011aa:	3b1e      	subs	r3, #30
 80011ac:	409a      	lsls	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	e022      	b.n	80011fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6919      	ldr	r1, [r3, #16]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	461a      	mov	r2, r3
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	2207      	movs	r2, #7
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	400a      	ands	r2, r1
 80011da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6919      	ldr	r1, [r3, #16]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	4618      	mov	r0, r3
 80011ee:	4603      	mov	r3, r0
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4403      	add	r3, r0
 80011f4:	409a      	lsls	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b06      	cmp	r3, #6
 8001204:	d824      	bhi.n	8001250 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	3b05      	subs	r3, #5
 8001218:	221f      	movs	r2, #31
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	400a      	ands	r2, r1
 8001226:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	b29b      	uxth	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	3b05      	subs	r3, #5
 8001242:	fa00 f203 	lsl.w	r2, r0, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	635a      	str	r2, [r3, #52]	; 0x34
 800124e:	e04c      	b.n	80012ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b0c      	cmp	r3, #12
 8001256:	d824      	bhi.n	80012a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	3b23      	subs	r3, #35	; 0x23
 800126a:	221f      	movs	r2, #31
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43da      	mvns	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	400a      	ands	r2, r1
 8001278:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	b29b      	uxth	r3, r3
 8001286:	4618      	mov	r0, r3
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	3b23      	subs	r3, #35	; 0x23
 8001294:	fa00 f203 	lsl.w	r2, r0, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	430a      	orrs	r2, r1
 800129e:	631a      	str	r2, [r3, #48]	; 0x30
 80012a0:	e023      	b.n	80012ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	3b41      	subs	r3, #65	; 0x41
 80012b4:	221f      	movs	r2, #31
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	400a      	ands	r2, r1
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	3b41      	subs	r3, #65	; 0x41
 80012de:	fa00 f203 	lsl.w	r2, r0, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012ea:	4b29      	ldr	r3, [pc, #164]	; (8001390 <HAL_ADC_ConfigChannel+0x250>)
 80012ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a28      	ldr	r2, [pc, #160]	; (8001394 <HAL_ADC_ConfigChannel+0x254>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d10f      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x1d8>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b12      	cmp	r3, #18
 80012fe:	d10b      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <HAL_ADC_ConfigChannel+0x254>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d12b      	bne.n	800137a <HAL_ADC_ConfigChannel+0x23a>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <HAL_ADC_ConfigChannel+0x258>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d003      	beq.n	8001334 <HAL_ADC_ConfigChannel+0x1f4>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b11      	cmp	r3, #17
 8001332:	d122      	bne.n	800137a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a11      	ldr	r2, [pc, #68]	; (8001398 <HAL_ADC_ConfigChannel+0x258>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d111      	bne.n	800137a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_ADC_ConfigChannel+0x25c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a11      	ldr	r2, [pc, #68]	; (80013a0 <HAL_ADC_ConfigChannel+0x260>)
 800135c:	fba2 2303 	umull	r2, r3, r2, r3
 8001360:	0c9a      	lsrs	r2, r3, #18
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800136c:	e002      	b.n	8001374 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	3b01      	subs	r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f9      	bne.n	800136e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	40012300 	.word	0x40012300
 8001394:	40012000 	.word	0x40012000
 8001398:	10000012 	.word	0x10000012
 800139c:	20000008 	.word	0x20000008
 80013a0:	431bde83 	.word	0x431bde83

080013a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013ac:	4b79      	ldr	r3, [pc, #484]	; (8001594 <ADC_Init+0x1f0>)
 80013ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	431a      	orrs	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6859      	ldr	r1, [r3, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	021a      	lsls	r2, r3, #8
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6859      	ldr	r1, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800141e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6899      	ldr	r1, [r3, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	4a58      	ldr	r2, [pc, #352]	; (8001598 <ADC_Init+0x1f4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d022      	beq.n	8001482 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800144a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6899      	ldr	r1, [r3, #8]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800146c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6899      	ldr	r1, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	e00f      	b.n	80014a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001490:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0202 	bic.w	r2, r2, #2
 80014b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6899      	ldr	r1, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7e1b      	ldrb	r3, [r3, #24]
 80014bc:	005a      	lsls	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d01b      	beq.n	8001508 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6859      	ldr	r1, [r3, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fa:	3b01      	subs	r3, #1
 80014fc:	035a      	lsls	r2, r3, #13
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	e007      	b.n	8001518 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001516:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	3b01      	subs	r3, #1
 8001534:	051a      	lsls	r2, r3, #20
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800154c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6899      	ldr	r1, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800155a:	025a      	lsls	r2, r3, #9
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001572:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6899      	ldr	r1, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	029a      	lsls	r2, r3, #10
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	609a      	str	r2, [r3, #8]
}
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	40012300 	.word	0x40012300
 8001598:	0f000001 	.word	0x0f000001

0800159c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d13c      	bne.n	8001630 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d12b      	bne.n	8001628 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d127      	bne.n	8001628 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d006      	beq.n	80015f4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d119      	bne.n	8001628 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0220 	bic.w	r2, r2, #32
 8001602:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d105      	bne.n	8001628 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f043 0201 	orr.w	r2, r3, #1
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff fd6b 	bl	8001104 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800162e:	e00e      	b.n	800164e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f7ff fd75 	bl	800112c <HAL_ADC_ErrorCallback>
}
 8001642:	e004      	b.n	800164e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	4798      	blx	r3
}
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001662:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f7ff fd57 	bl	8001118 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2240      	movs	r2, #64	; 0x40
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f043 0204 	orr.w	r2, r3, #4
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f7ff fd4a 	bl	800112c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db0b      	blt.n	800172e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	4907      	ldr	r1, [pc, #28]	; (800173c <__NVIC_EnableIRQ+0x38>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	2001      	movs	r0, #1
 8001726:	fa00 f202 	lsl.w	r2, r0, r2
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	; (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	; (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800180c:	d301      	bcc.n	8001812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180e:	2301      	movs	r3, #1
 8001810:	e00f      	b.n	8001832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <SysTick_Config+0x40>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181a:	210f      	movs	r1, #15
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f7ff ff8e 	bl	8001740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <SysTick_Config+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <SysTick_Config+0x40>)
 800182c:	2207      	movs	r2, #7
 800182e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	e000e010 	.word	0xe000e010

08001840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff29 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff ff3e 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ff8e 	bl	8001794 <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff5d 	bl	8001740 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff31 	bl	8001704 <__NVIC_EnableIRQ>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ffa2 	bl	80017fc <SysTick_Config>
 80018b8:	4603      	mov	r3, r0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018d0:	f7ff fab4 	bl	8000e3c <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e099      	b.n	8001a14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2202      	movs	r2, #2
 80018e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0201 	bic.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001900:	e00f      	b.n	8001922 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001902:	f7ff fa9b 	bl	8000e3c <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b05      	cmp	r3, #5
 800190e:	d908      	bls.n	8001922 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2220      	movs	r2, #32
 8001914:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2203      	movs	r2, #3
 800191a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e078      	b.n	8001a14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1e8      	bne.n	8001902 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <HAL_DMA_Init+0x158>)
 800193c:	4013      	ands	r3, r2
 800193e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800194e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800195a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001966:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	4313      	orrs	r3, r2
 8001972:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	2b04      	cmp	r3, #4
 800197a:	d107      	bne.n	800198c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	4313      	orrs	r3, r2
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	4313      	orrs	r3, r2
 800198a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f023 0307 	bic.w	r3, r3, #7
 80019a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d117      	bne.n	80019e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4313      	orrs	r3, r2
 80019be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00e      	beq.n	80019e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 fa6f 	bl	8001eac <DMA_CheckFifoParam>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d008      	beq.n	80019e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2240      	movs	r2, #64	; 0x40
 80019d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019e2:	2301      	movs	r3, #1
 80019e4:	e016      	b.n	8001a14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 fa26 	bl	8001e40 <DMA_CalcBaseAndBitshift>
 80019f4:	4603      	mov	r3, r0
 80019f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fc:	223f      	movs	r2, #63	; 0x3f
 80019fe:	409a      	lsls	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	f010803f 	.word	0xf010803f

08001a20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d101      	bne.n	8001a46 <HAL_DMA_Start_IT+0x26>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e040      	b.n	8001ac8 <HAL_DMA_Start_IT+0xa8>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d12f      	bne.n	8001aba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 f9b8 	bl	8001de4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a78:	223f      	movs	r2, #63	; 0x3f
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0216 	orr.w	r2, r2, #22
 8001a8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d007      	beq.n	8001aa8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0208 	orr.w	r2, r2, #8
 8001aa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	e005      	b.n	8001ac6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001adc:	4b92      	ldr	r3, [pc, #584]	; (8001d28 <HAL_DMA_IRQHandler+0x258>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a92      	ldr	r2, [pc, #584]	; (8001d2c <HAL_DMA_IRQHandler+0x25c>)
 8001ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae6:	0a9b      	lsrs	r3, r3, #10
 8001ae8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afa:	2208      	movs	r2, #8
 8001afc:	409a      	lsls	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d01a      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d013      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0204 	bic.w	r2, r2, #4
 8001b22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b28:	2208      	movs	r2, #8
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b34:	f043 0201 	orr.w	r2, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b40:	2201      	movs	r2, #1
 8001b42:	409a      	lsls	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d012      	beq.n	8001b72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00b      	beq.n	8001b72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5e:	2201      	movs	r2, #1
 8001b60:	409a      	lsls	r2, r3
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6a:	f043 0202 	orr.w	r2, r3, #2
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b76:	2204      	movs	r2, #4
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d012      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00b      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b94:	2204      	movs	r2, #4
 8001b96:	409a      	lsls	r2, r3
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba0:	f043 0204 	orr.w	r2, r3, #4
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bac:	2210      	movs	r2, #16
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d043      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d03c      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bca:	2210      	movs	r2, #16
 8001bcc:	409a      	lsls	r2, r3
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d018      	beq.n	8001c12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d108      	bne.n	8001c00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d024      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	4798      	blx	r3
 8001bfe:	e01f      	b.n	8001c40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d01b      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	4798      	blx	r3
 8001c10:	e016      	b.n	8001c40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d107      	bne.n	8001c30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0208 	bic.w	r2, r2, #8
 8001c2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c44:	2220      	movs	r2, #32
 8001c46:	409a      	lsls	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 808e 	beq.w	8001d6e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 8086 	beq.w	8001d6e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c66:	2220      	movs	r2, #32
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	d136      	bne.n	8001ce8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0216 	bic.w	r2, r2, #22
 8001c88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695a      	ldr	r2, [r3, #20]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d103      	bne.n	8001caa <HAL_DMA_IRQHandler+0x1da>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0208 	bic.w	r2, r2, #8
 8001cb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbe:	223f      	movs	r2, #63	; 0x3f
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d07d      	beq.n	8001dda <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	4798      	blx	r3
        }
        return;
 8001ce6:	e078      	b.n	8001dda <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d01c      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d108      	bne.n	8001d16 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d030      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	4798      	blx	r3
 8001d14:	e02b      	b.n	8001d6e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d027      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	4798      	blx	r3
 8001d26:	e022      	b.n	8001d6e <HAL_DMA_IRQHandler+0x29e>
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10f      	bne.n	8001d5e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0210 	bic.w	r2, r2, #16
 8001d4c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d032      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d022      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2205      	movs	r2, #5
 8001d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0201 	bic.w	r2, r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d307      	bcc.n	8001db6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f2      	bne.n	8001d9a <HAL_DMA_IRQHandler+0x2ca>
 8001db4:	e000      	b.n	8001db8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001db6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	4798      	blx	r3
 8001dd8:	e000      	b.n	8001ddc <HAL_DMA_IRQHandler+0x30c>
        return;
 8001dda:	bf00      	nop
    }
  }
}
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop

08001de4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b40      	cmp	r3, #64	; 0x40
 8001e10:	d108      	bne.n	8001e24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e22:	e007      	b.n	8001e34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	60da      	str	r2, [r3, #12]
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	3b10      	subs	r3, #16
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <DMA_CalcBaseAndBitshift+0x64>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e5a:	4a13      	ldr	r2, [pc, #76]	; (8001ea8 <DMA_CalcBaseAndBitshift+0x68>)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d909      	bls.n	8001e82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e76:	f023 0303 	bic.w	r3, r3, #3
 8001e7a:	1d1a      	adds	r2, r3, #4
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	659a      	str	r2, [r3, #88]	; 0x58
 8001e80:	e007      	b.n	8001e92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e8a:	f023 0303 	bic.w	r3, r3, #3
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	aaaaaaab 	.word	0xaaaaaaab
 8001ea8:	08005d24 	.word	0x08005d24

08001eac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d11f      	bne.n	8001f06 <DMA_CheckFifoParam+0x5a>
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d856      	bhi.n	8001f7a <DMA_CheckFifoParam+0xce>
 8001ecc:	a201      	add	r2, pc, #4	; (adr r2, 8001ed4 <DMA_CheckFifoParam+0x28>)
 8001ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed2:	bf00      	nop
 8001ed4:	08001ee5 	.word	0x08001ee5
 8001ed8:	08001ef7 	.word	0x08001ef7
 8001edc:	08001ee5 	.word	0x08001ee5
 8001ee0:	08001f7b 	.word	0x08001f7b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d046      	beq.n	8001f7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ef4:	e043      	b.n	8001f7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001efe:	d140      	bne.n	8001f82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f04:	e03d      	b.n	8001f82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f0e:	d121      	bne.n	8001f54 <DMA_CheckFifoParam+0xa8>
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d837      	bhi.n	8001f86 <DMA_CheckFifoParam+0xda>
 8001f16:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <DMA_CheckFifoParam+0x70>)
 8001f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1c:	08001f2d 	.word	0x08001f2d
 8001f20:	08001f33 	.word	0x08001f33
 8001f24:	08001f2d 	.word	0x08001f2d
 8001f28:	08001f45 	.word	0x08001f45
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f30:	e030      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d025      	beq.n	8001f8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f42:	e022      	b.n	8001f8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f4c:	d11f      	bne.n	8001f8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f52:	e01c      	b.n	8001f8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d903      	bls.n	8001f62 <DMA_CheckFifoParam+0xb6>
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d003      	beq.n	8001f68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f60:	e018      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	73fb      	strb	r3, [r7, #15]
      break;
 8001f66:	e015      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00e      	beq.n	8001f92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
      break;
 8001f78:	e00b      	b.n	8001f92 <DMA_CheckFifoParam+0xe6>
      break;
 8001f7a:	bf00      	nop
 8001f7c:	e00a      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      break;
 8001f7e:	bf00      	nop
 8001f80:	e008      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      break;
 8001f82:	bf00      	nop
 8001f84:	e006      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      break;
 8001f86:	bf00      	nop
 8001f88:	e004      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      break;
 8001f8a:	bf00      	nop
 8001f8c:	e002      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f8e:	bf00      	nop
 8001f90:	e000      	b.n	8001f94 <DMA_CheckFifoParam+0xe8>
      break;
 8001f92:	bf00      	nop
    }
  } 
  
  return status; 
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop

08001fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	e159      	b.n	8002274 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	f040 8148 	bne.w	800226e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d005      	beq.n	8001ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d130      	bne.n	8002058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	2203      	movs	r2, #3
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800202c:	2201      	movs	r2, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 0201 	and.w	r2, r3, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b03      	cmp	r3, #3
 8002062:	d017      	beq.n	8002094 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	2203      	movs	r2, #3
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d123      	bne.n	80020e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	08da      	lsrs	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3208      	adds	r2, #8
 80020a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	08da      	lsrs	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3208      	adds	r2, #8
 80020e2:	69b9      	ldr	r1, [r7, #24]
 80020e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0203 	and.w	r2, r3, #3
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80a2 	beq.w	800226e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b57      	ldr	r3, [pc, #348]	; (800228c <HAL_GPIO_Init+0x2e8>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a56      	ldr	r2, [pc, #344]	; (800228c <HAL_GPIO_Init+0x2e8>)
 8002134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
 800213a:	4b54      	ldr	r3, [pc, #336]	; (800228c <HAL_GPIO_Init+0x2e8>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002146:	4a52      	ldr	r2, [pc, #328]	; (8002290 <HAL_GPIO_Init+0x2ec>)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3302      	adds	r3, #2
 800214e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	220f      	movs	r2, #15
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a49      	ldr	r2, [pc, #292]	; (8002294 <HAL_GPIO_Init+0x2f0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d019      	beq.n	80021a6 <HAL_GPIO_Init+0x202>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a48      	ldr	r2, [pc, #288]	; (8002298 <HAL_GPIO_Init+0x2f4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <HAL_GPIO_Init+0x1fe>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a47      	ldr	r2, [pc, #284]	; (800229c <HAL_GPIO_Init+0x2f8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00d      	beq.n	800219e <HAL_GPIO_Init+0x1fa>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a46      	ldr	r2, [pc, #280]	; (80022a0 <HAL_GPIO_Init+0x2fc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d007      	beq.n	800219a <HAL_GPIO_Init+0x1f6>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a45      	ldr	r2, [pc, #276]	; (80022a4 <HAL_GPIO_Init+0x300>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d101      	bne.n	8002196 <HAL_GPIO_Init+0x1f2>
 8002192:	2304      	movs	r3, #4
 8002194:	e008      	b.n	80021a8 <HAL_GPIO_Init+0x204>
 8002196:	2307      	movs	r3, #7
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x204>
 800219a:	2303      	movs	r3, #3
 800219c:	e004      	b.n	80021a8 <HAL_GPIO_Init+0x204>
 800219e:	2302      	movs	r3, #2
 80021a0:	e002      	b.n	80021a8 <HAL_GPIO_Init+0x204>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <HAL_GPIO_Init+0x204>
 80021a6:	2300      	movs	r3, #0
 80021a8:	69fa      	ldr	r2, [r7, #28]
 80021aa:	f002 0203 	and.w	r2, r2, #3
 80021ae:	0092      	lsls	r2, r2, #2
 80021b0:	4093      	lsls	r3, r2
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021b8:	4935      	ldr	r1, [pc, #212]	; (8002290 <HAL_GPIO_Init+0x2ec>)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	089b      	lsrs	r3, r3, #2
 80021be:	3302      	adds	r3, #2
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021c6:	4b38      	ldr	r3, [pc, #224]	; (80022a8 <HAL_GPIO_Init+0x304>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ea:	4a2f      	ldr	r2, [pc, #188]	; (80022a8 <HAL_GPIO_Init+0x304>)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021f0:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <HAL_GPIO_Init+0x304>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002214:	4a24      	ldr	r2, [pc, #144]	; (80022a8 <HAL_GPIO_Init+0x304>)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800221a:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <HAL_GPIO_Init+0x304>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800223e:	4a1a      	ldr	r2, [pc, #104]	; (80022a8 <HAL_GPIO_Init+0x304>)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002244:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <HAL_GPIO_Init+0x304>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002268:	4a0f      	ldr	r2, [pc, #60]	; (80022a8 <HAL_GPIO_Init+0x304>)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3301      	adds	r3, #1
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	2b0f      	cmp	r3, #15
 8002278:	f67f aea2 	bls.w	8001fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	3724      	adds	r7, #36	; 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	40013800 	.word	0x40013800
 8002294:	40020000 	.word	0x40020000
 8002298:	40020400 	.word	0x40020400
 800229c:	40020800 	.word	0x40020800
 80022a0:	40020c00 	.word	0x40020c00
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40013c00 	.word	0x40013c00

080022ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	807b      	strh	r3, [r7, #2]
 80022b8:	4613      	mov	r3, r2
 80022ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022bc:	787b      	ldrb	r3, [r7, #1]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022c2:	887a      	ldrh	r2, [r7, #2]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022c8:	e003      	b.n	80022d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ca:	887b      	ldrh	r3, [r7, #2]
 80022cc:	041a      	lsls	r2, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	619a      	str	r2, [r3, #24]
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e264      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d075      	beq.n	80023ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022fe:	4ba3      	ldr	r3, [pc, #652]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b04      	cmp	r3, #4
 8002308:	d00c      	beq.n	8002324 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230a:	4ba0      	ldr	r3, [pc, #640]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002312:	2b08      	cmp	r3, #8
 8002314:	d112      	bne.n	800233c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002316:	4b9d      	ldr	r3, [pc, #628]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002322:	d10b      	bne.n	800233c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	4b99      	ldr	r3, [pc, #612]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d05b      	beq.n	80023e8 <HAL_RCC_OscConfig+0x108>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d157      	bne.n	80023e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e23f      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002344:	d106      	bne.n	8002354 <HAL_RCC_OscConfig+0x74>
 8002346:	4b91      	ldr	r3, [pc, #580]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a90      	ldr	r2, [pc, #576]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e01d      	b.n	8002390 <HAL_RCC_OscConfig+0xb0>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x98>
 800235e:	4b8b      	ldr	r3, [pc, #556]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a8a      	ldr	r2, [pc, #552]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b88      	ldr	r3, [pc, #544]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a87      	ldr	r2, [pc, #540]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e00b      	b.n	8002390 <HAL_RCC_OscConfig+0xb0>
 8002378:	4b84      	ldr	r3, [pc, #528]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a83      	ldr	r2, [pc, #524]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800237e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	4b81      	ldr	r3, [pc, #516]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a80      	ldr	r2, [pc, #512]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800238a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d013      	beq.n	80023c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7fe fd50 	bl	8000e3c <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a0:	f7fe fd4c 	bl	8000e3c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	; 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e204      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b76      	ldr	r3, [pc, #472]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0xc0>
 80023be:	e014      	b.n	80023ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe fd3c 	bl	8000e3c <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c8:	f7fe fd38 	bl	8000e3c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e1f0      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	4b6c      	ldr	r3, [pc, #432]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0xe8>
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d063      	beq.n	80024be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023f6:	4b65      	ldr	r3, [pc, #404]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002402:	4b62      	ldr	r3, [pc, #392]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800240a:	2b08      	cmp	r3, #8
 800240c:	d11c      	bne.n	8002448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240e:	4b5f      	ldr	r3, [pc, #380]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d116      	bne.n	8002448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241a:	4b5c      	ldr	r3, [pc, #368]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_RCC_OscConfig+0x152>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e1c4      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002432:	4b56      	ldr	r3, [pc, #344]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4952      	ldr	r1, [pc, #328]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002446:	e03a      	b.n	80024be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002450:	4b4f      	ldr	r3, [pc, #316]	; (8002590 <HAL_RCC_OscConfig+0x2b0>)
 8002452:	2201      	movs	r2, #1
 8002454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002456:	f7fe fcf1 	bl	8000e3c <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800245e:	f7fe fced 	bl	8000e3c <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e1a5      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	4b46      	ldr	r3, [pc, #280]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247c:	4b43      	ldr	r3, [pc, #268]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4940      	ldr	r1, [pc, #256]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800248c:	4313      	orrs	r3, r2
 800248e:	600b      	str	r3, [r1, #0]
 8002490:	e015      	b.n	80024be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002492:	4b3f      	ldr	r3, [pc, #252]	; (8002590 <HAL_RCC_OscConfig+0x2b0>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe fcd0 	bl	8000e3c <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a0:	f7fe fccc 	bl	8000e3c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e184      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	4b36      	ldr	r3, [pc, #216]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d030      	beq.n	800252c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d016      	beq.n	8002500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d2:	4b30      	ldr	r3, [pc, #192]	; (8002594 <HAL_RCC_OscConfig+0x2b4>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d8:	f7fe fcb0 	bl	8000e3c <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e0:	f7fe fcac 	bl	8000e3c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e164      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f2:	4b26      	ldr	r3, [pc, #152]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x200>
 80024fe:	e015      	b.n	800252c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002500:	4b24      	ldr	r3, [pc, #144]	; (8002594 <HAL_RCC_OscConfig+0x2b4>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7fe fc99 	bl	8000e3c <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800250e:	f7fe fc95 	bl	8000e3c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e14d      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f0      	bne.n	800250e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 80a0 	beq.w	800267a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253e:	4b13      	ldr	r3, [pc, #76]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10f      	bne.n	800256a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a0e      	ldr	r2, [pc, #56]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <HAL_RCC_OscConfig+0x2ac>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002566:	2301      	movs	r3, #1
 8002568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_OscConfig+0x2b8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d121      	bne.n	80025ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002576:	4b08      	ldr	r3, [pc, #32]	; (8002598 <HAL_RCC_OscConfig+0x2b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a07      	ldr	r2, [pc, #28]	; (8002598 <HAL_RCC_OscConfig+0x2b8>)
 800257c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002582:	f7fe fc5b 	bl	8000e3c <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	e011      	b.n	80025ae <HAL_RCC_OscConfig+0x2ce>
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800
 8002590:	42470000 	.word	0x42470000
 8002594:	42470e80 	.word	0x42470e80
 8002598:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259c:	f7fe fc4e 	bl	8000e3c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e106      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ae:	4b85      	ldr	r3, [pc, #532]	; (80027c4 <HAL_RCC_OscConfig+0x4e4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d106      	bne.n	80025d0 <HAL_RCC_OscConfig+0x2f0>
 80025c2:	4b81      	ldr	r3, [pc, #516]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	4a80      	ldr	r2, [pc, #512]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6713      	str	r3, [r2, #112]	; 0x70
 80025ce:	e01c      	b.n	800260a <HAL_RCC_OscConfig+0x32a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b05      	cmp	r3, #5
 80025d6:	d10c      	bne.n	80025f2 <HAL_RCC_OscConfig+0x312>
 80025d8:	4b7b      	ldr	r3, [pc, #492]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025dc:	4a7a      	ldr	r2, [pc, #488]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80025de:	f043 0304 	orr.w	r3, r3, #4
 80025e2:	6713      	str	r3, [r2, #112]	; 0x70
 80025e4:	4b78      	ldr	r3, [pc, #480]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	4a77      	ldr	r2, [pc, #476]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6713      	str	r3, [r2, #112]	; 0x70
 80025f0:	e00b      	b.n	800260a <HAL_RCC_OscConfig+0x32a>
 80025f2:	4b75      	ldr	r3, [pc, #468]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	4a74      	ldr	r2, [pc, #464]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	6713      	str	r3, [r2, #112]	; 0x70
 80025fe:	4b72      	ldr	r3, [pc, #456]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002602:	4a71      	ldr	r2, [pc, #452]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 8002604:	f023 0304 	bic.w	r3, r3, #4
 8002608:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d015      	beq.n	800263e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002612:	f7fe fc13 	bl	8000e3c <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002618:	e00a      	b.n	8002630 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7fe fc0f 	bl	8000e3c <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f241 3288 	movw	r2, #5000	; 0x1388
 8002628:	4293      	cmp	r3, r2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e0c5      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002630:	4b65      	ldr	r3, [pc, #404]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0ee      	beq.n	800261a <HAL_RCC_OscConfig+0x33a>
 800263c:	e014      	b.n	8002668 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263e:	f7fe fbfd 	bl	8000e3c <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002644:	e00a      	b.n	800265c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002646:	f7fe fbf9 	bl	8000e3c <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f241 3288 	movw	r2, #5000	; 0x1388
 8002654:	4293      	cmp	r3, r2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e0af      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265c:	4b5a      	ldr	r3, [pc, #360]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1ee      	bne.n	8002646 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002668:	7dfb      	ldrb	r3, [r7, #23]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d105      	bne.n	800267a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266e:	4b56      	ldr	r3, [pc, #344]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a55      	ldr	r2, [pc, #340]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 8002674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 809b 	beq.w	80027ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002684:	4b50      	ldr	r3, [pc, #320]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	2b08      	cmp	r3, #8
 800268e:	d05c      	beq.n	800274a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d141      	bne.n	800271c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002698:	4b4c      	ldr	r3, [pc, #304]	; (80027cc <HAL_RCC_OscConfig+0x4ec>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269e:	f7fe fbcd 	bl	8000e3c <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a6:	f7fe fbc9 	bl	8000e3c <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e081      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b8:	4b43      	ldr	r3, [pc, #268]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f0      	bne.n	80026a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69da      	ldr	r2, [r3, #28]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	019b      	lsls	r3, r3, #6
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	085b      	lsrs	r3, r3, #1
 80026dc:	3b01      	subs	r3, #1
 80026de:	041b      	lsls	r3, r3, #16
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	061b      	lsls	r3, r3, #24
 80026e8:	4937      	ldr	r1, [pc, #220]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ee:	4b37      	ldr	r3, [pc, #220]	; (80027cc <HAL_RCC_OscConfig+0x4ec>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fba2 	bl	8000e3c <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fb9e 	bl	8000e3c <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e056      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270e:	4b2e      	ldr	r3, [pc, #184]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x41c>
 800271a:	e04e      	b.n	80027ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_RCC_OscConfig+0x4ec>)
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002722:	f7fe fb8b 	bl	8000e3c <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272a:	f7fe fb87 	bl	8000e3c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e03f      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273c:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f0      	bne.n	800272a <HAL_RCC_OscConfig+0x44a>
 8002748:	e037      	b.n	80027ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e032      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002756:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <HAL_RCC_OscConfig+0x4e8>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d028      	beq.n	80027b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d121      	bne.n	80027b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d11a      	bne.n	80027b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002786:	4013      	ands	r3, r2
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800278c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800278e:	4293      	cmp	r3, r2
 8002790:	d111      	bne.n	80027b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	085b      	lsrs	r3, r3, #1
 800279e:	3b01      	subs	r3, #1
 80027a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d001      	beq.n	80027ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40007000 	.word	0x40007000
 80027c8:	40023800 	.word	0x40023800
 80027cc:	42470060 	.word	0x42470060

080027d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0cc      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e4:	4b68      	ldr	r3, [pc, #416]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d90c      	bls.n	800280c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f2:	4b65      	ldr	r3, [pc, #404]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b63      	ldr	r3, [pc, #396]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0b8      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002824:	4b59      	ldr	r3, [pc, #356]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4a58      	ldr	r2, [pc, #352]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800282e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800283c:	4b53      	ldr	r3, [pc, #332]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4a52      	ldr	r2, [pc, #328]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002848:	4b50      	ldr	r3, [pc, #320]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	494d      	ldr	r1, [pc, #308]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	4313      	orrs	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d044      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	4b47      	ldr	r3, [pc, #284]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d119      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e07f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d003      	beq.n	800288e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288a:	2b03      	cmp	r3, #3
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288e:	4b3f      	ldr	r3, [pc, #252]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e06f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289e:	4b3b      	ldr	r3, [pc, #236]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e067      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ae:	4b37      	ldr	r3, [pc, #220]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f023 0203 	bic.w	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4934      	ldr	r1, [pc, #208]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c0:	f7fe fabc 	bl	8000e3c <HAL_GetTick>
 80028c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	e00a      	b.n	80028de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c8:	f7fe fab8 	bl	8000e3c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e04f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 020c 	and.w	r2, r3, #12
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d1eb      	bne.n	80028c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028f0:	4b25      	ldr	r3, [pc, #148]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d20c      	bcs.n	8002918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b20      	ldr	r3, [pc, #128]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e032      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4916      	ldr	r1, [pc, #88]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	490e      	ldr	r1, [pc, #56]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002956:	f000 f821 	bl	800299c <HAL_RCC_GetSysClockFreq>
 800295a:	4602      	mov	r2, r0
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	490a      	ldr	r1, [pc, #40]	; (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 8002968:	5ccb      	ldrb	r3, [r1, r3]
 800296a:	fa22 f303 	lsr.w	r3, r2, r3
 800296e:	4a09      	ldr	r2, [pc, #36]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fa1c 	bl	8000db4 <HAL_InitTick>

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40023c00 	.word	0x40023c00
 800298c:	40023800 	.word	0x40023800
 8002990:	08005d0c 	.word	0x08005d0c
 8002994:	20000008 	.word	0x20000008
 8002998:	2000000c 	.word	0x2000000c

0800299c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800299c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	607b      	str	r3, [r7, #4]
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	2300      	movs	r3, #0
 80029ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b4:	4b67      	ldr	r3, [pc, #412]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d00d      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x40>
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	f200 80bd 	bhi.w	8002b40 <HAL_RCC_GetSysClockFreq+0x1a4>
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x34>
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d003      	beq.n	80029d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ce:	e0b7      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029d0:	4b61      	ldr	r3, [pc, #388]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029d2:	60bb      	str	r3, [r7, #8]
       break;
 80029d4:	e0b7      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029d6:	4b61      	ldr	r3, [pc, #388]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80029d8:	60bb      	str	r3, [r7, #8]
      break;
 80029da:	e0b4      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029dc:	4b5d      	ldr	r3, [pc, #372]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029e6:	4b5b      	ldr	r3, [pc, #364]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d04d      	beq.n	8002a8e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f2:	4b58      	ldr	r3, [pc, #352]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	099b      	lsrs	r3, r3, #6
 80029f8:	461a      	mov	r2, r3
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a02:	f04f 0100 	mov.w	r1, #0
 8002a06:	ea02 0800 	and.w	r8, r2, r0
 8002a0a:	ea03 0901 	and.w	r9, r3, r1
 8002a0e:	4640      	mov	r0, r8
 8002a10:	4649      	mov	r1, r9
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	014b      	lsls	r3, r1, #5
 8002a1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a20:	0142      	lsls	r2, r0, #5
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	ebb0 0008 	subs.w	r0, r0, r8
 8002a2a:	eb61 0109 	sbc.w	r1, r1, r9
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	018b      	lsls	r3, r1, #6
 8002a38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a3c:	0182      	lsls	r2, r0, #6
 8002a3e:	1a12      	subs	r2, r2, r0
 8002a40:	eb63 0301 	sbc.w	r3, r3, r1
 8002a44:	f04f 0000 	mov.w	r0, #0
 8002a48:	f04f 0100 	mov.w	r1, #0
 8002a4c:	00d9      	lsls	r1, r3, #3
 8002a4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a52:	00d0      	lsls	r0, r2, #3
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	eb12 0208 	adds.w	r2, r2, r8
 8002a5c:	eb43 0309 	adc.w	r3, r3, r9
 8002a60:	f04f 0000 	mov.w	r0, #0
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	0259      	lsls	r1, r3, #9
 8002a6a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a6e:	0250      	lsls	r0, r2, #9
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	f7fd fc06 	bl	8000290 <__aeabi_uldivmod>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4613      	mov	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	e04a      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a8e:	4b31      	ldr	r3, [pc, #196]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	099b      	lsrs	r3, r3, #6
 8002a94:	461a      	mov	r2, r3
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a9e:	f04f 0100 	mov.w	r1, #0
 8002aa2:	ea02 0400 	and.w	r4, r2, r0
 8002aa6:	ea03 0501 	and.w	r5, r3, r1
 8002aaa:	4620      	mov	r0, r4
 8002aac:	4629      	mov	r1, r5
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	014b      	lsls	r3, r1, #5
 8002ab8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002abc:	0142      	lsls	r2, r0, #5
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	1b00      	subs	r0, r0, r4
 8002ac4:	eb61 0105 	sbc.w	r1, r1, r5
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	018b      	lsls	r3, r1, #6
 8002ad2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ad6:	0182      	lsls	r2, r0, #6
 8002ad8:	1a12      	subs	r2, r2, r0
 8002ada:	eb63 0301 	sbc.w	r3, r3, r1
 8002ade:	f04f 0000 	mov.w	r0, #0
 8002ae2:	f04f 0100 	mov.w	r1, #0
 8002ae6:	00d9      	lsls	r1, r3, #3
 8002ae8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002aec:	00d0      	lsls	r0, r2, #3
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	1912      	adds	r2, r2, r4
 8002af4:	eb45 0303 	adc.w	r3, r5, r3
 8002af8:	f04f 0000 	mov.w	r0, #0
 8002afc:	f04f 0100 	mov.w	r1, #0
 8002b00:	0299      	lsls	r1, r3, #10
 8002b02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b06:	0290      	lsls	r0, r2, #10
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	461a      	mov	r2, r3
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	f7fd fbba 	bl	8000290 <__aeabi_uldivmod>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4613      	mov	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	0c1b      	lsrs	r3, r3, #16
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	60bb      	str	r3, [r7, #8]
      break;
 8002b3e:	e002      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b42:	60bb      	str	r3, [r7, #8]
      break;
 8002b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b46:	68bb      	ldr	r3, [r7, #8]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800
 8002b58:	00f42400 	.word	0x00f42400
 8002b5c:	007a1200 	.word	0x007a1200

08002b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b66:	681b      	ldr	r3, [r3, #0]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000008 	.word	0x20000008

08002b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b7c:	f7ff fff0 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	0a9b      	lsrs	r3, r3, #10
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	4903      	ldr	r1, [pc, #12]	; (8002b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b8e:	5ccb      	ldrb	r3, [r1, r3]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	08005d1c 	.word	0x08005d1c

08002ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ba4:	f7ff ffdc 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	0b5b      	lsrs	r3, r3, #13
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	4903      	ldr	r1, [pc, #12]	; (8002bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bb6:	5ccb      	ldrb	r3, [r1, r3]
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	08005d1c 	.word	0x08005d1c

08002bc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e07b      	b.n	8002cd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d108      	bne.n	8002bf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bea:	d009      	beq.n	8002c00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	61da      	str	r2, [r3, #28]
 8002bf2:	e005      	b.n	8002c00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fd ff72 	bl	8000b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c84:	ea42 0103 	orr.w	r1, r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	f003 0104 	and.w	r1, r3, #4
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	f003 0210 	and.w	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69da      	ldr	r2, [r3, #28]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b088      	sub	sp, #32
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_SPI_Transmit+0x22>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e126      	b.n	8002f4a <HAL_SPI_Transmit+0x270>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d04:	f7fe f89a 	bl	8000e3c <HAL_GetTick>
 8002d08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d002      	beq.n	8002d20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d1e:	e10b      	b.n	8002f38 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <HAL_SPI_Transmit+0x52>
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d102      	bne.n	8002d32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d30:	e102      	b.n	8002f38 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2203      	movs	r2, #3
 8002d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	88fa      	ldrh	r2, [r7, #6]
 8002d4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	88fa      	ldrh	r2, [r7, #6]
 8002d50:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d78:	d10f      	bne.n	8002d9a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da4:	2b40      	cmp	r3, #64	; 0x40
 8002da6:	d007      	beq.n	8002db8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002db6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc0:	d14b      	bne.n	8002e5a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_SPI_Transmit+0xf6>
 8002dca:	8afb      	ldrh	r3, [r7, #22]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d13e      	bne.n	8002e4e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	881a      	ldrh	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	1c9a      	adds	r2, r3, #2
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002df4:	e02b      	b.n	8002e4e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d112      	bne.n	8002e2a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	881a      	ldrh	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	1c9a      	adds	r2, r3, #2
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e28:	e011      	b.n	8002e4e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e2a:	f7fe f807 	bl	8000e3c <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d803      	bhi.n	8002e42 <HAL_SPI_Transmit+0x168>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d102      	bne.n	8002e48 <HAL_SPI_Transmit+0x16e>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d102      	bne.n	8002e4e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e4c:	e074      	b.n	8002f38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1ce      	bne.n	8002df6 <HAL_SPI_Transmit+0x11c>
 8002e58:	e04c      	b.n	8002ef4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_SPI_Transmit+0x18e>
 8002e62:	8afb      	ldrh	r3, [r7, #22]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d140      	bne.n	8002eea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	330c      	adds	r3, #12
 8002e72:	7812      	ldrb	r2, [r2, #0]
 8002e74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e8e:	e02c      	b.n	8002eea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d113      	bne.n	8002ec6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	330c      	adds	r3, #12
 8002ea8:	7812      	ldrb	r2, [r2, #0]
 8002eaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ec4:	e011      	b.n	8002eea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ec6:	f7fd ffb9 	bl	8000e3c <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d803      	bhi.n	8002ede <HAL_SPI_Transmit+0x204>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d102      	bne.n	8002ee4 <HAL_SPI_Transmit+0x20a>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d102      	bne.n	8002eea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ee8:	e026      	b.n	8002f38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1cd      	bne.n	8002e90 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	6839      	ldr	r1, [r7, #0]
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 fbcb 	bl	8003694 <SPI_EndRxTxTransaction>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10a      	bne.n	8002f28 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	77fb      	strb	r3, [r7, #31]
 8002f34:	e000      	b.n	8002f38 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002f36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f48:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b088      	sub	sp, #32
 8002f56:	af02      	add	r7, sp, #8
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f6e:	d112      	bne.n	8002f96 <HAL_SPI_Receive+0x44>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10e      	bne.n	8002f96 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f80:	88fa      	ldrh	r2, [r7, #6]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	4613      	mov	r3, r2
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f8f1 	bl	8003174 <HAL_SPI_TransmitReceive>
 8002f92:	4603      	mov	r3, r0
 8002f94:	e0ea      	b.n	800316c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_SPI_Receive+0x52>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e0e3      	b.n	800316c <HAL_SPI_Receive+0x21a>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fac:	f7fd ff46 	bl	8000e3c <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d002      	beq.n	8002fc4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fc2:	e0ca      	b.n	800315a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HAL_SPI_Receive+0x7e>
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d102      	bne.n	8002fd6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fd4:	e0c1      	b.n	800315a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2204      	movs	r2, #4
 8002fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	88fa      	ldrh	r2, [r7, #6]
 8002fee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	88fa      	ldrh	r2, [r7, #6]
 8002ff4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800301c:	d10f      	bne.n	800303e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800302c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800303c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003048:	2b40      	cmp	r3, #64	; 0x40
 800304a:	d007      	beq.n	800305c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800305a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d162      	bne.n	800312a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003064:	e02e      	b.n	80030c4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d115      	bne.n	80030a0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f103 020c 	add.w	r2, r3, #12
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	7812      	ldrb	r2, [r2, #0]
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800309e:	e011      	b.n	80030c4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030a0:	f7fd fecc 	bl	8000e3c <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d803      	bhi.n	80030b8 <HAL_SPI_Receive+0x166>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b6:	d102      	bne.n	80030be <HAL_SPI_Receive+0x16c>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d102      	bne.n	80030c4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030c2:	e04a      	b.n	800315a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1cb      	bne.n	8003066 <HAL_SPI_Receive+0x114>
 80030ce:	e031      	b.n	8003134 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d113      	bne.n	8003106 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	b292      	uxth	r2, r2
 80030ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f0:	1c9a      	adds	r2, r3, #2
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003104:	e011      	b.n	800312a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003106:	f7fd fe99 	bl	8000e3c <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d803      	bhi.n	800311e <HAL_SPI_Receive+0x1cc>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d102      	bne.n	8003124 <HAL_SPI_Receive+0x1d2>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d102      	bne.n	800312a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003128:	e017      	b.n	800315a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1cd      	bne.n	80030d0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	6839      	ldr	r1, [r7, #0]
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fa45 	bl	80035c8 <SPI_EndRxTransaction>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	75fb      	strb	r3, [r7, #23]
 8003156:	e000      	b.n	800315a <HAL_SPI_Receive+0x208>
  }

error :
 8003158:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800316a:	7dfb      	ldrb	r3, [r7, #23]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08c      	sub	sp, #48	; 0x30
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003182:	2301      	movs	r3, #1
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_SPI_TransmitReceive+0x26>
 8003196:	2302      	movs	r3, #2
 8003198:	e18a      	b.n	80034b0 <HAL_SPI_TransmitReceive+0x33c>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031a2:	f7fd fe4b 	bl	8000e3c <HAL_GetTick>
 80031a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80031b8:	887b      	ldrh	r3, [r7, #2]
 80031ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d00f      	beq.n	80031e4 <HAL_SPI_TransmitReceive+0x70>
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ca:	d107      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d103      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x68>
 80031d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d003      	beq.n	80031e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80031dc:	2302      	movs	r3, #2
 80031de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031e2:	e15b      	b.n	800349c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0x82>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0x82>
 80031f0:	887b      	ldrh	r3, [r7, #2]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d103      	bne.n	80031fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031fc:	e14e      	b.n	800349c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b04      	cmp	r3, #4
 8003208:	d003      	beq.n	8003212 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2205      	movs	r2, #5
 800320e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	887a      	ldrh	r2, [r7, #2]
 8003222:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	887a      	ldrh	r2, [r7, #2]
 8003234:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	887a      	ldrh	r2, [r7, #2]
 800323a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003252:	2b40      	cmp	r3, #64	; 0x40
 8003254:	d007      	beq.n	8003266 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003264:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326e:	d178      	bne.n	8003362 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <HAL_SPI_TransmitReceive+0x10a>
 8003278:	8b7b      	ldrh	r3, [r7, #26]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d166      	bne.n	800334c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	881a      	ldrh	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	1c9a      	adds	r2, r3, #2
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032a2:	e053      	b.n	800334c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d11b      	bne.n	80032ea <HAL_SPI_TransmitReceive+0x176>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d016      	beq.n	80032ea <HAL_SPI_TransmitReceive+0x176>
 80032bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d113      	bne.n	80032ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	881a      	ldrh	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	1c9a      	adds	r2, r3, #2
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d119      	bne.n	800332c <HAL_SPI_TransmitReceive+0x1b8>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d014      	beq.n	800332c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	b292      	uxth	r2, r2
 800330e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	1c9a      	adds	r2, r3, #2
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003328:	2301      	movs	r3, #1
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800332c:	f7fd fd86 	bl	8000e3c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003338:	429a      	cmp	r2, r3
 800333a:	d807      	bhi.n	800334c <HAL_SPI_TransmitReceive+0x1d8>
 800333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003342:	d003      	beq.n	800334c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800334a:	e0a7      	b.n	800349c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1a6      	bne.n	80032a4 <HAL_SPI_TransmitReceive+0x130>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1a1      	bne.n	80032a4 <HAL_SPI_TransmitReceive+0x130>
 8003360:	e07c      	b.n	800345c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_SPI_TransmitReceive+0x1fc>
 800336a:	8b7b      	ldrh	r3, [r7, #26]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d16b      	bne.n	8003448 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	330c      	adds	r3, #12
 800337a:	7812      	ldrb	r2, [r2, #0]
 800337c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003396:	e057      	b.n	8003448 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d11c      	bne.n	80033e0 <HAL_SPI_TransmitReceive+0x26c>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d017      	beq.n	80033e0 <HAL_SPI_TransmitReceive+0x26c>
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d114      	bne.n	80033e0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	330c      	adds	r3, #12
 80033c0:	7812      	ldrb	r2, [r2, #0]
 80033c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d119      	bne.n	8003422 <HAL_SPI_TransmitReceive+0x2ae>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d014      	beq.n	8003422 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800341e:	2301      	movs	r3, #1
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003422:	f7fd fd0b 	bl	8000e3c <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800342e:	429a      	cmp	r2, r3
 8003430:	d803      	bhi.n	800343a <HAL_SPI_TransmitReceive+0x2c6>
 8003432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003438:	d102      	bne.n	8003440 <HAL_SPI_TransmitReceive+0x2cc>
 800343a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343c:	2b00      	cmp	r3, #0
 800343e:	d103      	bne.n	8003448 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003446:	e029      	b.n	800349c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1a2      	bne.n	8003398 <HAL_SPI_TransmitReceive+0x224>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d19d      	bne.n	8003398 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800345c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 f917 	bl	8003694 <SPI_EndRxTxTransaction>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d006      	beq.n	800347a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003478:	e010      	b.n	800349c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10b      	bne.n	800349a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	e000      	b.n	800349c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800349a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3730      	adds	r7, #48	; 0x30
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	4613      	mov	r3, r2
 80034c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034c8:	f7fd fcb8 	bl	8000e3c <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	4413      	add	r3, r2
 80034d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034d8:	f7fd fcb0 	bl	8000e3c <HAL_GetTick>
 80034dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034de:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	015b      	lsls	r3, r3, #5
 80034e4:	0d1b      	lsrs	r3, r3, #20
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	fb02 f303 	mul.w	r3, r2, r3
 80034ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ee:	e054      	b.n	800359a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f6:	d050      	beq.n	800359a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034f8:	f7fd fca0 	bl	8000e3c <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	429a      	cmp	r2, r3
 8003506:	d902      	bls.n	800350e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d13d      	bne.n	800358a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800351c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003526:	d111      	bne.n	800354c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003530:	d004      	beq.n	800353c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353a:	d107      	bne.n	800354c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800354a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003554:	d10f      	bne.n	8003576 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003574:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e017      	b.n	80035ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	3b01      	subs	r3, #1
 8003598:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4013      	ands	r3, r2
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	bf0c      	ite	eq
 80035aa:	2301      	moveq	r3, #1
 80035ac:	2300      	movne	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d19b      	bne.n	80034f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3720      	adds	r7, #32
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000008 	.word	0x20000008

080035c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035dc:	d111      	bne.n	8003602 <SPI_EndRxTransaction+0x3a>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e6:	d004      	beq.n	80035f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f0:	d107      	bne.n	8003602 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003600:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800360a:	d12a      	bne.n	8003662 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003614:	d012      	beq.n	800363c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2200      	movs	r2, #0
 800361e:	2180      	movs	r1, #128	; 0x80
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f7ff ff49 	bl	80034b8 <SPI_WaitFlagStateUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d02d      	beq.n	8003688 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003630:	f043 0220 	orr.w	r2, r3, #32
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e026      	b.n	800368a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2200      	movs	r2, #0
 8003644:	2101      	movs	r1, #1
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f7ff ff36 	bl	80034b8 <SPI_WaitFlagStateUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d01a      	beq.n	8003688 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003656:	f043 0220 	orr.w	r2, r3, #32
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e013      	b.n	800368a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2200      	movs	r2, #0
 800366a:	2101      	movs	r1, #1
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f7ff ff23 	bl	80034b8 <SPI_WaitFlagStateUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d007      	beq.n	8003688 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367c:	f043 0220 	orr.w	r2, r3, #32
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e000      	b.n	800368a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af02      	add	r7, sp, #8
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036a0:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <SPI_EndRxTxTransaction+0x7c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1b      	ldr	r2, [pc, #108]	; (8003714 <SPI_EndRxTxTransaction+0x80>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	0d5b      	lsrs	r3, r3, #21
 80036ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036b0:	fb02 f303 	mul.w	r3, r2, r3
 80036b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036be:	d112      	bne.n	80036e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2200      	movs	r2, #0
 80036c8:	2180      	movs	r1, #128	; 0x80
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f7ff fef4 	bl	80034b8 <SPI_WaitFlagStateUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d016      	beq.n	8003704 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036da:	f043 0220 	orr.w	r2, r3, #32
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e00f      	b.n	8003706 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fc:	2b80      	cmp	r3, #128	; 0x80
 80036fe:	d0f2      	beq.n	80036e6 <SPI_EndRxTxTransaction+0x52>
 8003700:	e000      	b.n	8003704 <SPI_EndRxTxTransaction+0x70>
        break;
 8003702:	bf00      	nop
  }

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000008 	.word	0x20000008
 8003714:	165e9f81 	.word	0x165e9f81

08003718 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e03f      	b.n	80037aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fd fa28 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2224      	movs	r2, #36	; 0x24
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800375a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f929 	bl	80039b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003770:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003780:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003790:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b08a      	sub	sp, #40	; 0x28
 80037b6:	af02      	add	r7, sp, #8
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	603b      	str	r3, [r7, #0]
 80037be:	4613      	mov	r3, r2
 80037c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	d17c      	bne.n	80038cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <HAL_UART_Transmit+0x2c>
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e075      	b.n	80038ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_UART_Transmit+0x3e>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e06e      	b.n	80038ce <HAL_UART_Transmit+0x11c>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2221      	movs	r2, #33	; 0x21
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003806:	f7fd fb19 	bl	8000e3c <HAL_GetTick>
 800380a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	88fa      	ldrh	r2, [r7, #6]
 8003810:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	88fa      	ldrh	r2, [r7, #6]
 8003816:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003820:	d108      	bne.n	8003834 <HAL_UART_Transmit+0x82>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d104      	bne.n	8003834 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	61bb      	str	r3, [r7, #24]
 8003832:	e003      	b.n	800383c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003838:	2300      	movs	r3, #0
 800383a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003844:	e02a      	b.n	800389c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2200      	movs	r2, #0
 800384e:	2180      	movs	r1, #128	; 0x80
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 f840 	bl	80038d6 <UART_WaitOnFlagUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e036      	b.n	80038ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10b      	bne.n	800387e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003874:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	3302      	adds	r3, #2
 800387a:	61bb      	str	r3, [r7, #24]
 800387c:	e007      	b.n	800388e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	781a      	ldrb	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	3301      	adds	r3, #1
 800388c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1cf      	bne.n	8003846 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2200      	movs	r2, #0
 80038ae:	2140      	movs	r1, #64	; 0x40
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f810 	bl	80038d6 <UART_WaitOnFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e006      	b.n	80038ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	e000      	b.n	80038ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038cc:	2302      	movs	r3, #2
  }
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b090      	sub	sp, #64	; 0x40
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	4613      	mov	r3, r2
 80038e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e6:	e050      	b.n	800398a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ee:	d04c      	beq.n	800398a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d007      	beq.n	8003906 <UART_WaitOnFlagUntilTimeout+0x30>
 80038f6:	f7fd faa1 	bl	8000e3c <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003902:	429a      	cmp	r2, r3
 8003904:	d241      	bcs.n	800398a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	330c      	adds	r3, #12
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003910:	e853 3f00 	ldrex	r3, [r3]
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800391c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	330c      	adds	r3, #12
 8003924:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003926:	637a      	str	r2, [r7, #52]	; 0x34
 8003928:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800392c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800392e:	e841 2300 	strex	r3, r2, [r1]
 8003932:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1e5      	bne.n	8003906 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3314      	adds	r3, #20
 8003940:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	e853 3f00 	ldrex	r3, [r3]
 8003948:	613b      	str	r3, [r7, #16]
   return(result);
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f023 0301 	bic.w	r3, r3, #1
 8003950:	63bb      	str	r3, [r7, #56]	; 0x38
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3314      	adds	r3, #20
 8003958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800395a:	623a      	str	r2, [r7, #32]
 800395c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395e:	69f9      	ldr	r1, [r7, #28]
 8003960:	6a3a      	ldr	r2, [r7, #32]
 8003962:	e841 2300 	strex	r3, r2, [r1]
 8003966:	61bb      	str	r3, [r7, #24]
   return(result);
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1e5      	bne.n	800393a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e00f      	b.n	80039aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4013      	ands	r3, r2
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	429a      	cmp	r2, r3
 8003998:	bf0c      	ite	eq
 800399a:	2301      	moveq	r3, #1
 800399c:	2300      	movne	r3, #0
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	461a      	mov	r2, r3
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d09f      	beq.n	80038e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3740      	adds	r7, #64	; 0x40
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b8:	b09f      	sub	sp, #124	; 0x7c
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ca:	68d9      	ldr	r1, [r3, #12]
 80039cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	ea40 0301 	orr.w	r3, r0, r1
 80039d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	431a      	orrs	r2, r3
 80039e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	431a      	orrs	r2, r3
 80039e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80039ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039f8:	f021 010c 	bic.w	r1, r1, #12
 80039fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a02:	430b      	orrs	r3, r1
 8003a04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a12:	6999      	ldr	r1, [r3, #24]
 8003a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	ea40 0301 	orr.w	r3, r0, r1
 8003a1c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4bc5      	ldr	r3, [pc, #788]	; (8003d38 <UART_SetConfig+0x384>)
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d004      	beq.n	8003a32 <UART_SetConfig+0x7e>
 8003a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	4bc3      	ldr	r3, [pc, #780]	; (8003d3c <UART_SetConfig+0x388>)
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d103      	bne.n	8003a3a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a32:	f7ff f8b5 	bl	8002ba0 <HAL_RCC_GetPCLK2Freq>
 8003a36:	6778      	str	r0, [r7, #116]	; 0x74
 8003a38:	e002      	b.n	8003a40 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a3a:	f7ff f89d 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 8003a3e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a48:	f040 80b6 	bne.w	8003bb8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a4e:	461c      	mov	r4, r3
 8003a50:	f04f 0500 	mov.w	r5, #0
 8003a54:	4622      	mov	r2, r4
 8003a56:	462b      	mov	r3, r5
 8003a58:	1891      	adds	r1, r2, r2
 8003a5a:	6439      	str	r1, [r7, #64]	; 0x40
 8003a5c:	415b      	adcs	r3, r3
 8003a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a64:	1912      	adds	r2, r2, r4
 8003a66:	eb45 0303 	adc.w	r3, r5, r3
 8003a6a:	f04f 0000 	mov.w	r0, #0
 8003a6e:	f04f 0100 	mov.w	r1, #0
 8003a72:	00d9      	lsls	r1, r3, #3
 8003a74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a78:	00d0      	lsls	r0, r2, #3
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	1911      	adds	r1, r2, r4
 8003a80:	6639      	str	r1, [r7, #96]	; 0x60
 8003a82:	416b      	adcs	r3, r5
 8003a84:	667b      	str	r3, [r7, #100]	; 0x64
 8003a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	1891      	adds	r1, r2, r2
 8003a92:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a94:	415b      	adcs	r3, r3
 8003a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a9c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003aa0:	f7fc fbf6 	bl	8000290 <__aeabi_uldivmod>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4ba5      	ldr	r3, [pc, #660]	; (8003d40 <UART_SetConfig+0x38c>)
 8003aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	011e      	lsls	r6, r3, #4
 8003ab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab4:	461c      	mov	r4, r3
 8003ab6:	f04f 0500 	mov.w	r5, #0
 8003aba:	4622      	mov	r2, r4
 8003abc:	462b      	mov	r3, r5
 8003abe:	1891      	adds	r1, r2, r2
 8003ac0:	6339      	str	r1, [r7, #48]	; 0x30
 8003ac2:	415b      	adcs	r3, r3
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003aca:	1912      	adds	r2, r2, r4
 8003acc:	eb45 0303 	adc.w	r3, r5, r3
 8003ad0:	f04f 0000 	mov.w	r0, #0
 8003ad4:	f04f 0100 	mov.w	r1, #0
 8003ad8:	00d9      	lsls	r1, r3, #3
 8003ada:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ade:	00d0      	lsls	r0, r2, #3
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	1911      	adds	r1, r2, r4
 8003ae6:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ae8:	416b      	adcs	r3, r5
 8003aea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	461a      	mov	r2, r3
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	1891      	adds	r1, r2, r2
 8003af8:	62b9      	str	r1, [r7, #40]	; 0x28
 8003afa:	415b      	adcs	r3, r3
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b02:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b06:	f7fc fbc3 	bl	8000290 <__aeabi_uldivmod>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4b8c      	ldr	r3, [pc, #560]	; (8003d40 <UART_SetConfig+0x38c>)
 8003b10:	fba3 1302 	umull	r1, r3, r3, r2
 8003b14:	095b      	lsrs	r3, r3, #5
 8003b16:	2164      	movs	r1, #100	; 0x64
 8003b18:	fb01 f303 	mul.w	r3, r1, r3
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	3332      	adds	r3, #50	; 0x32
 8003b22:	4a87      	ldr	r2, [pc, #540]	; (8003d40 <UART_SetConfig+0x38c>)
 8003b24:	fba2 2303 	umull	r2, r3, r2, r3
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b30:	441e      	add	r6, r3
 8003b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b34:	4618      	mov	r0, r3
 8003b36:	f04f 0100 	mov.w	r1, #0
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	1894      	adds	r4, r2, r2
 8003b40:	623c      	str	r4, [r7, #32]
 8003b42:	415b      	adcs	r3, r3
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
 8003b46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b4a:	1812      	adds	r2, r2, r0
 8003b4c:	eb41 0303 	adc.w	r3, r1, r3
 8003b50:	f04f 0400 	mov.w	r4, #0
 8003b54:	f04f 0500 	mov.w	r5, #0
 8003b58:	00dd      	lsls	r5, r3, #3
 8003b5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b5e:	00d4      	lsls	r4, r2, #3
 8003b60:	4622      	mov	r2, r4
 8003b62:	462b      	mov	r3, r5
 8003b64:	1814      	adds	r4, r2, r0
 8003b66:	653c      	str	r4, [r7, #80]	; 0x50
 8003b68:	414b      	adcs	r3, r1
 8003b6a:	657b      	str	r3, [r7, #84]	; 0x54
 8003b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	461a      	mov	r2, r3
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	1891      	adds	r1, r2, r2
 8003b78:	61b9      	str	r1, [r7, #24]
 8003b7a:	415b      	adcs	r3, r3
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b86:	f7fc fb83 	bl	8000290 <__aeabi_uldivmod>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4b6c      	ldr	r3, [pc, #432]	; (8003d40 <UART_SetConfig+0x38c>)
 8003b90:	fba3 1302 	umull	r1, r3, r3, r2
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	2164      	movs	r1, #100	; 0x64
 8003b98:	fb01 f303 	mul.w	r3, r1, r3
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	3332      	adds	r3, #50	; 0x32
 8003ba2:	4a67      	ldr	r2, [pc, #412]	; (8003d40 <UART_SetConfig+0x38c>)
 8003ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	f003 0207 	and.w	r2, r3, #7
 8003bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4432      	add	r2, r6
 8003bb4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bb6:	e0b9      	b.n	8003d2c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bba:	461c      	mov	r4, r3
 8003bbc:	f04f 0500 	mov.w	r5, #0
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	462b      	mov	r3, r5
 8003bc4:	1891      	adds	r1, r2, r2
 8003bc6:	6139      	str	r1, [r7, #16]
 8003bc8:	415b      	adcs	r3, r3
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003bd0:	1912      	adds	r2, r2, r4
 8003bd2:	eb45 0303 	adc.w	r3, r5, r3
 8003bd6:	f04f 0000 	mov.w	r0, #0
 8003bda:	f04f 0100 	mov.w	r1, #0
 8003bde:	00d9      	lsls	r1, r3, #3
 8003be0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003be4:	00d0      	lsls	r0, r2, #3
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	eb12 0804 	adds.w	r8, r2, r4
 8003bee:	eb43 0905 	adc.w	r9, r3, r5
 8003bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f04f 0100 	mov.w	r1, #0
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	008b      	lsls	r3, r1, #2
 8003c06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c0a:	0082      	lsls	r2, r0, #2
 8003c0c:	4640      	mov	r0, r8
 8003c0e:	4649      	mov	r1, r9
 8003c10:	f7fc fb3e 	bl	8000290 <__aeabi_uldivmod>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4b49      	ldr	r3, [pc, #292]	; (8003d40 <UART_SetConfig+0x38c>)
 8003c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	011e      	lsls	r6, r3, #4
 8003c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c24:	4618      	mov	r0, r3
 8003c26:	f04f 0100 	mov.w	r1, #0
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	1894      	adds	r4, r2, r2
 8003c30:	60bc      	str	r4, [r7, #8]
 8003c32:	415b      	adcs	r3, r3
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c3a:	1812      	adds	r2, r2, r0
 8003c3c:	eb41 0303 	adc.w	r3, r1, r3
 8003c40:	f04f 0400 	mov.w	r4, #0
 8003c44:	f04f 0500 	mov.w	r5, #0
 8003c48:	00dd      	lsls	r5, r3, #3
 8003c4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c4e:	00d4      	lsls	r4, r2, #3
 8003c50:	4622      	mov	r2, r4
 8003c52:	462b      	mov	r3, r5
 8003c54:	1814      	adds	r4, r2, r0
 8003c56:	64bc      	str	r4, [r7, #72]	; 0x48
 8003c58:	414b      	adcs	r3, r1
 8003c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	008b      	lsls	r3, r1, #2
 8003c70:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c74:	0082      	lsls	r2, r0, #2
 8003c76:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003c7a:	f7fc fb09 	bl	8000290 <__aeabi_uldivmod>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4b2f      	ldr	r3, [pc, #188]	; (8003d40 <UART_SetConfig+0x38c>)
 8003c84:	fba3 1302 	umull	r1, r3, r3, r2
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	2164      	movs	r1, #100	; 0x64
 8003c8c:	fb01 f303 	mul.w	r3, r1, r3
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	3332      	adds	r3, #50	; 0x32
 8003c96:	4a2a      	ldr	r2, [pc, #168]	; (8003d40 <UART_SetConfig+0x38c>)
 8003c98:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9c:	095b      	lsrs	r3, r3, #5
 8003c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ca2:	441e      	add	r6, r3
 8003ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f04f 0100 	mov.w	r1, #0
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	1894      	adds	r4, r2, r2
 8003cb2:	603c      	str	r4, [r7, #0]
 8003cb4:	415b      	adcs	r3, r3
 8003cb6:	607b      	str	r3, [r7, #4]
 8003cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cbc:	1812      	adds	r2, r2, r0
 8003cbe:	eb41 0303 	adc.w	r3, r1, r3
 8003cc2:	f04f 0400 	mov.w	r4, #0
 8003cc6:	f04f 0500 	mov.w	r5, #0
 8003cca:	00dd      	lsls	r5, r3, #3
 8003ccc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cd0:	00d4      	lsls	r4, r2, #3
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	462b      	mov	r3, r5
 8003cd6:	eb12 0a00 	adds.w	sl, r2, r0
 8003cda:	eb43 0b01 	adc.w	fp, r3, r1
 8003cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f04f 0100 	mov.w	r1, #0
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	008b      	lsls	r3, r1, #2
 8003cf2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cf6:	0082      	lsls	r2, r0, #2
 8003cf8:	4650      	mov	r0, sl
 8003cfa:	4659      	mov	r1, fp
 8003cfc:	f7fc fac8 	bl	8000290 <__aeabi_uldivmod>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <UART_SetConfig+0x38c>)
 8003d06:	fba3 1302 	umull	r1, r3, r3, r2
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	2164      	movs	r1, #100	; 0x64
 8003d0e:	fb01 f303 	mul.w	r3, r1, r3
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	3332      	adds	r3, #50	; 0x32
 8003d18:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <UART_SetConfig+0x38c>)
 8003d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	f003 020f 	and.w	r2, r3, #15
 8003d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4432      	add	r2, r6
 8003d2a:	609a      	str	r2, [r3, #8]
}
 8003d2c:	bf00      	nop
 8003d2e:	377c      	adds	r7, #124	; 0x7c
 8003d30:	46bd      	mov	sp, r7
 8003d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d36:	bf00      	nop
 8003d38:	40011000 	.word	0x40011000
 8003d3c:	40011400 	.word	0x40011400
 8003d40:	51eb851f 	.word	0x51eb851f

08003d44 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <NRF24_DelayMicroSeconds+0x3c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0b      	ldr	r2, [pc, #44]	; (8003d84 <NRF24_DelayMicroSeconds+0x40>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	0c9a      	lsrs	r2, r3, #18
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	fb02 f303 	mul.w	r3, r2, r3
 8003d62:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8003d64:	bf00      	nop
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	1e5a      	subs	r2, r3, #1
 8003d6a:	60fa      	str	r2, [r7, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1fa      	bne.n	8003d66 <NRF24_DelayMicroSeconds+0x22>
}
 8003d70:	bf00      	nop
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000008 	.word	0x20000008
 8003d84:	165e9f81 	.word	0x165e9f81

08003d88 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d008      	beq.n	8003da8 <NRF24_csn+0x20>
 8003d96:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <NRF24_csn+0x38>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a0a      	ldr	r2, [pc, #40]	; (8003dc4 <NRF24_csn+0x3c>)
 8003d9c:	8811      	ldrh	r1, [r2, #0]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fe fa83 	bl	80022ac <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8003da6:	e007      	b.n	8003db8 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <NRF24_csn+0x38>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a05      	ldr	r2, [pc, #20]	; (8003dc4 <NRF24_csn+0x3c>)
 8003dae:	8811      	ldrh	r1, [r2, #0]
 8003db0:	2200      	movs	r2, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe fa7a 	bl	80022ac <HAL_GPIO_WritePin>
}
 8003db8:	bf00      	nop
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	200000a0 	.word	0x200000a0
 8003dc4:	200000a4 	.word	0x200000a4

08003dc8 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d008      	beq.n	8003de8 <NRF24_ce+0x20>
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <NRF24_ce+0x38>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a0a      	ldr	r2, [pc, #40]	; (8003e04 <NRF24_ce+0x3c>)
 8003ddc:	8811      	ldrh	r1, [r2, #0]
 8003dde:	2201      	movs	r2, #1
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fe fa63 	bl	80022ac <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8003de6:	e007      	b.n	8003df8 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8003de8:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <NRF24_ce+0x38>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <NRF24_ce+0x3c>)
 8003dee:	8811      	ldrh	r1, [r2, #0]
 8003df0:	2200      	movs	r2, #0
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fe fa5a 	bl	80022ac <HAL_GPIO_WritePin>
}
 8003df8:	bf00      	nop
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	200000a0 	.word	0x200000a0
 8003e04:	200000a6 	.word	0x200000a6

08003e08 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8003e12:	2000      	movs	r0, #0
 8003e14:	f7ff ffb8 	bl	8003d88 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003e22:	f107 010c 	add.w	r1, r7, #12
 8003e26:	2364      	movs	r3, #100	; 0x64
 8003e28:	2201      	movs	r2, #1
 8003e2a:	480a      	ldr	r0, [pc, #40]	; (8003e54 <NRF24_read_register+0x4c>)
 8003e2c:	f7fe ff55 	bl	8002cda <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8003e30:	f107 030c 	add.w	r3, r7, #12
 8003e34:	1c59      	adds	r1, r3, #1
 8003e36:	2364      	movs	r3, #100	; 0x64
 8003e38:	2201      	movs	r2, #1
 8003e3a:	4806      	ldr	r0, [pc, #24]	; (8003e54 <NRF24_read_register+0x4c>)
 8003e3c:	f7ff f889 	bl	8002f52 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8003e40:	7b7b      	ldrb	r3, [r7, #13]
 8003e42:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8003e44:	2001      	movs	r0, #1
 8003e46:	f7ff ff9f 	bl	8003d88 <NRF24_csn>
	return retData;
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	200000a8 	.word	0x200000a8

08003e58 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	6039      	str	r1, [r7, #0]
 8003e62:	71fb      	strb	r3, [r7, #7]
 8003e64:	4613      	mov	r3, r2
 8003e66:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f7ff ff8d 	bl	8003d88 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	f003 031f 	and.w	r3, r3, #31
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003e78:	f107 010c 	add.w	r1, r7, #12
 8003e7c:	2364      	movs	r3, #100	; 0x64
 8003e7e:	2201      	movs	r2, #1
 8003e80:	4808      	ldr	r0, [pc, #32]	; (8003ea4 <NRF24_read_registerN+0x4c>)
 8003e82:	f7fe ff2a 	bl	8002cda <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8003e86:	79bb      	ldrb	r3, [r7, #6]
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	2364      	movs	r3, #100	; 0x64
 8003e8c:	6839      	ldr	r1, [r7, #0]
 8003e8e:	4805      	ldr	r0, [pc, #20]	; (8003ea4 <NRF24_read_registerN+0x4c>)
 8003e90:	f7ff f85f 	bl	8002f52 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8003e94:	2001      	movs	r0, #1
 8003e96:	f7ff ff77 	bl	8003d88 <NRF24_csn>
}
 8003e9a:	bf00      	nop
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	200000a8 	.word	0x200000a8

08003ea8 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	460a      	mov	r2, r1
 8003eb2:	71fb      	strb	r3, [r7, #7]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003eb8:	2000      	movs	r0, #0
 8003eba:	f7ff ff65 	bl	8003d88 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	f043 0320 	orr.w	r3, r3, #32
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8003ec8:	79bb      	ldrb	r3, [r7, #6]
 8003eca:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8003ecc:	f107 010c 	add.w	r1, r7, #12
 8003ed0:	2364      	movs	r3, #100	; 0x64
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	4804      	ldr	r0, [pc, #16]	; (8003ee8 <NRF24_write_register+0x40>)
 8003ed6:	f7fe ff00 	bl	8002cda <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8003eda:	2001      	movs	r0, #1
 8003edc:	f7ff ff54 	bl	8003d88 <NRF24_csn>
}
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	200000a8 	.word	0x200000a8

08003eec <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	6039      	str	r1, [r7, #0]
 8003ef6:	71fb      	strb	r3, [r7, #7]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003efc:	2000      	movs	r0, #0
 8003efe:	f7ff ff43 	bl	8003d88 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	f043 0320 	orr.w	r3, r3, #32
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003f0c:	f107 010c 	add.w	r1, r7, #12
 8003f10:	2364      	movs	r3, #100	; 0x64
 8003f12:	2201      	movs	r2, #1
 8003f14:	4808      	ldr	r0, [pc, #32]	; (8003f38 <NRF24_write_registerN+0x4c>)
 8003f16:	f7fe fee0 	bl	8002cda <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8003f1a:	79bb      	ldrb	r3, [r7, #6]
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	2364      	movs	r3, #100	; 0x64
 8003f20:	6839      	ldr	r1, [r7, #0]
 8003f22:	4805      	ldr	r0, [pc, #20]	; (8003f38 <NRF24_write_registerN+0x4c>)
 8003f24:	f7fe fed9 	bl	8002cda <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8003f28:	2001      	movs	r0, #1
 8003f2a:	f7ff ff2d 	bl	8003d88 <NRF24_csn>
}
 8003f2e:	bf00      	nop
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	200000a8 	.word	0x200000a8

08003f3c <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8003f48:	2000      	movs	r0, #0
 8003f4a:	f7ff ff1d 	bl	8003d88 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8003f4e:	23a0      	movs	r3, #160	; 0xa0
 8003f50:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8003f52:	f107 010f 	add.w	r1, r7, #15
 8003f56:	2364      	movs	r3, #100	; 0x64
 8003f58:	2201      	movs	r2, #1
 8003f5a:	4808      	ldr	r0, [pc, #32]	; (8003f7c <NRF24_write_payload+0x40>)
 8003f5c:	f7fe febd 	bl	8002cda <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	2364      	movs	r3, #100	; 0x64
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	4804      	ldr	r0, [pc, #16]	; (8003f7c <NRF24_write_payload+0x40>)
 8003f6a:	f7fe feb6 	bl	8002cda <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8003f6e:	2001      	movs	r0, #1
 8003f70:	f7ff ff0a 	bl	8003d88 <NRF24_csn>
}
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	200000a8 	.word	0x200000a8

08003f80 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8003f84:	21ff      	movs	r1, #255	; 0xff
 8003f86:	20e1      	movs	r0, #225	; 0xe1
 8003f88:	f7ff ff8e 	bl	8003ea8 <NRF24_write_register>
}
 8003f8c:	bf00      	nop
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8003f94:	21ff      	movs	r1, #255	; 0xff
 8003f96:	20e2      	movs	r0, #226	; 0xe2
 8003f98:	f7ff ff86 	bl	8003ea8 <NRF24_write_register>
}
 8003f9c:	bf00      	nop
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8003fa6:	2007      	movs	r0, #7
 8003fa8:	f7ff ff2e 	bl	8003e08 <NRF24_read_register>
 8003fac:	4603      	mov	r3, r0
 8003fae:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	61fb      	str	r3, [r7, #28]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	807b      	strh	r3, [r7, #2]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8003fd0:	4b66      	ldr	r3, [pc, #408]	; (800416c <NRF24_begin+0x1b0>)
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f107 031c 	add.w	r3, r7, #28
 8003fd8:	2258      	movs	r2, #88	; 0x58
 8003fda:	4619      	mov	r1, r3
 8003fdc:	f000 ffa4 	bl	8004f28 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8003fe0:	4a63      	ldr	r2, [pc, #396]	; (8004170 <NRF24_begin+0x1b4>)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8003fe6:	4a63      	ldr	r2, [pc, #396]	; (8004174 <NRF24_begin+0x1b8>)
 8003fe8:	887b      	ldrh	r3, [r7, #2]
 8003fea:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8003fec:	4a62      	ldr	r2, [pc, #392]	; (8004178 <NRF24_begin+0x1bc>)
 8003fee:	883b      	ldrh	r3, [r7, #0]
 8003ff0:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8003ff2:	2001      	movs	r0, #1
 8003ff4:	f7ff fec8 	bl	8003d88 <NRF24_csn>
	NRF24_ce(0);
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	f7ff fee5 	bl	8003dc8 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8003ffe:	2005      	movs	r0, #5
 8004000:	f7fc ff28 	bl	8000e54 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8004004:	2108      	movs	r1, #8
 8004006:	2000      	movs	r0, #0
 8004008:	f7ff ff4e 	bl	8003ea8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800400c:	213f      	movs	r1, #63	; 0x3f
 800400e:	2001      	movs	r0, #1
 8004010:	f7ff ff4a 	bl	8003ea8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8004014:	2103      	movs	r1, #3
 8004016:	2002      	movs	r0, #2
 8004018:	f7ff ff46 	bl	8003ea8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800401c:	2103      	movs	r1, #3
 800401e:	2003      	movs	r0, #3
 8004020:	f7ff ff42 	bl	8003ea8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8004024:	2103      	movs	r1, #3
 8004026:	2004      	movs	r0, #4
 8004028:	f7ff ff3e 	bl	8003ea8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800402c:	2102      	movs	r1, #2
 800402e:	2005      	movs	r0, #5
 8004030:	f7ff ff3a 	bl	8003ea8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8004034:	210f      	movs	r1, #15
 8004036:	2006      	movs	r0, #6
 8004038:	f7ff ff36 	bl	8003ea8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 800403c:	210e      	movs	r1, #14
 800403e:	2007      	movs	r0, #7
 8004040:	f7ff ff32 	bl	8003ea8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8004044:	2100      	movs	r1, #0
 8004046:	2008      	movs	r0, #8
 8004048:	f7ff ff2e 	bl	8003ea8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 800404c:	2100      	movs	r1, #0
 800404e:	2009      	movs	r0, #9
 8004050:	f7ff ff2a 	bl	8003ea8 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8004054:	23e7      	movs	r3, #231	; 0xe7
 8004056:	733b      	strb	r3, [r7, #12]
 8004058:	23e7      	movs	r3, #231	; 0xe7
 800405a:	72fb      	strb	r3, [r7, #11]
 800405c:	23e7      	movs	r3, #231	; 0xe7
 800405e:	72bb      	strb	r3, [r7, #10]
 8004060:	23e7      	movs	r3, #231	; 0xe7
 8004062:	727b      	strb	r3, [r7, #9]
 8004064:	23e7      	movs	r3, #231	; 0xe7
 8004066:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8004068:	f107 0308 	add.w	r3, r7, #8
 800406c:	2205      	movs	r2, #5
 800406e:	4619      	mov	r1, r3
 8004070:	200a      	movs	r0, #10
 8004072:	f7ff ff3b 	bl	8003eec <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8004076:	23c2      	movs	r3, #194	; 0xc2
 8004078:	733b      	strb	r3, [r7, #12]
 800407a:	23c2      	movs	r3, #194	; 0xc2
 800407c:	72fb      	strb	r3, [r7, #11]
 800407e:	23c2      	movs	r3, #194	; 0xc2
 8004080:	72bb      	strb	r3, [r7, #10]
 8004082:	23c2      	movs	r3, #194	; 0xc2
 8004084:	727b      	strb	r3, [r7, #9]
 8004086:	23c2      	movs	r3, #194	; 0xc2
 8004088:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800408a:	f107 0308 	add.w	r3, r7, #8
 800408e:	2205      	movs	r2, #5
 8004090:	4619      	mov	r1, r3
 8004092:	200b      	movs	r0, #11
 8004094:	f7ff ff2a 	bl	8003eec <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8004098:	21c3      	movs	r1, #195	; 0xc3
 800409a:	200c      	movs	r0, #12
 800409c:	f7ff ff04 	bl	8003ea8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80040a0:	21c4      	movs	r1, #196	; 0xc4
 80040a2:	200d      	movs	r0, #13
 80040a4:	f7ff ff00 	bl	8003ea8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80040a8:	21c5      	movs	r1, #197	; 0xc5
 80040aa:	200e      	movs	r0, #14
 80040ac:	f7ff fefc 	bl	8003ea8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80040b0:	21c6      	movs	r1, #198	; 0xc6
 80040b2:	200f      	movs	r0, #15
 80040b4:	f7ff fef8 	bl	8003ea8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80040b8:	23e7      	movs	r3, #231	; 0xe7
 80040ba:	733b      	strb	r3, [r7, #12]
 80040bc:	23e7      	movs	r3, #231	; 0xe7
 80040be:	72fb      	strb	r3, [r7, #11]
 80040c0:	23e7      	movs	r3, #231	; 0xe7
 80040c2:	72bb      	strb	r3, [r7, #10]
 80040c4:	23e7      	movs	r3, #231	; 0xe7
 80040c6:	727b      	strb	r3, [r7, #9]
 80040c8:	23e7      	movs	r3, #231	; 0xe7
 80040ca:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80040cc:	f107 0308 	add.w	r3, r7, #8
 80040d0:	2205      	movs	r2, #5
 80040d2:	4619      	mov	r1, r3
 80040d4:	2010      	movs	r0, #16
 80040d6:	f7ff ff09 	bl	8003eec <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80040da:	2100      	movs	r1, #0
 80040dc:	2011      	movs	r0, #17
 80040de:	f7ff fee3 	bl	8003ea8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80040e2:	2100      	movs	r1, #0
 80040e4:	2012      	movs	r0, #18
 80040e6:	f7ff fedf 	bl	8003ea8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80040ea:	2100      	movs	r1, #0
 80040ec:	2013      	movs	r0, #19
 80040ee:	f7ff fedb 	bl	8003ea8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80040f2:	2100      	movs	r1, #0
 80040f4:	2014      	movs	r0, #20
 80040f6:	f7ff fed7 	bl	8003ea8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80040fa:	2100      	movs	r1, #0
 80040fc:	2015      	movs	r0, #21
 80040fe:	f7ff fed3 	bl	8003ea8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8004102:	2100      	movs	r1, #0
 8004104:	2016      	movs	r0, #22
 8004106:	f7ff fecf 	bl	8003ea8 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800410a:	f000 fa89 	bl	8004620 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800410e:	2100      	movs	r1, #0
 8004110:	201c      	movs	r0, #28
 8004112:	f7ff fec9 	bl	8003ea8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8004116:	2100      	movs	r1, #0
 8004118:	201d      	movs	r0, #29
 800411a:	f7ff fec5 	bl	8003ea8 <NRF24_write_register>
	printRadioSettings();
 800411e:	f000 fa99 	bl	8004654 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8004122:	210f      	movs	r1, #15
 8004124:	200f      	movs	r0, #15
 8004126:	f000 f8ad 	bl	8004284 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800412a:	2003      	movs	r0, #3
 800412c:	f000 f927 	bl	800437e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8004130:	2001      	movs	r0, #1
 8004132:	f000 f95d 	bl	80043f0 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8004136:	2002      	movs	r0, #2
 8004138:	f000 f9a0 	bl	800447c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 800413c:	f000 f8f2 	bl	8004324 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8004140:	2020      	movs	r0, #32
 8004142:	f000 f8cf 	bl	80042e4 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8004146:	f000 fa62 	bl	800460e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800414a:	204c      	movs	r0, #76	; 0x4c
 800414c:	f000 f8b5 	bl	80042ba <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8004150:	f7ff ff16 	bl	8003f80 <NRF24_flush_tx>
	NRF24_flush_rx();
 8004154:	f7ff ff1c 	bl	8003f90 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8004158:	f000 f9b8 	bl	80044cc <NRF24_powerDown>
	
}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004166:	b002      	add	sp, #8
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	200000a8 	.word	0x200000a8
 8004170:	200000a0 	.word	0x200000a0
 8004174:	200000a4 	.word	0x200000a4
 8004178:	200000a6 	.word	0x200000a6

0800417c <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8004180:	2000      	movs	r0, #0
 8004182:	f7ff fe21 	bl	8003dc8 <NRF24_ce>
	NRF24_flush_tx();
 8004186:	f7ff fefb 	bl	8003f80 <NRF24_flush_tx>
	NRF24_flush_rx();
 800418a:	f7ff ff01 	bl	8003f90 <NRF24_flush_rx>
}
 800418e:	bf00      	nop
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80041a0:	f000 fa35 	bl	800460e <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	4619      	mov	r1, r3
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f9ce 	bl	800454a <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 80041ae:	f7fc fe45 	bl	8000e3c <HAL_GetTick>
 80041b2:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80041b4:	230a      	movs	r3, #10
 80041b6:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80041b8:	f107 030d 	add.w	r3, r7, #13
 80041bc:	2201      	movs	r2, #1
 80041be:	4619      	mov	r1, r3
 80041c0:	2008      	movs	r0, #8
 80041c2:	f7ff fe49 	bl	8003e58 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 80041c6:	f7ff feeb 	bl	8003fa0 <NRF24_get_status>
 80041ca:	4603      	mov	r3, r0
 80041cc:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d107      	bne.n	80041e8 <NRF24_write+0x54>
 80041d8:	f7fc fe30 	bl	8000e3c <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d8e7      	bhi.n	80041b8 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 80041e8:	f107 010b 	add.w	r1, r7, #11
 80041ec:	f107 030c 	add.w	r3, r7, #12
 80041f0:	4a0c      	ldr	r2, [pc, #48]	; (8004224 <NRF24_write+0x90>)
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 f9d8 	bl	80045a8 <NRF24_whatHappened>
	retStatus = tx_ok;
 80041f8:	7b3b      	ldrb	r3, [r7, #12]
 80041fa:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 80041fc:	4b09      	ldr	r3, [pc, #36]	; (8004224 <NRF24_write+0x90>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8004204:	f000 f886 	bl	8004314 <NRF24_getDynamicPayloadSize>
 8004208:	4603      	mov	r3, r0
 800420a:	461a      	mov	r2, r3
 800420c:	4b06      	ldr	r3, [pc, #24]	; (8004228 <NRF24_write+0x94>)
 800420e:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8004210:	f000 f80c 	bl	800422c <NRF24_available>
	NRF24_flush_tx();
 8004214:	f7ff feb4 	bl	8003f80 <NRF24_flush_tx>
	return retStatus;
 8004218:	7bbb      	ldrb	r3, [r7, #14]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000098 	.word	0x20000098
 8004228:	20000099 	.word	0x20000099

0800422c <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8004230:	2000      	movs	r0, #0
 8004232:	f000 f95a 	bl	80044ea <NRF24_availablePipe>
 8004236:	4603      	mov	r3, r0
}
 8004238:	4618      	mov	r0, r3
 800423a:	bd80      	pop	{r7, pc}

0800423c <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8004246:	463b      	mov	r3, r7
 8004248:	2205      	movs	r2, #5
 800424a:	4619      	mov	r1, r3
 800424c:	200a      	movs	r0, #10
 800424e:	f7ff fe4d 	bl	8003eec <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8004252:	463b      	mov	r3, r7
 8004254:	2205      	movs	r2, #5
 8004256:	4619      	mov	r1, r3
 8004258:	2010      	movs	r0, #16
 800425a:	f7ff fe47 	bl	8003eec <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 800425e:	2320      	movs	r3, #32
 8004260:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8004262:	4b07      	ldr	r3, [pc, #28]	; (8004280 <NRF24_openWritingPipe+0x44>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	7bfa      	ldrb	r2, [r7, #15]
 8004268:	4293      	cmp	r3, r2
 800426a:	bf28      	it	cs
 800426c:	4613      	movcs	r3, r2
 800426e:	b2db      	uxtb	r3, r3
 8004270:	4619      	mov	r1, r3
 8004272:	2011      	movs	r0, #17
 8004274:	f7ff fe18 	bl	8003ea8 <NRF24_write_register>
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	2000009a 	.word	0x2000009a

08004284 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	460a      	mov	r2, r1
 800428e:	71fb      	strb	r3, [r7, #7]
 8004290:	4613      	mov	r3, r2
 8004292:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	b25a      	sxtb	r2, r3
 800429a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	b25b      	sxtb	r3, r3
 80042a4:	4313      	orrs	r3, r2
 80042a6:	b25b      	sxtb	r3, r3
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	4619      	mov	r1, r3
 80042ac:	2004      	movs	r0, #4
 80042ae:	f7ff fdfb 	bl	8003ea8 <NRF24_write_register>
}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	4603      	mov	r3, r0
 80042c2:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80042c4:	237f      	movs	r3, #127	; 0x7f
 80042c6:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80042c8:	7bfa      	ldrb	r2, [r7, #15]
 80042ca:	79fb      	ldrb	r3, [r7, #7]
 80042cc:	4293      	cmp	r3, r2
 80042ce:	bf28      	it	cs
 80042d0:	4613      	movcs	r3, r2
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	4619      	mov	r1, r3
 80042d6:	2005      	movs	r0, #5
 80042d8:	f7ff fde6 	bl	8003ea8 <NRF24_write_register>
}
 80042dc:	bf00      	nop
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80042ee:	2320      	movs	r3, #32
 80042f0:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80042f2:	7bfa      	ldrb	r2, [r7, #15]
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	4293      	cmp	r3, r2
 80042f8:	bf28      	it	cs
 80042fa:	4613      	movcs	r3, r2
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	4b04      	ldr	r3, [pc, #16]	; (8004310 <NRF24_setPayloadSize+0x2c>)
 8004300:	701a      	strb	r2, [r3, #0]
}
 8004302:	bf00      	nop
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	2000009a 	.word	0x2000009a

08004314 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8004318:	2060      	movs	r0, #96	; 0x60
 800431a:	f7ff fd75 	bl	8003e08 <NRF24_read_register>
 800431e:	4603      	mov	r3, r0
}
 8004320:	4618      	mov	r0, r3
 8004322:	bd80      	pop	{r7, pc}

08004324 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8004328:	201d      	movs	r0, #29
 800432a:	f7ff fd6d 	bl	8003e08 <NRF24_read_register>
 800432e:	4603      	mov	r3, r0
 8004330:	f023 0304 	bic.w	r3, r3, #4
 8004334:	b2db      	uxtb	r3, r3
 8004336:	4619      	mov	r1, r3
 8004338:	201d      	movs	r0, #29
 800433a:	f7ff fdb5 	bl	8003ea8 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800433e:	2100      	movs	r1, #0
 8004340:	201c      	movs	r0, #28
 8004342:	f7ff fdb1 	bl	8003ea8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8004346:	4b02      	ldr	r3, [pc, #8]	; (8004350 <NRF24_disableDynamicPayloads+0x2c>)
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]
}
 800434c:	bf00      	nop
 800434e:	bd80      	pop	{r7, pc}
 8004350:	2000009b 	.word	0x2000009b

08004354 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d004      	beq.n	800436e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8004364:	213f      	movs	r1, #63	; 0x3f
 8004366:	2001      	movs	r0, #1
 8004368:	f7ff fd9e 	bl	8003ea8 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 800436c:	e003      	b.n	8004376 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800436e:	2100      	movs	r1, #0
 8004370:	2001      	movs	r0, #1
 8004372:	f7ff fd99 	bl	8003ea8 <NRF24_write_register>
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b084      	sub	sp, #16
 8004382:	af00      	add	r7, sp, #0
 8004384:	4603      	mov	r3, r0
 8004386:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8004388:	2006      	movs	r0, #6
 800438a:	f7ff fd3d 	bl	8003e08 <NRF24_read_register>
 800438e:	4603      	mov	r3, r0
 8004390:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	f023 0306 	bic.w	r3, r3, #6
 8004398:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	2b03      	cmp	r3, #3
 800439e:	d104      	bne.n	80043aa <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	f043 0306 	orr.w	r3, r3, #6
 80043a6:	73fb      	strb	r3, [r7, #15]
 80043a8:	e019      	b.n	80043de <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d104      	bne.n	80043ba <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	f043 0304 	orr.w	r3, r3, #4
 80043b6:	73fb      	strb	r3, [r7, #15]
 80043b8:	e011      	b.n	80043de <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d104      	bne.n	80043ca <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	f043 0302 	orr.w	r3, r3, #2
 80043c6:	73fb      	strb	r3, [r7, #15]
 80043c8:	e009      	b.n	80043de <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80043ca:	79fb      	ldrb	r3, [r7, #7]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d006      	beq.n	80043de <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d103      	bne.n	80043de <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
 80043d8:	f043 0306 	orr.w	r3, r3, #6
 80043dc:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80043de:	7bfb      	ldrb	r3, [r7, #15]
 80043e0:	4619      	mov	r1, r3
 80043e2:	2006      	movs	r0, #6
 80043e4:	f7ff fd60 	bl	8003ea8 <NRF24_write_register>
}
 80043e8:	bf00      	nop
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80043fe:	2006      	movs	r0, #6
 8004400:	f7ff fd02 	bl	8003e08 <NRF24_read_register>
 8004404:	4603      	mov	r3, r0
 8004406:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8004408:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <NRF24_setDataRate+0x88>)
 800440a:	2200      	movs	r2, #0
 800440c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800440e:	7bbb      	ldrb	r3, [r7, #14]
 8004410:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004414:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d107      	bne.n	800442c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 800441c:	4b16      	ldr	r3, [pc, #88]	; (8004478 <NRF24_setDataRate+0x88>)
 800441e:	2200      	movs	r2, #0
 8004420:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8004422:	7bbb      	ldrb	r3, [r7, #14]
 8004424:	f043 0320 	orr.w	r3, r3, #32
 8004428:	73bb      	strb	r3, [r7, #14]
 800442a:	e00d      	b.n	8004448 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d107      	bne.n	8004442 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8004432:	4b11      	ldr	r3, [pc, #68]	; (8004478 <NRF24_setDataRate+0x88>)
 8004434:	2201      	movs	r2, #1
 8004436:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8004438:	7bbb      	ldrb	r3, [r7, #14]
 800443a:	f043 0308 	orr.w	r3, r3, #8
 800443e:	73bb      	strb	r3, [r7, #14]
 8004440:	e002      	b.n	8004448 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8004442:	4b0d      	ldr	r3, [pc, #52]	; (8004478 <NRF24_setDataRate+0x88>)
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8004448:	7bbb      	ldrb	r3, [r7, #14]
 800444a:	4619      	mov	r1, r3
 800444c:	2006      	movs	r0, #6
 800444e:	f7ff fd2b 	bl	8003ea8 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8004452:	2006      	movs	r0, #6
 8004454:	f7ff fcd8 	bl	8003e08 <NRF24_read_register>
 8004458:	4603      	mov	r3, r0
 800445a:	461a      	mov	r2, r3
 800445c:	7bbb      	ldrb	r3, [r7, #14]
 800445e:	4293      	cmp	r3, r2
 8004460:	d102      	bne.n	8004468 <NRF24_setDataRate+0x78>
  {
    result = true;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
 8004466:	e002      	b.n	800446e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8004468:	4b03      	ldr	r3, [pc, #12]	; (8004478 <NRF24_setDataRate+0x88>)
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800446e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	2000009c 	.word	0x2000009c

0800447c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8004486:	2000      	movs	r0, #0
 8004488:	f7ff fcbe 	bl	8003e08 <NRF24_read_register>
 800448c:	4603      	mov	r3, r0
 800448e:	f023 030c 	bic.w	r3, r3, #12
 8004492:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00f      	beq.n	80044ba <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d104      	bne.n	80044aa <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
 80044a2:	f043 0308 	orr.w	r3, r3, #8
 80044a6:	73fb      	strb	r3, [r7, #15]
 80044a8:	e007      	b.n	80044ba <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
 80044ac:	f043 0308 	orr.w	r3, r3, #8
 80044b0:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	f043 0304 	orr.w	r3, r3, #4
 80044b8:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	4619      	mov	r1, r3
 80044be:	2000      	movs	r0, #0
 80044c0:	f7ff fcf2 	bl	8003ea8 <NRF24_write_register>
}
 80044c4:	bf00      	nop
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80044d0:	2000      	movs	r0, #0
 80044d2:	f7ff fc99 	bl	8003e08 <NRF24_read_register>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f023 0302 	bic.w	r3, r3, #2
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	4619      	mov	r1, r3
 80044e0:	2000      	movs	r0, #0
 80044e2:	f7ff fce1 	bl	8003ea8 <NRF24_write_register>
}
 80044e6:	bf00      	nop
 80044e8:	bd80      	pop	{r7, pc}

080044ea <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80044f2:	f7ff fd55 	bl	8003fa0 <NRF24_get_status>
 80044f6:	4603      	mov	r3, r0
 80044f8:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004500:	2b00      	cmp	r3, #0
 8004502:	bf14      	ite	ne
 8004504:	2301      	movne	r3, #1
 8004506:	2300      	moveq	r3, #0
 8004508:	73bb      	strb	r3, [r7, #14]

  if (result)
 800450a:	7bbb      	ldrb	r3, [r7, #14]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d017      	beq.n	8004540 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	085b      	lsrs	r3, r3, #1
 800451a:	b2db      	uxtb	r3, r3
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	b2da      	uxtb	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8004526:	2140      	movs	r1, #64	; 0x40
 8004528:	2007      	movs	r0, #7
 800452a:	f7ff fcbd 	bl	8003ea8 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	f003 0320 	and.w	r3, r3, #32
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8004538:	2120      	movs	r1, #32
 800453a:	2007      	movs	r0, #7
 800453c:	f7ff fcb4 	bl	8003ea8 <NRF24_write_register>
    }
  }
  return result;
 8004540:	7bbb      	ldrb	r3, [r7, #14]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b082      	sub	sp, #8
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	460b      	mov	r3, r1
 8004554:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8004556:	2000      	movs	r0, #0
 8004558:	f7ff fc36 	bl	8003dc8 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 800455c:	2000      	movs	r0, #0
 800455e:	f7ff fc53 	bl	8003e08 <NRF24_read_register>
 8004562:	4603      	mov	r3, r0
 8004564:	f043 0302 	orr.w	r3, r3, #2
 8004568:	b2db      	uxtb	r3, r3
 800456a:	f023 0301 	bic.w	r3, r3, #1
 800456e:	b2db      	uxtb	r3, r3
 8004570:	4619      	mov	r1, r3
 8004572:	2000      	movs	r0, #0
 8004574:	f7ff fc98 	bl	8003ea8 <NRF24_write_register>
  NRF24_ce(1);
 8004578:	2001      	movs	r0, #1
 800457a:	f7ff fc25 	bl	8003dc8 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 800457e:	2096      	movs	r0, #150	; 0x96
 8004580:	f7ff fbe0 	bl	8003d44 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	4619      	mov	r1, r3
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff fcd7 	bl	8003f3c <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 800458e:	2001      	movs	r0, #1
 8004590:	f7ff fc1a 	bl	8003dc8 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8004594:	200f      	movs	r0, #15
 8004596:	f7ff fbd5 	bl	8003d44 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 800459a:	2000      	movs	r0, #0
 800459c:	f7ff fc14 	bl	8003dc8 <NRF24_ce>
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 80045b4:	f7ff fcf4 	bl	8003fa0 <NRF24_get_status>
 80045b8:	4603      	mov	r3, r0
 80045ba:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80045c2:	2170      	movs	r1, #112	; 0x70
 80045c4:	2007      	movs	r0, #7
 80045c6:	f7ff fc6f 	bl	8003ea8 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 80045ca:	7dfb      	ldrb	r3, [r7, #23]
 80045cc:	f003 0320 	and.w	r3, r3, #32
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bf14      	ite	ne
 80045d4:	2301      	movne	r3, #1
 80045d6:	2300      	moveq	r3, #0
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 80045de:	7dfb      	ldrb	r3, [r7, #23]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf14      	ite	ne
 80045e8:	2301      	movne	r3, #1
 80045ea:	2300      	moveq	r3, #0
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 80045f2:	7dfb      	ldrb	r3, [r7, #23]
 80045f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	bf14      	ite	ne
 80045fc:	2301      	movne	r3, #1
 80045fe:	2300      	moveq	r3, #0
 8004600:	b2da      	uxtb	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	701a      	strb	r2, [r3, #0]
}
 8004606:	bf00      	nop
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8004612:	2170      	movs	r1, #112	; 0x70
 8004614:	2007      	movs	r0, #7
 8004616:	f7ff fc47 	bl	8003ea8 <NRF24_write_register>
}
 800461a:	bf00      	nop
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8004626:	2000      	movs	r0, #0
 8004628:	f7ff fbae 	bl	8003d88 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800462c:	2350      	movs	r3, #80	; 0x50
 800462e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8004630:	2373      	movs	r3, #115	; 0x73
 8004632:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8004634:	1d39      	adds	r1, r7, #4
 8004636:	2364      	movs	r3, #100	; 0x64
 8004638:	2202      	movs	r2, #2
 800463a:	4805      	ldr	r0, [pc, #20]	; (8004650 <NRF24_ACTIVATE_cmd+0x30>)
 800463c:	f7fe fb4d 	bl	8002cda <HAL_SPI_Transmit>
	NRF24_csn(1);
 8004640:	2001      	movs	r0, #1
 8004642:	f7ff fba1 	bl	8003d88 <NRF24_csn>
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	200000a8 	.word	0x200000a8

08004654 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8004654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004656:	b0a1      	sub	sp, #132	; 0x84
 8004658:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800465a:	f107 0308 	add.w	r3, r7, #8
 800465e:	49c3      	ldr	r1, [pc, #780]	; (800496c <printRadioSettings+0x318>)
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fc77 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004666:	f107 0308 	add.w	r3, r7, #8
 800466a:	4618      	mov	r0, r3
 800466c:	f7fb fdb8 	bl	80001e0 <strlen>
 8004670:	4603      	mov	r3, r0
 8004672:	b29a      	uxth	r2, r3
 8004674:	f107 0108 	add.w	r1, r7, #8
 8004678:	230a      	movs	r3, #10
 800467a:	48bd      	ldr	r0, [pc, #756]	; (8004970 <printRadioSettings+0x31c>)
 800467c:	f7ff f899 	bl	80037b2 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8004680:	2000      	movs	r0, #0
 8004682:	f7ff fbc1 	bl	8003e08 <NRF24_read_register>
 8004686:	4603      	mov	r3, r0
 8004688:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800468c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d013      	beq.n	80046c0 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8004698:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d006      	beq.n	80046b2 <printRadioSettings+0x5e>
 80046a4:	f107 0308 	add.w	r3, r7, #8
 80046a8:	49b2      	ldr	r1, [pc, #712]	; (8004974 <printRadioSettings+0x320>)
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 fc52 	bl	8004f54 <siprintf>
 80046b0:	e00c      	b.n	80046cc <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80046b2:	f107 0308 	add.w	r3, r7, #8
 80046b6:	49b0      	ldr	r1, [pc, #704]	; (8004978 <printRadioSettings+0x324>)
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fc4b 	bl	8004f54 <siprintf>
 80046be:	e005      	b.n	80046cc <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80046c0:	f107 0308 	add.w	r3, r7, #8
 80046c4:	49ad      	ldr	r1, [pc, #692]	; (800497c <printRadioSettings+0x328>)
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fc44 	bl	8004f54 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80046cc:	f107 0308 	add.w	r3, r7, #8
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fb fd85 	bl	80001e0 <strlen>
 80046d6:	4603      	mov	r3, r0
 80046d8:	b29a      	uxth	r2, r3
 80046da:	f107 0108 	add.w	r1, r7, #8
 80046de:	230a      	movs	r3, #10
 80046e0:	48a3      	ldr	r0, [pc, #652]	; (8004970 <printRadioSettings+0x31c>)
 80046e2:	f7ff f866 	bl	80037b2 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80046e6:	2001      	movs	r0, #1
 80046e8:	f7ff fb8e 	bl	8003e08 <NRF24_read_register>
 80046ec:	4603      	mov	r3, r0
 80046ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80046f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80046f6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	bfcc      	ite	gt
 80046fe:	2301      	movgt	r3, #1
 8004700:	2300      	movle	r3, #0
 8004702:	b2db      	uxtb	r3, r3
 8004704:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004706:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800470a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800470e:	2b00      	cmp	r3, #0
 8004710:	bfcc      	ite	gt
 8004712:	2301      	movgt	r3, #1
 8004714:	2300      	movle	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800471a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800471e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004722:	2b00      	cmp	r3, #0
 8004724:	bfcc      	ite	gt
 8004726:	2301      	movgt	r3, #1
 8004728:	2300      	movle	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800472e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004732:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004736:	2b00      	cmp	r3, #0
 8004738:	bfcc      	ite	gt
 800473a:	2301      	movgt	r3, #1
 800473c:	2300      	movle	r3, #0
 800473e:	b2db      	uxtb	r3, r3
 8004740:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004742:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004746:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800474a:	2b00      	cmp	r3, #0
 800474c:	bfcc      	ite	gt
 800474e:	2301      	movgt	r3, #1
 8004750:	2300      	movle	r3, #0
 8004752:	b2db      	uxtb	r3, r3
 8004754:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004756:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800475a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800475e:	2b00      	cmp	r3, #0
 8004760:	bfcc      	ite	gt
 8004762:	2301      	movgt	r3, #1
 8004764:	2300      	movle	r3, #0
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f107 0008 	add.w	r0, r7, #8
 800476c:	9303      	str	r3, [sp, #12]
 800476e:	9402      	str	r4, [sp, #8]
 8004770:	9101      	str	r1, [sp, #4]
 8004772:	9200      	str	r2, [sp, #0]
 8004774:	4633      	mov	r3, r6
 8004776:	462a      	mov	r2, r5
 8004778:	4981      	ldr	r1, [pc, #516]	; (8004980 <printRadioSettings+0x32c>)
 800477a:	f000 fbeb 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800477e:	f107 0308 	add.w	r3, r7, #8
 8004782:	4618      	mov	r0, r3
 8004784:	f7fb fd2c 	bl	80001e0 <strlen>
 8004788:	4603      	mov	r3, r0
 800478a:	b29a      	uxth	r2, r3
 800478c:	f107 0108 	add.w	r1, r7, #8
 8004790:	230a      	movs	r3, #10
 8004792:	4877      	ldr	r0, [pc, #476]	; (8004970 <printRadioSettings+0x31c>)
 8004794:	f7ff f80d 	bl	80037b2 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8004798:	2002      	movs	r0, #2
 800479a:	f7ff fb35 	bl	8003e08 <NRF24_read_register>
 800479e:	4603      	mov	r3, r0
 80047a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80047a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80047a8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bfcc      	ite	gt
 80047b0:	2301      	movgt	r3, #1
 80047b2:	2300      	movle	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80047b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80047bc:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	bfcc      	ite	gt
 80047c4:	2301      	movgt	r3, #1
 80047c6:	2300      	movle	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80047cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80047d0:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bfcc      	ite	gt
 80047d8:	2301      	movgt	r3, #1
 80047da:	2300      	movle	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80047e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80047e4:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bfcc      	ite	gt
 80047ec:	2301      	movgt	r3, #1
 80047ee:	2300      	movle	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80047f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80047f8:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	bfcc      	ite	gt
 8004800:	2301      	movgt	r3, #1
 8004802:	2300      	movle	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004808:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800480c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004810:	2b00      	cmp	r3, #0
 8004812:	bfcc      	ite	gt
 8004814:	2301      	movgt	r3, #1
 8004816:	2300      	movle	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	f107 0008 	add.w	r0, r7, #8
 800481e:	9303      	str	r3, [sp, #12]
 8004820:	9402      	str	r4, [sp, #8]
 8004822:	9101      	str	r1, [sp, #4]
 8004824:	9200      	str	r2, [sp, #0]
 8004826:	4633      	mov	r3, r6
 8004828:	462a      	mov	r2, r5
 800482a:	4956      	ldr	r1, [pc, #344]	; (8004984 <printRadioSettings+0x330>)
 800482c:	f000 fb92 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004830:	f107 0308 	add.w	r3, r7, #8
 8004834:	4618      	mov	r0, r3
 8004836:	f7fb fcd3 	bl	80001e0 <strlen>
 800483a:	4603      	mov	r3, r0
 800483c:	b29a      	uxth	r2, r3
 800483e:	f107 0108 	add.w	r1, r7, #8
 8004842:	230a      	movs	r3, #10
 8004844:	484a      	ldr	r0, [pc, #296]	; (8004970 <printRadioSettings+0x31c>)
 8004846:	f7fe ffb4 	bl	80037b2 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800484a:	2003      	movs	r0, #3
 800484c:	f7ff fadc 	bl	8003e08 <NRF24_read_register>
 8004850:	4603      	mov	r3, r0
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 800485a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800485e:	3302      	adds	r3, #2
 8004860:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8004864:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8004868:	f107 0308 	add.w	r3, r7, #8
 800486c:	4946      	ldr	r1, [pc, #280]	; (8004988 <printRadioSettings+0x334>)
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fb70 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004874:	f107 0308 	add.w	r3, r7, #8
 8004878:	4618      	mov	r0, r3
 800487a:	f7fb fcb1 	bl	80001e0 <strlen>
 800487e:	4603      	mov	r3, r0
 8004880:	b29a      	uxth	r2, r3
 8004882:	f107 0108 	add.w	r1, r7, #8
 8004886:	230a      	movs	r3, #10
 8004888:	4839      	ldr	r0, [pc, #228]	; (8004970 <printRadioSettings+0x31c>)
 800488a:	f7fe ff92 	bl	80037b2 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800488e:	2005      	movs	r0, #5
 8004890:	f7ff faba 	bl	8003e08 <NRF24_read_register>
 8004894:	4603      	mov	r3, r0
 8004896:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800489a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800489e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048a2:	f107 0308 	add.w	r3, r7, #8
 80048a6:	4939      	ldr	r1, [pc, #228]	; (800498c <printRadioSettings+0x338>)
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fb53 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80048ae:	f107 0308 	add.w	r3, r7, #8
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fb fc94 	bl	80001e0 <strlen>
 80048b8:	4603      	mov	r3, r0
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	f107 0108 	add.w	r1, r7, #8
 80048c0:	230a      	movs	r3, #10
 80048c2:	482b      	ldr	r0, [pc, #172]	; (8004970 <printRadioSettings+0x31c>)
 80048c4:	f7fe ff75 	bl	80037b2 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80048c8:	2006      	movs	r0, #6
 80048ca:	f7ff fa9d 	bl	8003e08 <NRF24_read_register>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80048d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d006      	beq.n	80048ee <printRadioSettings+0x29a>
 80048e0:	f107 0308 	add.w	r3, r7, #8
 80048e4:	492a      	ldr	r1, [pc, #168]	; (8004990 <printRadioSettings+0x33c>)
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fb34 	bl	8004f54 <siprintf>
 80048ec:	e005      	b.n	80048fa <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80048ee:	f107 0308 	add.w	r3, r7, #8
 80048f2:	4928      	ldr	r1, [pc, #160]	; (8004994 <printRadioSettings+0x340>)
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fb2d 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80048fa:	f107 0308 	add.w	r3, r7, #8
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fb fc6e 	bl	80001e0 <strlen>
 8004904:	4603      	mov	r3, r0
 8004906:	b29a      	uxth	r2, r3
 8004908:	f107 0108 	add.w	r1, r7, #8
 800490c:	230a      	movs	r3, #10
 800490e:	4818      	ldr	r0, [pc, #96]	; (8004970 <printRadioSettings+0x31c>)
 8004910:	f7fe ff4f 	bl	80037b2 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8004914:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004918:	f003 0306 	and.w	r3, r3, #6
 800491c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8004920:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800492a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <printRadioSettings+0x2ec>
 8004932:	f107 0308 	add.w	r3, r7, #8
 8004936:	4918      	ldr	r1, [pc, #96]	; (8004998 <printRadioSettings+0x344>)
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fb0b 	bl	8004f54 <siprintf>
 800493e:	e03b      	b.n	80049b8 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8004940:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004944:	2b01      	cmp	r3, #1
 8004946:	d106      	bne.n	8004956 <printRadioSettings+0x302>
 8004948:	f107 0308 	add.w	r3, r7, #8
 800494c:	4913      	ldr	r1, [pc, #76]	; (800499c <printRadioSettings+0x348>)
 800494e:	4618      	mov	r0, r3
 8004950:	f000 fb00 	bl	8004f54 <siprintf>
 8004954:	e030      	b.n	80049b8 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8004956:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800495a:	2b02      	cmp	r3, #2
 800495c:	d122      	bne.n	80049a4 <printRadioSettings+0x350>
 800495e:	f107 0308 	add.w	r3, r7, #8
 8004962:	490f      	ldr	r1, [pc, #60]	; (80049a0 <printRadioSettings+0x34c>)
 8004964:	4618      	mov	r0, r3
 8004966:	f000 faf5 	bl	8004f54 <siprintf>
 800496a:	e025      	b.n	80049b8 <printRadioSettings+0x364>
 800496c:	080057c8 	.word	0x080057c8
 8004970:	20000100 	.word	0x20000100
 8004974:	080057fc 	.word	0x080057fc
 8004978:	08005818 	.word	0x08005818
 800497c:	08005834 	.word	0x08005834
 8004980:	08005848 	.word	0x08005848
 8004984:	0800588c 	.word	0x0800588c
 8004988:	080058d8 	.word	0x080058d8
 800498c:	080058f4 	.word	0x080058f4
 8004990:	08005908 	.word	0x08005908
 8004994:	08005920 	.word	0x08005920
 8004998:	08005938 	.word	0x08005938
 800499c:	0800594c 	.word	0x0800594c
 80049a0:	08005960 	.word	0x08005960
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80049a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d105      	bne.n	80049b8 <printRadioSettings+0x364>
 80049ac:	f107 0308 	add.w	r3, r7, #8
 80049b0:	49d7      	ldr	r1, [pc, #860]	; (8004d10 <printRadioSettings+0x6bc>)
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 face 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80049b8:	f107 0308 	add.w	r3, r7, #8
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fb fc0f 	bl	80001e0 <strlen>
 80049c2:	4603      	mov	r3, r0
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	f107 0108 	add.w	r1, r7, #8
 80049ca:	230a      	movs	r3, #10
 80049cc:	48d1      	ldr	r0, [pc, #836]	; (8004d14 <printRadioSettings+0x6c0>)
 80049ce:	f7fe fef0 	bl	80037b2 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80049d2:	463b      	mov	r3, r7
 80049d4:	2205      	movs	r2, #5
 80049d6:	4619      	mov	r1, r3
 80049d8:	200a      	movs	r0, #10
 80049da:	f7ff fa3d 	bl	8003e58 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80049de:	793b      	ldrb	r3, [r7, #4]
 80049e0:	461c      	mov	r4, r3
 80049e2:	78fb      	ldrb	r3, [r7, #3]
 80049e4:	461d      	mov	r5, r3
 80049e6:	78bb      	ldrb	r3, [r7, #2]
 80049e8:	787a      	ldrb	r2, [r7, #1]
 80049ea:	7839      	ldrb	r1, [r7, #0]
 80049ec:	f107 0008 	add.w	r0, r7, #8
 80049f0:	9102      	str	r1, [sp, #8]
 80049f2:	9201      	str	r2, [sp, #4]
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	462b      	mov	r3, r5
 80049f8:	4622      	mov	r2, r4
 80049fa:	49c7      	ldr	r1, [pc, #796]	; (8004d18 <printRadioSettings+0x6c4>)
 80049fc:	f000 faaa 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a00:	f107 0308 	add.w	r3, r7, #8
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fb fbeb 	bl	80001e0 <strlen>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	f107 0108 	add.w	r1, r7, #8
 8004a12:	230a      	movs	r3, #10
 8004a14:	48bf      	ldr	r0, [pc, #764]	; (8004d14 <printRadioSettings+0x6c0>)
 8004a16:	f7fe fecc 	bl	80037b2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8004a1a:	463b      	mov	r3, r7
 8004a1c:	2205      	movs	r2, #5
 8004a1e:	4619      	mov	r1, r3
 8004a20:	200b      	movs	r0, #11
 8004a22:	f7ff fa19 	bl	8003e58 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8004a26:	793b      	ldrb	r3, [r7, #4]
 8004a28:	461c      	mov	r4, r3
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	461d      	mov	r5, r3
 8004a2e:	78bb      	ldrb	r3, [r7, #2]
 8004a30:	787a      	ldrb	r2, [r7, #1]
 8004a32:	7839      	ldrb	r1, [r7, #0]
 8004a34:	f107 0008 	add.w	r0, r7, #8
 8004a38:	9102      	str	r1, [sp, #8]
 8004a3a:	9201      	str	r2, [sp, #4]
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	462b      	mov	r3, r5
 8004a40:	4622      	mov	r2, r4
 8004a42:	49b6      	ldr	r1, [pc, #728]	; (8004d1c <printRadioSettings+0x6c8>)
 8004a44:	f000 fa86 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a48:	f107 0308 	add.w	r3, r7, #8
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fb fbc7 	bl	80001e0 <strlen>
 8004a52:	4603      	mov	r3, r0
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	f107 0108 	add.w	r1, r7, #8
 8004a5a:	230a      	movs	r3, #10
 8004a5c:	48ad      	ldr	r0, [pc, #692]	; (8004d14 <printRadioSettings+0x6c0>)
 8004a5e:	f7fe fea8 	bl	80037b2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8004a62:	463b      	mov	r3, r7
 8004a64:	2201      	movs	r2, #1
 8004a66:	4619      	mov	r1, r3
 8004a68:	200c      	movs	r0, #12
 8004a6a:	f7ff f9f5 	bl	8003e58 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004a6e:	783b      	ldrb	r3, [r7, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	f107 0308 	add.w	r3, r7, #8
 8004a76:	49aa      	ldr	r1, [pc, #680]	; (8004d20 <printRadioSettings+0x6cc>)
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fa6b 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a7e:	f107 0308 	add.w	r3, r7, #8
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fb fbac 	bl	80001e0 <strlen>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	f107 0108 	add.w	r1, r7, #8
 8004a90:	230a      	movs	r3, #10
 8004a92:	48a0      	ldr	r0, [pc, #640]	; (8004d14 <printRadioSettings+0x6c0>)
 8004a94:	f7fe fe8d 	bl	80037b2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8004a98:	463b      	mov	r3, r7
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	200d      	movs	r0, #13
 8004aa0:	f7ff f9da 	bl	8003e58 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004aa4:	783b      	ldrb	r3, [r7, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f107 0308 	add.w	r3, r7, #8
 8004aac:	499d      	ldr	r1, [pc, #628]	; (8004d24 <printRadioSettings+0x6d0>)
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fa50 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004ab4:	f107 0308 	add.w	r3, r7, #8
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fb fb91 	bl	80001e0 <strlen>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	f107 0108 	add.w	r1, r7, #8
 8004ac6:	230a      	movs	r3, #10
 8004ac8:	4892      	ldr	r0, [pc, #584]	; (8004d14 <printRadioSettings+0x6c0>)
 8004aca:	f7fe fe72 	bl	80037b2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8004ace:	463b      	mov	r3, r7
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	200e      	movs	r0, #14
 8004ad6:	f7ff f9bf 	bl	8003e58 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004ada:	783b      	ldrb	r3, [r7, #0]
 8004adc:	461a      	mov	r2, r3
 8004ade:	f107 0308 	add.w	r3, r7, #8
 8004ae2:	4991      	ldr	r1, [pc, #580]	; (8004d28 <printRadioSettings+0x6d4>)
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fa35 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004aea:	f107 0308 	add.w	r3, r7, #8
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fb fb76 	bl	80001e0 <strlen>
 8004af4:	4603      	mov	r3, r0
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	f107 0108 	add.w	r1, r7, #8
 8004afc:	230a      	movs	r3, #10
 8004afe:	4885      	ldr	r0, [pc, #532]	; (8004d14 <printRadioSettings+0x6c0>)
 8004b00:	f7fe fe57 	bl	80037b2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8004b04:	463b      	mov	r3, r7
 8004b06:	2201      	movs	r2, #1
 8004b08:	4619      	mov	r1, r3
 8004b0a:	200f      	movs	r0, #15
 8004b0c:	f7ff f9a4 	bl	8003e58 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004b10:	783b      	ldrb	r3, [r7, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	f107 0308 	add.w	r3, r7, #8
 8004b18:	4984      	ldr	r1, [pc, #528]	; (8004d2c <printRadioSettings+0x6d8>)
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fa1a 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004b20:	f107 0308 	add.w	r3, r7, #8
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fb fb5b 	bl	80001e0 <strlen>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	f107 0108 	add.w	r1, r7, #8
 8004b32:	230a      	movs	r3, #10
 8004b34:	4877      	ldr	r0, [pc, #476]	; (8004d14 <printRadioSettings+0x6c0>)
 8004b36:	f7fe fe3c 	bl	80037b2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8004b3a:	463b      	mov	r3, r7
 8004b3c:	2205      	movs	r2, #5
 8004b3e:	4619      	mov	r1, r3
 8004b40:	2010      	movs	r0, #16
 8004b42:	f7ff f989 	bl	8003e58 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8004b46:	793b      	ldrb	r3, [r7, #4]
 8004b48:	461c      	mov	r4, r3
 8004b4a:	78fb      	ldrb	r3, [r7, #3]
 8004b4c:	461d      	mov	r5, r3
 8004b4e:	78bb      	ldrb	r3, [r7, #2]
 8004b50:	787a      	ldrb	r2, [r7, #1]
 8004b52:	7839      	ldrb	r1, [r7, #0]
 8004b54:	f107 0008 	add.w	r0, r7, #8
 8004b58:	9102      	str	r1, [sp, #8]
 8004b5a:	9201      	str	r2, [sp, #4]
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	462b      	mov	r3, r5
 8004b60:	4622      	mov	r2, r4
 8004b62:	4973      	ldr	r1, [pc, #460]	; (8004d30 <printRadioSettings+0x6dc>)
 8004b64:	f000 f9f6 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004b68:	f107 0308 	add.w	r3, r7, #8
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fb fb37 	bl	80001e0 <strlen>
 8004b72:	4603      	mov	r3, r0
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	f107 0108 	add.w	r1, r7, #8
 8004b7a:	230a      	movs	r3, #10
 8004b7c:	4865      	ldr	r0, [pc, #404]	; (8004d14 <printRadioSettings+0x6c0>)
 8004b7e:	f7fe fe18 	bl	80037b2 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8004b82:	2011      	movs	r0, #17
 8004b84:	f7ff f940 	bl	8003e08 <NRF24_read_register>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004b8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b96:	f107 0308 	add.w	r3, r7, #8
 8004b9a:	4966      	ldr	r1, [pc, #408]	; (8004d34 <printRadioSettings+0x6e0>)
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 f9d9 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004ba2:	f107 0308 	add.w	r3, r7, #8
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fb fb1a 	bl	80001e0 <strlen>
 8004bac:	4603      	mov	r3, r0
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	f107 0108 	add.w	r1, r7, #8
 8004bb4:	230a      	movs	r3, #10
 8004bb6:	4857      	ldr	r0, [pc, #348]	; (8004d14 <printRadioSettings+0x6c0>)
 8004bb8:	f7fe fdfb 	bl	80037b2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8004bbc:	2012      	movs	r0, #18
 8004bbe:	f7ff f923 	bl	8003e08 <NRF24_read_register>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004bc8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004bcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bd0:	f107 0308 	add.w	r3, r7, #8
 8004bd4:	4958      	ldr	r1, [pc, #352]	; (8004d38 <printRadioSettings+0x6e4>)
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 f9bc 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004bdc:	f107 0308 	add.w	r3, r7, #8
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fb fafd 	bl	80001e0 <strlen>
 8004be6:	4603      	mov	r3, r0
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	f107 0108 	add.w	r1, r7, #8
 8004bee:	230a      	movs	r3, #10
 8004bf0:	4848      	ldr	r0, [pc, #288]	; (8004d14 <printRadioSettings+0x6c0>)
 8004bf2:	f7fe fdde 	bl	80037b2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8004bf6:	2013      	movs	r0, #19
 8004bf8:	f7ff f906 	bl	8003e08 <NRF24_read_register>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004c02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c0a:	f107 0308 	add.w	r3, r7, #8
 8004c0e:	494b      	ldr	r1, [pc, #300]	; (8004d3c <printRadioSettings+0x6e8>)
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 f99f 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004c16:	f107 0308 	add.w	r3, r7, #8
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fb fae0 	bl	80001e0 <strlen>
 8004c20:	4603      	mov	r3, r0
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	f107 0108 	add.w	r1, r7, #8
 8004c28:	230a      	movs	r3, #10
 8004c2a:	483a      	ldr	r0, [pc, #232]	; (8004d14 <printRadioSettings+0x6c0>)
 8004c2c:	f7fe fdc1 	bl	80037b2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8004c30:	2014      	movs	r0, #20
 8004c32:	f7ff f8e9 	bl	8003e08 <NRF24_read_register>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004c3c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c44:	f107 0308 	add.w	r3, r7, #8
 8004c48:	493d      	ldr	r1, [pc, #244]	; (8004d40 <printRadioSettings+0x6ec>)
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 f982 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004c50:	f107 0308 	add.w	r3, r7, #8
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fb fac3 	bl	80001e0 <strlen>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	f107 0108 	add.w	r1, r7, #8
 8004c62:	230a      	movs	r3, #10
 8004c64:	482b      	ldr	r0, [pc, #172]	; (8004d14 <printRadioSettings+0x6c0>)
 8004c66:	f7fe fda4 	bl	80037b2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8004c6a:	2015      	movs	r0, #21
 8004c6c:	f7ff f8cc 	bl	8003e08 <NRF24_read_register>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004c76:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c7e:	f107 0308 	add.w	r3, r7, #8
 8004c82:	4930      	ldr	r1, [pc, #192]	; (8004d44 <printRadioSettings+0x6f0>)
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 f965 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004c8a:	f107 0308 	add.w	r3, r7, #8
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fb faa6 	bl	80001e0 <strlen>
 8004c94:	4603      	mov	r3, r0
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	f107 0108 	add.w	r1, r7, #8
 8004c9c:	230a      	movs	r3, #10
 8004c9e:	481d      	ldr	r0, [pc, #116]	; (8004d14 <printRadioSettings+0x6c0>)
 8004ca0:	f7fe fd87 	bl	80037b2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8004ca4:	2016      	movs	r0, #22
 8004ca6:	f7ff f8af 	bl	8003e08 <NRF24_read_register>
 8004caa:	4603      	mov	r3, r0
 8004cac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004cb0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004cb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cb8:	f107 0308 	add.w	r3, r7, #8
 8004cbc:	4922      	ldr	r1, [pc, #136]	; (8004d48 <printRadioSettings+0x6f4>)
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 f948 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004cc4:	f107 0308 	add.w	r3, r7, #8
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fb fa89 	bl	80001e0 <strlen>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	f107 0108 	add.w	r1, r7, #8
 8004cd6:	230a      	movs	r3, #10
 8004cd8:	480e      	ldr	r0, [pc, #56]	; (8004d14 <printRadioSettings+0x6c0>)
 8004cda:	f7fe fd6a 	bl	80037b2 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8004cde:	201c      	movs	r0, #28
 8004ce0:	f7ff f892 	bl	8003e08 <NRF24_read_register>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004cea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004cee:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bfcc      	ite	gt
 8004cf6:	2301      	movgt	r3, #1
 8004cf8:	2300      	movle	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004cfe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d02:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	bfcc      	ite	gt
 8004d0a:	2301      	movgt	r3, #1
 8004d0c:	2300      	movle	r3, #0
 8004d0e:	e01d      	b.n	8004d4c <printRadioSettings+0x6f8>
 8004d10:	08005974 	.word	0x08005974
 8004d14:	20000100 	.word	0x20000100
 8004d18:	08005988 	.word	0x08005988
 8004d1c:	080059b8 	.word	0x080059b8
 8004d20:	080059e8 	.word	0x080059e8
 8004d24:	08005a10 	.word	0x08005a10
 8004d28:	08005a38 	.word	0x08005a38
 8004d2c:	08005a60 	.word	0x08005a60
 8004d30:	08005a88 	.word	0x08005a88
 8004d34:	08005ab4 	.word	0x08005ab4
 8004d38:	08005ad0 	.word	0x08005ad0
 8004d3c:	08005aec 	.word	0x08005aec
 8004d40:	08005b08 	.word	0x08005b08
 8004d44:	08005b24 	.word	0x08005b24
 8004d48:	08005b40 	.word	0x08005b40
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004d50:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d54:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	bfcc      	ite	gt
 8004d5c:	2301      	movgt	r3, #1
 8004d5e:	2300      	movle	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004d64:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d68:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	bfcc      	ite	gt
 8004d70:	2301      	movgt	r3, #1
 8004d72:	2300      	movle	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004d78:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d7c:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	bfcc      	ite	gt
 8004d84:	2301      	movgt	r3, #1
 8004d86:	2300      	movle	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004d8c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d90:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	bfcc      	ite	gt
 8004d98:	2301      	movgt	r3, #1
 8004d9a:	2300      	movle	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	f107 0008 	add.w	r0, r7, #8
 8004da2:	9303      	str	r3, [sp, #12]
 8004da4:	9402      	str	r4, [sp, #8]
 8004da6:	9101      	str	r1, [sp, #4]
 8004da8:	9200      	str	r2, [sp, #0]
 8004daa:	4633      	mov	r3, r6
 8004dac:	462a      	mov	r2, r5
 8004dae:	4936      	ldr	r1, [pc, #216]	; (8004e88 <printRadioSettings+0x834>)
 8004db0:	f000 f8d0 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004db4:	f107 0308 	add.w	r3, r7, #8
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fb fa11 	bl	80001e0 <strlen>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	f107 0108 	add.w	r1, r7, #8
 8004dc6:	230a      	movs	r3, #10
 8004dc8:	4830      	ldr	r0, [pc, #192]	; (8004e8c <printRadioSettings+0x838>)
 8004dca:	f7fe fcf2 	bl	80037b2 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8004dce:	201d      	movs	r0, #29
 8004dd0:	f7ff f81a 	bl	8003e08 <NRF24_read_register>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8004dda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d006      	beq.n	8004df4 <printRadioSettings+0x7a0>
 8004de6:	f107 0308 	add.w	r3, r7, #8
 8004dea:	4929      	ldr	r1, [pc, #164]	; (8004e90 <printRadioSettings+0x83c>)
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 f8b1 	bl	8004f54 <siprintf>
 8004df2:	e005      	b.n	8004e00 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8004df4:	f107 0308 	add.w	r3, r7, #8
 8004df8:	4926      	ldr	r1, [pc, #152]	; (8004e94 <printRadioSettings+0x840>)
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 f8aa 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004e00:	f107 0308 	add.w	r3, r7, #8
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fb f9eb 	bl	80001e0 <strlen>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	f107 0108 	add.w	r1, r7, #8
 8004e12:	230a      	movs	r3, #10
 8004e14:	481d      	ldr	r0, [pc, #116]	; (8004e8c <printRadioSettings+0x838>)
 8004e16:	f7fe fccc 	bl	80037b2 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8004e1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d006      	beq.n	8004e34 <printRadioSettings+0x7e0>
 8004e26:	f107 0308 	add.w	r3, r7, #8
 8004e2a:	491b      	ldr	r1, [pc, #108]	; (8004e98 <printRadioSettings+0x844>)
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 f891 	bl	8004f54 <siprintf>
 8004e32:	e005      	b.n	8004e40 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8004e34:	f107 0308 	add.w	r3, r7, #8
 8004e38:	4918      	ldr	r1, [pc, #96]	; (8004e9c <printRadioSettings+0x848>)
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f88a 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004e40:	f107 0308 	add.w	r3, r7, #8
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fb f9cb 	bl	80001e0 <strlen>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	f107 0108 	add.w	r1, r7, #8
 8004e52:	230a      	movs	r3, #10
 8004e54:	480d      	ldr	r0, [pc, #52]	; (8004e8c <printRadioSettings+0x838>)
 8004e56:	f7fe fcac 	bl	80037b2 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8004e5a:	f107 0308 	add.w	r3, r7, #8
 8004e5e:	4910      	ldr	r1, [pc, #64]	; (8004ea0 <printRadioSettings+0x84c>)
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 f877 	bl	8004f54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004e66:	f107 0308 	add.w	r3, r7, #8
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fb f9b8 	bl	80001e0 <strlen>
 8004e70:	4603      	mov	r3, r0
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	f107 0108 	add.w	r1, r7, #8
 8004e78:	230a      	movs	r3, #10
 8004e7a:	4804      	ldr	r0, [pc, #16]	; (8004e8c <printRadioSettings+0x838>)
 8004e7c:	f7fe fc99 	bl	80037b2 <HAL_UART_Transmit>
}
 8004e80:	bf00      	nop
 8004e82:	3774      	adds	r7, #116	; 0x74
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e88:	08005b5c 	.word	0x08005b5c
 8004e8c:	20000100 	.word	0x20000100
 8004e90:	08005ba8 	.word	0x08005ba8
 8004e94:	08005bc0 	.word	0x08005bc0
 8004e98:	08005bd8 	.word	0x08005bd8
 8004e9c:	08005bf4 	.word	0x08005bf4
 8004ea0:	080057c8 	.word	0x080057c8

08004ea4 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	f107 0c08 	add.w	ip, r7, #8
 8004eae:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8004eb2:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <nrf24_DebugUART_Init+0x2c>)
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f107 0308 	add.w	r3, r7, #8
 8004eba:	2244      	movs	r2, #68	; 0x44
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	f000 f833 	bl	8004f28 <memcpy>
}
 8004ec2:	bf00      	nop
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eca:	b004      	add	sp, #16
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	20000100 	.word	0x20000100

08004ed4 <__errno>:
 8004ed4:	4b01      	ldr	r3, [pc, #4]	; (8004edc <__errno+0x8>)
 8004ed6:	6818      	ldr	r0, [r3, #0]
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000014 	.word	0x20000014

08004ee0 <__libc_init_array>:
 8004ee0:	b570      	push	{r4, r5, r6, lr}
 8004ee2:	4d0d      	ldr	r5, [pc, #52]	; (8004f18 <__libc_init_array+0x38>)
 8004ee4:	4c0d      	ldr	r4, [pc, #52]	; (8004f1c <__libc_init_array+0x3c>)
 8004ee6:	1b64      	subs	r4, r4, r5
 8004ee8:	10a4      	asrs	r4, r4, #2
 8004eea:	2600      	movs	r6, #0
 8004eec:	42a6      	cmp	r6, r4
 8004eee:	d109      	bne.n	8004f04 <__libc_init_array+0x24>
 8004ef0:	4d0b      	ldr	r5, [pc, #44]	; (8004f20 <__libc_init_array+0x40>)
 8004ef2:	4c0c      	ldr	r4, [pc, #48]	; (8004f24 <__libc_init_array+0x44>)
 8004ef4:	f000 fc4e 	bl	8005794 <_init>
 8004ef8:	1b64      	subs	r4, r4, r5
 8004efa:	10a4      	asrs	r4, r4, #2
 8004efc:	2600      	movs	r6, #0
 8004efe:	42a6      	cmp	r6, r4
 8004f00:	d105      	bne.n	8004f0e <__libc_init_array+0x2e>
 8004f02:	bd70      	pop	{r4, r5, r6, pc}
 8004f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f08:	4798      	blx	r3
 8004f0a:	3601      	adds	r6, #1
 8004f0c:	e7ee      	b.n	8004eec <__libc_init_array+0xc>
 8004f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f12:	4798      	blx	r3
 8004f14:	3601      	adds	r6, #1
 8004f16:	e7f2      	b.n	8004efe <__libc_init_array+0x1e>
 8004f18:	08005d68 	.word	0x08005d68
 8004f1c:	08005d68 	.word	0x08005d68
 8004f20:	08005d68 	.word	0x08005d68
 8004f24:	08005d6c 	.word	0x08005d6c

08004f28 <memcpy>:
 8004f28:	440a      	add	r2, r1
 8004f2a:	4291      	cmp	r1, r2
 8004f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f30:	d100      	bne.n	8004f34 <memcpy+0xc>
 8004f32:	4770      	bx	lr
 8004f34:	b510      	push	{r4, lr}
 8004f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f3e:	4291      	cmp	r1, r2
 8004f40:	d1f9      	bne.n	8004f36 <memcpy+0xe>
 8004f42:	bd10      	pop	{r4, pc}

08004f44 <memset>:
 8004f44:	4402      	add	r2, r0
 8004f46:	4603      	mov	r3, r0
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d100      	bne.n	8004f4e <memset+0xa>
 8004f4c:	4770      	bx	lr
 8004f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f52:	e7f9      	b.n	8004f48 <memset+0x4>

08004f54 <siprintf>:
 8004f54:	b40e      	push	{r1, r2, r3}
 8004f56:	b500      	push	{lr}
 8004f58:	b09c      	sub	sp, #112	; 0x70
 8004f5a:	ab1d      	add	r3, sp, #116	; 0x74
 8004f5c:	9002      	str	r0, [sp, #8]
 8004f5e:	9006      	str	r0, [sp, #24]
 8004f60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f64:	4809      	ldr	r0, [pc, #36]	; (8004f8c <siprintf+0x38>)
 8004f66:	9107      	str	r1, [sp, #28]
 8004f68:	9104      	str	r1, [sp, #16]
 8004f6a:	4909      	ldr	r1, [pc, #36]	; (8004f90 <siprintf+0x3c>)
 8004f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f70:	9105      	str	r1, [sp, #20]
 8004f72:	6800      	ldr	r0, [r0, #0]
 8004f74:	9301      	str	r3, [sp, #4]
 8004f76:	a902      	add	r1, sp, #8
 8004f78:	f000 f868 	bl	800504c <_svfiprintf_r>
 8004f7c:	9b02      	ldr	r3, [sp, #8]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	701a      	strb	r2, [r3, #0]
 8004f82:	b01c      	add	sp, #112	; 0x70
 8004f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f88:	b003      	add	sp, #12
 8004f8a:	4770      	bx	lr
 8004f8c:	20000014 	.word	0x20000014
 8004f90:	ffff0208 	.word	0xffff0208

08004f94 <__ssputs_r>:
 8004f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f98:	688e      	ldr	r6, [r1, #8]
 8004f9a:	429e      	cmp	r6, r3
 8004f9c:	4682      	mov	sl, r0
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	4690      	mov	r8, r2
 8004fa2:	461f      	mov	r7, r3
 8004fa4:	d838      	bhi.n	8005018 <__ssputs_r+0x84>
 8004fa6:	898a      	ldrh	r2, [r1, #12]
 8004fa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fac:	d032      	beq.n	8005014 <__ssputs_r+0x80>
 8004fae:	6825      	ldr	r5, [r4, #0]
 8004fb0:	6909      	ldr	r1, [r1, #16]
 8004fb2:	eba5 0901 	sub.w	r9, r5, r1
 8004fb6:	6965      	ldr	r5, [r4, #20]
 8004fb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	444b      	add	r3, r9
 8004fc4:	106d      	asrs	r5, r5, #1
 8004fc6:	429d      	cmp	r5, r3
 8004fc8:	bf38      	it	cc
 8004fca:	461d      	movcc	r5, r3
 8004fcc:	0553      	lsls	r3, r2, #21
 8004fce:	d531      	bpl.n	8005034 <__ssputs_r+0xa0>
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	f000 fb39 	bl	8005648 <_malloc_r>
 8004fd6:	4606      	mov	r6, r0
 8004fd8:	b950      	cbnz	r0, 8004ff0 <__ssputs_r+0x5c>
 8004fda:	230c      	movs	r3, #12
 8004fdc:	f8ca 3000 	str.w	r3, [sl]
 8004fe0:	89a3      	ldrh	r3, [r4, #12]
 8004fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fe6:	81a3      	strh	r3, [r4, #12]
 8004fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff0:	6921      	ldr	r1, [r4, #16]
 8004ff2:	464a      	mov	r2, r9
 8004ff4:	f7ff ff98 	bl	8004f28 <memcpy>
 8004ff8:	89a3      	ldrh	r3, [r4, #12]
 8004ffa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005002:	81a3      	strh	r3, [r4, #12]
 8005004:	6126      	str	r6, [r4, #16]
 8005006:	6165      	str	r5, [r4, #20]
 8005008:	444e      	add	r6, r9
 800500a:	eba5 0509 	sub.w	r5, r5, r9
 800500e:	6026      	str	r6, [r4, #0]
 8005010:	60a5      	str	r5, [r4, #8]
 8005012:	463e      	mov	r6, r7
 8005014:	42be      	cmp	r6, r7
 8005016:	d900      	bls.n	800501a <__ssputs_r+0x86>
 8005018:	463e      	mov	r6, r7
 800501a:	4632      	mov	r2, r6
 800501c:	6820      	ldr	r0, [r4, #0]
 800501e:	4641      	mov	r1, r8
 8005020:	f000 faa8 	bl	8005574 <memmove>
 8005024:	68a3      	ldr	r3, [r4, #8]
 8005026:	6822      	ldr	r2, [r4, #0]
 8005028:	1b9b      	subs	r3, r3, r6
 800502a:	4432      	add	r2, r6
 800502c:	60a3      	str	r3, [r4, #8]
 800502e:	6022      	str	r2, [r4, #0]
 8005030:	2000      	movs	r0, #0
 8005032:	e7db      	b.n	8004fec <__ssputs_r+0x58>
 8005034:	462a      	mov	r2, r5
 8005036:	f000 fb61 	bl	80056fc <_realloc_r>
 800503a:	4606      	mov	r6, r0
 800503c:	2800      	cmp	r0, #0
 800503e:	d1e1      	bne.n	8005004 <__ssputs_r+0x70>
 8005040:	6921      	ldr	r1, [r4, #16]
 8005042:	4650      	mov	r0, sl
 8005044:	f000 fab0 	bl	80055a8 <_free_r>
 8005048:	e7c7      	b.n	8004fda <__ssputs_r+0x46>
	...

0800504c <_svfiprintf_r>:
 800504c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005050:	4698      	mov	r8, r3
 8005052:	898b      	ldrh	r3, [r1, #12]
 8005054:	061b      	lsls	r3, r3, #24
 8005056:	b09d      	sub	sp, #116	; 0x74
 8005058:	4607      	mov	r7, r0
 800505a:	460d      	mov	r5, r1
 800505c:	4614      	mov	r4, r2
 800505e:	d50e      	bpl.n	800507e <_svfiprintf_r+0x32>
 8005060:	690b      	ldr	r3, [r1, #16]
 8005062:	b963      	cbnz	r3, 800507e <_svfiprintf_r+0x32>
 8005064:	2140      	movs	r1, #64	; 0x40
 8005066:	f000 faef 	bl	8005648 <_malloc_r>
 800506a:	6028      	str	r0, [r5, #0]
 800506c:	6128      	str	r0, [r5, #16]
 800506e:	b920      	cbnz	r0, 800507a <_svfiprintf_r+0x2e>
 8005070:	230c      	movs	r3, #12
 8005072:	603b      	str	r3, [r7, #0]
 8005074:	f04f 30ff 	mov.w	r0, #4294967295
 8005078:	e0d1      	b.n	800521e <_svfiprintf_r+0x1d2>
 800507a:	2340      	movs	r3, #64	; 0x40
 800507c:	616b      	str	r3, [r5, #20]
 800507e:	2300      	movs	r3, #0
 8005080:	9309      	str	r3, [sp, #36]	; 0x24
 8005082:	2320      	movs	r3, #32
 8005084:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005088:	f8cd 800c 	str.w	r8, [sp, #12]
 800508c:	2330      	movs	r3, #48	; 0x30
 800508e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005238 <_svfiprintf_r+0x1ec>
 8005092:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005096:	f04f 0901 	mov.w	r9, #1
 800509a:	4623      	mov	r3, r4
 800509c:	469a      	mov	sl, r3
 800509e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050a2:	b10a      	cbz	r2, 80050a8 <_svfiprintf_r+0x5c>
 80050a4:	2a25      	cmp	r2, #37	; 0x25
 80050a6:	d1f9      	bne.n	800509c <_svfiprintf_r+0x50>
 80050a8:	ebba 0b04 	subs.w	fp, sl, r4
 80050ac:	d00b      	beq.n	80050c6 <_svfiprintf_r+0x7a>
 80050ae:	465b      	mov	r3, fp
 80050b0:	4622      	mov	r2, r4
 80050b2:	4629      	mov	r1, r5
 80050b4:	4638      	mov	r0, r7
 80050b6:	f7ff ff6d 	bl	8004f94 <__ssputs_r>
 80050ba:	3001      	adds	r0, #1
 80050bc:	f000 80aa 	beq.w	8005214 <_svfiprintf_r+0x1c8>
 80050c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050c2:	445a      	add	r2, fp
 80050c4:	9209      	str	r2, [sp, #36]	; 0x24
 80050c6:	f89a 3000 	ldrb.w	r3, [sl]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 80a2 	beq.w	8005214 <_svfiprintf_r+0x1c8>
 80050d0:	2300      	movs	r3, #0
 80050d2:	f04f 32ff 	mov.w	r2, #4294967295
 80050d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050da:	f10a 0a01 	add.w	sl, sl, #1
 80050de:	9304      	str	r3, [sp, #16]
 80050e0:	9307      	str	r3, [sp, #28]
 80050e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050e6:	931a      	str	r3, [sp, #104]	; 0x68
 80050e8:	4654      	mov	r4, sl
 80050ea:	2205      	movs	r2, #5
 80050ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050f0:	4851      	ldr	r0, [pc, #324]	; (8005238 <_svfiprintf_r+0x1ec>)
 80050f2:	f7fb f87d 	bl	80001f0 <memchr>
 80050f6:	9a04      	ldr	r2, [sp, #16]
 80050f8:	b9d8      	cbnz	r0, 8005132 <_svfiprintf_r+0xe6>
 80050fa:	06d0      	lsls	r0, r2, #27
 80050fc:	bf44      	itt	mi
 80050fe:	2320      	movmi	r3, #32
 8005100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005104:	0711      	lsls	r1, r2, #28
 8005106:	bf44      	itt	mi
 8005108:	232b      	movmi	r3, #43	; 0x2b
 800510a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800510e:	f89a 3000 	ldrb.w	r3, [sl]
 8005112:	2b2a      	cmp	r3, #42	; 0x2a
 8005114:	d015      	beq.n	8005142 <_svfiprintf_r+0xf6>
 8005116:	9a07      	ldr	r2, [sp, #28]
 8005118:	4654      	mov	r4, sl
 800511a:	2000      	movs	r0, #0
 800511c:	f04f 0c0a 	mov.w	ip, #10
 8005120:	4621      	mov	r1, r4
 8005122:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005126:	3b30      	subs	r3, #48	; 0x30
 8005128:	2b09      	cmp	r3, #9
 800512a:	d94e      	bls.n	80051ca <_svfiprintf_r+0x17e>
 800512c:	b1b0      	cbz	r0, 800515c <_svfiprintf_r+0x110>
 800512e:	9207      	str	r2, [sp, #28]
 8005130:	e014      	b.n	800515c <_svfiprintf_r+0x110>
 8005132:	eba0 0308 	sub.w	r3, r0, r8
 8005136:	fa09 f303 	lsl.w	r3, r9, r3
 800513a:	4313      	orrs	r3, r2
 800513c:	9304      	str	r3, [sp, #16]
 800513e:	46a2      	mov	sl, r4
 8005140:	e7d2      	b.n	80050e8 <_svfiprintf_r+0x9c>
 8005142:	9b03      	ldr	r3, [sp, #12]
 8005144:	1d19      	adds	r1, r3, #4
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	9103      	str	r1, [sp, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	bfbb      	ittet	lt
 800514e:	425b      	neglt	r3, r3
 8005150:	f042 0202 	orrlt.w	r2, r2, #2
 8005154:	9307      	strge	r3, [sp, #28]
 8005156:	9307      	strlt	r3, [sp, #28]
 8005158:	bfb8      	it	lt
 800515a:	9204      	strlt	r2, [sp, #16]
 800515c:	7823      	ldrb	r3, [r4, #0]
 800515e:	2b2e      	cmp	r3, #46	; 0x2e
 8005160:	d10c      	bne.n	800517c <_svfiprintf_r+0x130>
 8005162:	7863      	ldrb	r3, [r4, #1]
 8005164:	2b2a      	cmp	r3, #42	; 0x2a
 8005166:	d135      	bne.n	80051d4 <_svfiprintf_r+0x188>
 8005168:	9b03      	ldr	r3, [sp, #12]
 800516a:	1d1a      	adds	r2, r3, #4
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	9203      	str	r2, [sp, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	bfb8      	it	lt
 8005174:	f04f 33ff 	movlt.w	r3, #4294967295
 8005178:	3402      	adds	r4, #2
 800517a:	9305      	str	r3, [sp, #20]
 800517c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005248 <_svfiprintf_r+0x1fc>
 8005180:	7821      	ldrb	r1, [r4, #0]
 8005182:	2203      	movs	r2, #3
 8005184:	4650      	mov	r0, sl
 8005186:	f7fb f833 	bl	80001f0 <memchr>
 800518a:	b140      	cbz	r0, 800519e <_svfiprintf_r+0x152>
 800518c:	2340      	movs	r3, #64	; 0x40
 800518e:	eba0 000a 	sub.w	r0, r0, sl
 8005192:	fa03 f000 	lsl.w	r0, r3, r0
 8005196:	9b04      	ldr	r3, [sp, #16]
 8005198:	4303      	orrs	r3, r0
 800519a:	3401      	adds	r4, #1
 800519c:	9304      	str	r3, [sp, #16]
 800519e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051a2:	4826      	ldr	r0, [pc, #152]	; (800523c <_svfiprintf_r+0x1f0>)
 80051a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051a8:	2206      	movs	r2, #6
 80051aa:	f7fb f821 	bl	80001f0 <memchr>
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d038      	beq.n	8005224 <_svfiprintf_r+0x1d8>
 80051b2:	4b23      	ldr	r3, [pc, #140]	; (8005240 <_svfiprintf_r+0x1f4>)
 80051b4:	bb1b      	cbnz	r3, 80051fe <_svfiprintf_r+0x1b2>
 80051b6:	9b03      	ldr	r3, [sp, #12]
 80051b8:	3307      	adds	r3, #7
 80051ba:	f023 0307 	bic.w	r3, r3, #7
 80051be:	3308      	adds	r3, #8
 80051c0:	9303      	str	r3, [sp, #12]
 80051c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051c4:	4433      	add	r3, r6
 80051c6:	9309      	str	r3, [sp, #36]	; 0x24
 80051c8:	e767      	b.n	800509a <_svfiprintf_r+0x4e>
 80051ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80051ce:	460c      	mov	r4, r1
 80051d0:	2001      	movs	r0, #1
 80051d2:	e7a5      	b.n	8005120 <_svfiprintf_r+0xd4>
 80051d4:	2300      	movs	r3, #0
 80051d6:	3401      	adds	r4, #1
 80051d8:	9305      	str	r3, [sp, #20]
 80051da:	4619      	mov	r1, r3
 80051dc:	f04f 0c0a 	mov.w	ip, #10
 80051e0:	4620      	mov	r0, r4
 80051e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051e6:	3a30      	subs	r2, #48	; 0x30
 80051e8:	2a09      	cmp	r2, #9
 80051ea:	d903      	bls.n	80051f4 <_svfiprintf_r+0x1a8>
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0c5      	beq.n	800517c <_svfiprintf_r+0x130>
 80051f0:	9105      	str	r1, [sp, #20]
 80051f2:	e7c3      	b.n	800517c <_svfiprintf_r+0x130>
 80051f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80051f8:	4604      	mov	r4, r0
 80051fa:	2301      	movs	r3, #1
 80051fc:	e7f0      	b.n	80051e0 <_svfiprintf_r+0x194>
 80051fe:	ab03      	add	r3, sp, #12
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	462a      	mov	r2, r5
 8005204:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <_svfiprintf_r+0x1f8>)
 8005206:	a904      	add	r1, sp, #16
 8005208:	4638      	mov	r0, r7
 800520a:	f3af 8000 	nop.w
 800520e:	1c42      	adds	r2, r0, #1
 8005210:	4606      	mov	r6, r0
 8005212:	d1d6      	bne.n	80051c2 <_svfiprintf_r+0x176>
 8005214:	89ab      	ldrh	r3, [r5, #12]
 8005216:	065b      	lsls	r3, r3, #25
 8005218:	f53f af2c 	bmi.w	8005074 <_svfiprintf_r+0x28>
 800521c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800521e:	b01d      	add	sp, #116	; 0x74
 8005220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005224:	ab03      	add	r3, sp, #12
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	462a      	mov	r2, r5
 800522a:	4b06      	ldr	r3, [pc, #24]	; (8005244 <_svfiprintf_r+0x1f8>)
 800522c:	a904      	add	r1, sp, #16
 800522e:	4638      	mov	r0, r7
 8005230:	f000 f87a 	bl	8005328 <_printf_i>
 8005234:	e7eb      	b.n	800520e <_svfiprintf_r+0x1c2>
 8005236:	bf00      	nop
 8005238:	08005d2c 	.word	0x08005d2c
 800523c:	08005d36 	.word	0x08005d36
 8005240:	00000000 	.word	0x00000000
 8005244:	08004f95 	.word	0x08004f95
 8005248:	08005d32 	.word	0x08005d32

0800524c <_printf_common>:
 800524c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005250:	4616      	mov	r6, r2
 8005252:	4699      	mov	r9, r3
 8005254:	688a      	ldr	r2, [r1, #8]
 8005256:	690b      	ldr	r3, [r1, #16]
 8005258:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800525c:	4293      	cmp	r3, r2
 800525e:	bfb8      	it	lt
 8005260:	4613      	movlt	r3, r2
 8005262:	6033      	str	r3, [r6, #0]
 8005264:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005268:	4607      	mov	r7, r0
 800526a:	460c      	mov	r4, r1
 800526c:	b10a      	cbz	r2, 8005272 <_printf_common+0x26>
 800526e:	3301      	adds	r3, #1
 8005270:	6033      	str	r3, [r6, #0]
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	0699      	lsls	r1, r3, #26
 8005276:	bf42      	ittt	mi
 8005278:	6833      	ldrmi	r3, [r6, #0]
 800527a:	3302      	addmi	r3, #2
 800527c:	6033      	strmi	r3, [r6, #0]
 800527e:	6825      	ldr	r5, [r4, #0]
 8005280:	f015 0506 	ands.w	r5, r5, #6
 8005284:	d106      	bne.n	8005294 <_printf_common+0x48>
 8005286:	f104 0a19 	add.w	sl, r4, #25
 800528a:	68e3      	ldr	r3, [r4, #12]
 800528c:	6832      	ldr	r2, [r6, #0]
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	42ab      	cmp	r3, r5
 8005292:	dc26      	bgt.n	80052e2 <_printf_common+0x96>
 8005294:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005298:	1e13      	subs	r3, r2, #0
 800529a:	6822      	ldr	r2, [r4, #0]
 800529c:	bf18      	it	ne
 800529e:	2301      	movne	r3, #1
 80052a0:	0692      	lsls	r2, r2, #26
 80052a2:	d42b      	bmi.n	80052fc <_printf_common+0xb0>
 80052a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052a8:	4649      	mov	r1, r9
 80052aa:	4638      	mov	r0, r7
 80052ac:	47c0      	blx	r8
 80052ae:	3001      	adds	r0, #1
 80052b0:	d01e      	beq.n	80052f0 <_printf_common+0xa4>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	68e5      	ldr	r5, [r4, #12]
 80052b6:	6832      	ldr	r2, [r6, #0]
 80052b8:	f003 0306 	and.w	r3, r3, #6
 80052bc:	2b04      	cmp	r3, #4
 80052be:	bf08      	it	eq
 80052c0:	1aad      	subeq	r5, r5, r2
 80052c2:	68a3      	ldr	r3, [r4, #8]
 80052c4:	6922      	ldr	r2, [r4, #16]
 80052c6:	bf0c      	ite	eq
 80052c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052cc:	2500      	movne	r5, #0
 80052ce:	4293      	cmp	r3, r2
 80052d0:	bfc4      	itt	gt
 80052d2:	1a9b      	subgt	r3, r3, r2
 80052d4:	18ed      	addgt	r5, r5, r3
 80052d6:	2600      	movs	r6, #0
 80052d8:	341a      	adds	r4, #26
 80052da:	42b5      	cmp	r5, r6
 80052dc:	d11a      	bne.n	8005314 <_printf_common+0xc8>
 80052de:	2000      	movs	r0, #0
 80052e0:	e008      	b.n	80052f4 <_printf_common+0xa8>
 80052e2:	2301      	movs	r3, #1
 80052e4:	4652      	mov	r2, sl
 80052e6:	4649      	mov	r1, r9
 80052e8:	4638      	mov	r0, r7
 80052ea:	47c0      	blx	r8
 80052ec:	3001      	adds	r0, #1
 80052ee:	d103      	bne.n	80052f8 <_printf_common+0xac>
 80052f0:	f04f 30ff 	mov.w	r0, #4294967295
 80052f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f8:	3501      	adds	r5, #1
 80052fa:	e7c6      	b.n	800528a <_printf_common+0x3e>
 80052fc:	18e1      	adds	r1, r4, r3
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	2030      	movs	r0, #48	; 0x30
 8005302:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005306:	4422      	add	r2, r4
 8005308:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800530c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005310:	3302      	adds	r3, #2
 8005312:	e7c7      	b.n	80052a4 <_printf_common+0x58>
 8005314:	2301      	movs	r3, #1
 8005316:	4622      	mov	r2, r4
 8005318:	4649      	mov	r1, r9
 800531a:	4638      	mov	r0, r7
 800531c:	47c0      	blx	r8
 800531e:	3001      	adds	r0, #1
 8005320:	d0e6      	beq.n	80052f0 <_printf_common+0xa4>
 8005322:	3601      	adds	r6, #1
 8005324:	e7d9      	b.n	80052da <_printf_common+0x8e>
	...

08005328 <_printf_i>:
 8005328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800532c:	460c      	mov	r4, r1
 800532e:	4691      	mov	r9, r2
 8005330:	7e27      	ldrb	r7, [r4, #24]
 8005332:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005334:	2f78      	cmp	r7, #120	; 0x78
 8005336:	4680      	mov	r8, r0
 8005338:	469a      	mov	sl, r3
 800533a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800533e:	d807      	bhi.n	8005350 <_printf_i+0x28>
 8005340:	2f62      	cmp	r7, #98	; 0x62
 8005342:	d80a      	bhi.n	800535a <_printf_i+0x32>
 8005344:	2f00      	cmp	r7, #0
 8005346:	f000 80d8 	beq.w	80054fa <_printf_i+0x1d2>
 800534a:	2f58      	cmp	r7, #88	; 0x58
 800534c:	f000 80a3 	beq.w	8005496 <_printf_i+0x16e>
 8005350:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005354:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005358:	e03a      	b.n	80053d0 <_printf_i+0xa8>
 800535a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800535e:	2b15      	cmp	r3, #21
 8005360:	d8f6      	bhi.n	8005350 <_printf_i+0x28>
 8005362:	a001      	add	r0, pc, #4	; (adr r0, 8005368 <_printf_i+0x40>)
 8005364:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005368:	080053c1 	.word	0x080053c1
 800536c:	080053d5 	.word	0x080053d5
 8005370:	08005351 	.word	0x08005351
 8005374:	08005351 	.word	0x08005351
 8005378:	08005351 	.word	0x08005351
 800537c:	08005351 	.word	0x08005351
 8005380:	080053d5 	.word	0x080053d5
 8005384:	08005351 	.word	0x08005351
 8005388:	08005351 	.word	0x08005351
 800538c:	08005351 	.word	0x08005351
 8005390:	08005351 	.word	0x08005351
 8005394:	080054e1 	.word	0x080054e1
 8005398:	08005405 	.word	0x08005405
 800539c:	080054c3 	.word	0x080054c3
 80053a0:	08005351 	.word	0x08005351
 80053a4:	08005351 	.word	0x08005351
 80053a8:	08005503 	.word	0x08005503
 80053ac:	08005351 	.word	0x08005351
 80053b0:	08005405 	.word	0x08005405
 80053b4:	08005351 	.word	0x08005351
 80053b8:	08005351 	.word	0x08005351
 80053bc:	080054cb 	.word	0x080054cb
 80053c0:	680b      	ldr	r3, [r1, #0]
 80053c2:	1d1a      	adds	r2, r3, #4
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	600a      	str	r2, [r1, #0]
 80053c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0a3      	b.n	800551c <_printf_i+0x1f4>
 80053d4:	6825      	ldr	r5, [r4, #0]
 80053d6:	6808      	ldr	r0, [r1, #0]
 80053d8:	062e      	lsls	r6, r5, #24
 80053da:	f100 0304 	add.w	r3, r0, #4
 80053de:	d50a      	bpl.n	80053f6 <_printf_i+0xce>
 80053e0:	6805      	ldr	r5, [r0, #0]
 80053e2:	600b      	str	r3, [r1, #0]
 80053e4:	2d00      	cmp	r5, #0
 80053e6:	da03      	bge.n	80053f0 <_printf_i+0xc8>
 80053e8:	232d      	movs	r3, #45	; 0x2d
 80053ea:	426d      	negs	r5, r5
 80053ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053f0:	485e      	ldr	r0, [pc, #376]	; (800556c <_printf_i+0x244>)
 80053f2:	230a      	movs	r3, #10
 80053f4:	e019      	b.n	800542a <_printf_i+0x102>
 80053f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80053fa:	6805      	ldr	r5, [r0, #0]
 80053fc:	600b      	str	r3, [r1, #0]
 80053fe:	bf18      	it	ne
 8005400:	b22d      	sxthne	r5, r5
 8005402:	e7ef      	b.n	80053e4 <_printf_i+0xbc>
 8005404:	680b      	ldr	r3, [r1, #0]
 8005406:	6825      	ldr	r5, [r4, #0]
 8005408:	1d18      	adds	r0, r3, #4
 800540a:	6008      	str	r0, [r1, #0]
 800540c:	0628      	lsls	r0, r5, #24
 800540e:	d501      	bpl.n	8005414 <_printf_i+0xec>
 8005410:	681d      	ldr	r5, [r3, #0]
 8005412:	e002      	b.n	800541a <_printf_i+0xf2>
 8005414:	0669      	lsls	r1, r5, #25
 8005416:	d5fb      	bpl.n	8005410 <_printf_i+0xe8>
 8005418:	881d      	ldrh	r5, [r3, #0]
 800541a:	4854      	ldr	r0, [pc, #336]	; (800556c <_printf_i+0x244>)
 800541c:	2f6f      	cmp	r7, #111	; 0x6f
 800541e:	bf0c      	ite	eq
 8005420:	2308      	moveq	r3, #8
 8005422:	230a      	movne	r3, #10
 8005424:	2100      	movs	r1, #0
 8005426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800542a:	6866      	ldr	r6, [r4, #4]
 800542c:	60a6      	str	r6, [r4, #8]
 800542e:	2e00      	cmp	r6, #0
 8005430:	bfa2      	ittt	ge
 8005432:	6821      	ldrge	r1, [r4, #0]
 8005434:	f021 0104 	bicge.w	r1, r1, #4
 8005438:	6021      	strge	r1, [r4, #0]
 800543a:	b90d      	cbnz	r5, 8005440 <_printf_i+0x118>
 800543c:	2e00      	cmp	r6, #0
 800543e:	d04d      	beq.n	80054dc <_printf_i+0x1b4>
 8005440:	4616      	mov	r6, r2
 8005442:	fbb5 f1f3 	udiv	r1, r5, r3
 8005446:	fb03 5711 	mls	r7, r3, r1, r5
 800544a:	5dc7      	ldrb	r7, [r0, r7]
 800544c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005450:	462f      	mov	r7, r5
 8005452:	42bb      	cmp	r3, r7
 8005454:	460d      	mov	r5, r1
 8005456:	d9f4      	bls.n	8005442 <_printf_i+0x11a>
 8005458:	2b08      	cmp	r3, #8
 800545a:	d10b      	bne.n	8005474 <_printf_i+0x14c>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	07df      	lsls	r7, r3, #31
 8005460:	d508      	bpl.n	8005474 <_printf_i+0x14c>
 8005462:	6923      	ldr	r3, [r4, #16]
 8005464:	6861      	ldr	r1, [r4, #4]
 8005466:	4299      	cmp	r1, r3
 8005468:	bfde      	ittt	le
 800546a:	2330      	movle	r3, #48	; 0x30
 800546c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005470:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005474:	1b92      	subs	r2, r2, r6
 8005476:	6122      	str	r2, [r4, #16]
 8005478:	f8cd a000 	str.w	sl, [sp]
 800547c:	464b      	mov	r3, r9
 800547e:	aa03      	add	r2, sp, #12
 8005480:	4621      	mov	r1, r4
 8005482:	4640      	mov	r0, r8
 8005484:	f7ff fee2 	bl	800524c <_printf_common>
 8005488:	3001      	adds	r0, #1
 800548a:	d14c      	bne.n	8005526 <_printf_i+0x1fe>
 800548c:	f04f 30ff 	mov.w	r0, #4294967295
 8005490:	b004      	add	sp, #16
 8005492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005496:	4835      	ldr	r0, [pc, #212]	; (800556c <_printf_i+0x244>)
 8005498:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	680e      	ldr	r6, [r1, #0]
 80054a0:	061f      	lsls	r7, r3, #24
 80054a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80054a6:	600e      	str	r6, [r1, #0]
 80054a8:	d514      	bpl.n	80054d4 <_printf_i+0x1ac>
 80054aa:	07d9      	lsls	r1, r3, #31
 80054ac:	bf44      	itt	mi
 80054ae:	f043 0320 	orrmi.w	r3, r3, #32
 80054b2:	6023      	strmi	r3, [r4, #0]
 80054b4:	b91d      	cbnz	r5, 80054be <_printf_i+0x196>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	f023 0320 	bic.w	r3, r3, #32
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	2310      	movs	r3, #16
 80054c0:	e7b0      	b.n	8005424 <_printf_i+0xfc>
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	f043 0320 	orr.w	r3, r3, #32
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	2378      	movs	r3, #120	; 0x78
 80054cc:	4828      	ldr	r0, [pc, #160]	; (8005570 <_printf_i+0x248>)
 80054ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054d2:	e7e3      	b.n	800549c <_printf_i+0x174>
 80054d4:	065e      	lsls	r6, r3, #25
 80054d6:	bf48      	it	mi
 80054d8:	b2ad      	uxthmi	r5, r5
 80054da:	e7e6      	b.n	80054aa <_printf_i+0x182>
 80054dc:	4616      	mov	r6, r2
 80054de:	e7bb      	b.n	8005458 <_printf_i+0x130>
 80054e0:	680b      	ldr	r3, [r1, #0]
 80054e2:	6826      	ldr	r6, [r4, #0]
 80054e4:	6960      	ldr	r0, [r4, #20]
 80054e6:	1d1d      	adds	r5, r3, #4
 80054e8:	600d      	str	r5, [r1, #0]
 80054ea:	0635      	lsls	r5, r6, #24
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	d501      	bpl.n	80054f4 <_printf_i+0x1cc>
 80054f0:	6018      	str	r0, [r3, #0]
 80054f2:	e002      	b.n	80054fa <_printf_i+0x1d2>
 80054f4:	0671      	lsls	r1, r6, #25
 80054f6:	d5fb      	bpl.n	80054f0 <_printf_i+0x1c8>
 80054f8:	8018      	strh	r0, [r3, #0]
 80054fa:	2300      	movs	r3, #0
 80054fc:	6123      	str	r3, [r4, #16]
 80054fe:	4616      	mov	r6, r2
 8005500:	e7ba      	b.n	8005478 <_printf_i+0x150>
 8005502:	680b      	ldr	r3, [r1, #0]
 8005504:	1d1a      	adds	r2, r3, #4
 8005506:	600a      	str	r2, [r1, #0]
 8005508:	681e      	ldr	r6, [r3, #0]
 800550a:	6862      	ldr	r2, [r4, #4]
 800550c:	2100      	movs	r1, #0
 800550e:	4630      	mov	r0, r6
 8005510:	f7fa fe6e 	bl	80001f0 <memchr>
 8005514:	b108      	cbz	r0, 800551a <_printf_i+0x1f2>
 8005516:	1b80      	subs	r0, r0, r6
 8005518:	6060      	str	r0, [r4, #4]
 800551a:	6863      	ldr	r3, [r4, #4]
 800551c:	6123      	str	r3, [r4, #16]
 800551e:	2300      	movs	r3, #0
 8005520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005524:	e7a8      	b.n	8005478 <_printf_i+0x150>
 8005526:	6923      	ldr	r3, [r4, #16]
 8005528:	4632      	mov	r2, r6
 800552a:	4649      	mov	r1, r9
 800552c:	4640      	mov	r0, r8
 800552e:	47d0      	blx	sl
 8005530:	3001      	adds	r0, #1
 8005532:	d0ab      	beq.n	800548c <_printf_i+0x164>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	079b      	lsls	r3, r3, #30
 8005538:	d413      	bmi.n	8005562 <_printf_i+0x23a>
 800553a:	68e0      	ldr	r0, [r4, #12]
 800553c:	9b03      	ldr	r3, [sp, #12]
 800553e:	4298      	cmp	r0, r3
 8005540:	bfb8      	it	lt
 8005542:	4618      	movlt	r0, r3
 8005544:	e7a4      	b.n	8005490 <_printf_i+0x168>
 8005546:	2301      	movs	r3, #1
 8005548:	4632      	mov	r2, r6
 800554a:	4649      	mov	r1, r9
 800554c:	4640      	mov	r0, r8
 800554e:	47d0      	blx	sl
 8005550:	3001      	adds	r0, #1
 8005552:	d09b      	beq.n	800548c <_printf_i+0x164>
 8005554:	3501      	adds	r5, #1
 8005556:	68e3      	ldr	r3, [r4, #12]
 8005558:	9903      	ldr	r1, [sp, #12]
 800555a:	1a5b      	subs	r3, r3, r1
 800555c:	42ab      	cmp	r3, r5
 800555e:	dcf2      	bgt.n	8005546 <_printf_i+0x21e>
 8005560:	e7eb      	b.n	800553a <_printf_i+0x212>
 8005562:	2500      	movs	r5, #0
 8005564:	f104 0619 	add.w	r6, r4, #25
 8005568:	e7f5      	b.n	8005556 <_printf_i+0x22e>
 800556a:	bf00      	nop
 800556c:	08005d3d 	.word	0x08005d3d
 8005570:	08005d4e 	.word	0x08005d4e

08005574 <memmove>:
 8005574:	4288      	cmp	r0, r1
 8005576:	b510      	push	{r4, lr}
 8005578:	eb01 0402 	add.w	r4, r1, r2
 800557c:	d902      	bls.n	8005584 <memmove+0x10>
 800557e:	4284      	cmp	r4, r0
 8005580:	4623      	mov	r3, r4
 8005582:	d807      	bhi.n	8005594 <memmove+0x20>
 8005584:	1e43      	subs	r3, r0, #1
 8005586:	42a1      	cmp	r1, r4
 8005588:	d008      	beq.n	800559c <memmove+0x28>
 800558a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800558e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005592:	e7f8      	b.n	8005586 <memmove+0x12>
 8005594:	4402      	add	r2, r0
 8005596:	4601      	mov	r1, r0
 8005598:	428a      	cmp	r2, r1
 800559a:	d100      	bne.n	800559e <memmove+0x2a>
 800559c:	bd10      	pop	{r4, pc}
 800559e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055a6:	e7f7      	b.n	8005598 <memmove+0x24>

080055a8 <_free_r>:
 80055a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055aa:	2900      	cmp	r1, #0
 80055ac:	d048      	beq.n	8005640 <_free_r+0x98>
 80055ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055b2:	9001      	str	r0, [sp, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f1a1 0404 	sub.w	r4, r1, #4
 80055ba:	bfb8      	it	lt
 80055bc:	18e4      	addlt	r4, r4, r3
 80055be:	f000 f8d3 	bl	8005768 <__malloc_lock>
 80055c2:	4a20      	ldr	r2, [pc, #128]	; (8005644 <_free_r+0x9c>)
 80055c4:	9801      	ldr	r0, [sp, #4]
 80055c6:	6813      	ldr	r3, [r2, #0]
 80055c8:	4615      	mov	r5, r2
 80055ca:	b933      	cbnz	r3, 80055da <_free_r+0x32>
 80055cc:	6063      	str	r3, [r4, #4]
 80055ce:	6014      	str	r4, [r2, #0]
 80055d0:	b003      	add	sp, #12
 80055d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055d6:	f000 b8cd 	b.w	8005774 <__malloc_unlock>
 80055da:	42a3      	cmp	r3, r4
 80055dc:	d90b      	bls.n	80055f6 <_free_r+0x4e>
 80055de:	6821      	ldr	r1, [r4, #0]
 80055e0:	1862      	adds	r2, r4, r1
 80055e2:	4293      	cmp	r3, r2
 80055e4:	bf04      	itt	eq
 80055e6:	681a      	ldreq	r2, [r3, #0]
 80055e8:	685b      	ldreq	r3, [r3, #4]
 80055ea:	6063      	str	r3, [r4, #4]
 80055ec:	bf04      	itt	eq
 80055ee:	1852      	addeq	r2, r2, r1
 80055f0:	6022      	streq	r2, [r4, #0]
 80055f2:	602c      	str	r4, [r5, #0]
 80055f4:	e7ec      	b.n	80055d0 <_free_r+0x28>
 80055f6:	461a      	mov	r2, r3
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	b10b      	cbz	r3, 8005600 <_free_r+0x58>
 80055fc:	42a3      	cmp	r3, r4
 80055fe:	d9fa      	bls.n	80055f6 <_free_r+0x4e>
 8005600:	6811      	ldr	r1, [r2, #0]
 8005602:	1855      	adds	r5, r2, r1
 8005604:	42a5      	cmp	r5, r4
 8005606:	d10b      	bne.n	8005620 <_free_r+0x78>
 8005608:	6824      	ldr	r4, [r4, #0]
 800560a:	4421      	add	r1, r4
 800560c:	1854      	adds	r4, r2, r1
 800560e:	42a3      	cmp	r3, r4
 8005610:	6011      	str	r1, [r2, #0]
 8005612:	d1dd      	bne.n	80055d0 <_free_r+0x28>
 8005614:	681c      	ldr	r4, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	6053      	str	r3, [r2, #4]
 800561a:	4421      	add	r1, r4
 800561c:	6011      	str	r1, [r2, #0]
 800561e:	e7d7      	b.n	80055d0 <_free_r+0x28>
 8005620:	d902      	bls.n	8005628 <_free_r+0x80>
 8005622:	230c      	movs	r3, #12
 8005624:	6003      	str	r3, [r0, #0]
 8005626:	e7d3      	b.n	80055d0 <_free_r+0x28>
 8005628:	6825      	ldr	r5, [r4, #0]
 800562a:	1961      	adds	r1, r4, r5
 800562c:	428b      	cmp	r3, r1
 800562e:	bf04      	itt	eq
 8005630:	6819      	ldreq	r1, [r3, #0]
 8005632:	685b      	ldreq	r3, [r3, #4]
 8005634:	6063      	str	r3, [r4, #4]
 8005636:	bf04      	itt	eq
 8005638:	1949      	addeq	r1, r1, r5
 800563a:	6021      	streq	r1, [r4, #0]
 800563c:	6054      	str	r4, [r2, #4]
 800563e:	e7c7      	b.n	80055d0 <_free_r+0x28>
 8005640:	b003      	add	sp, #12
 8005642:	bd30      	pop	{r4, r5, pc}
 8005644:	20000144 	.word	0x20000144

08005648 <_malloc_r>:
 8005648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564a:	1ccd      	adds	r5, r1, #3
 800564c:	f025 0503 	bic.w	r5, r5, #3
 8005650:	3508      	adds	r5, #8
 8005652:	2d0c      	cmp	r5, #12
 8005654:	bf38      	it	cc
 8005656:	250c      	movcc	r5, #12
 8005658:	2d00      	cmp	r5, #0
 800565a:	4606      	mov	r6, r0
 800565c:	db01      	blt.n	8005662 <_malloc_r+0x1a>
 800565e:	42a9      	cmp	r1, r5
 8005660:	d903      	bls.n	800566a <_malloc_r+0x22>
 8005662:	230c      	movs	r3, #12
 8005664:	6033      	str	r3, [r6, #0]
 8005666:	2000      	movs	r0, #0
 8005668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800566a:	f000 f87d 	bl	8005768 <__malloc_lock>
 800566e:	4921      	ldr	r1, [pc, #132]	; (80056f4 <_malloc_r+0xac>)
 8005670:	680a      	ldr	r2, [r1, #0]
 8005672:	4614      	mov	r4, r2
 8005674:	b99c      	cbnz	r4, 800569e <_malloc_r+0x56>
 8005676:	4f20      	ldr	r7, [pc, #128]	; (80056f8 <_malloc_r+0xb0>)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	b923      	cbnz	r3, 8005686 <_malloc_r+0x3e>
 800567c:	4621      	mov	r1, r4
 800567e:	4630      	mov	r0, r6
 8005680:	f000 f862 	bl	8005748 <_sbrk_r>
 8005684:	6038      	str	r0, [r7, #0]
 8005686:	4629      	mov	r1, r5
 8005688:	4630      	mov	r0, r6
 800568a:	f000 f85d 	bl	8005748 <_sbrk_r>
 800568e:	1c43      	adds	r3, r0, #1
 8005690:	d123      	bne.n	80056da <_malloc_r+0x92>
 8005692:	230c      	movs	r3, #12
 8005694:	6033      	str	r3, [r6, #0]
 8005696:	4630      	mov	r0, r6
 8005698:	f000 f86c 	bl	8005774 <__malloc_unlock>
 800569c:	e7e3      	b.n	8005666 <_malloc_r+0x1e>
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	1b5b      	subs	r3, r3, r5
 80056a2:	d417      	bmi.n	80056d4 <_malloc_r+0x8c>
 80056a4:	2b0b      	cmp	r3, #11
 80056a6:	d903      	bls.n	80056b0 <_malloc_r+0x68>
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	441c      	add	r4, r3
 80056ac:	6025      	str	r5, [r4, #0]
 80056ae:	e004      	b.n	80056ba <_malloc_r+0x72>
 80056b0:	6863      	ldr	r3, [r4, #4]
 80056b2:	42a2      	cmp	r2, r4
 80056b4:	bf0c      	ite	eq
 80056b6:	600b      	streq	r3, [r1, #0]
 80056b8:	6053      	strne	r3, [r2, #4]
 80056ba:	4630      	mov	r0, r6
 80056bc:	f000 f85a 	bl	8005774 <__malloc_unlock>
 80056c0:	f104 000b 	add.w	r0, r4, #11
 80056c4:	1d23      	adds	r3, r4, #4
 80056c6:	f020 0007 	bic.w	r0, r0, #7
 80056ca:	1ac2      	subs	r2, r0, r3
 80056cc:	d0cc      	beq.n	8005668 <_malloc_r+0x20>
 80056ce:	1a1b      	subs	r3, r3, r0
 80056d0:	50a3      	str	r3, [r4, r2]
 80056d2:	e7c9      	b.n	8005668 <_malloc_r+0x20>
 80056d4:	4622      	mov	r2, r4
 80056d6:	6864      	ldr	r4, [r4, #4]
 80056d8:	e7cc      	b.n	8005674 <_malloc_r+0x2c>
 80056da:	1cc4      	adds	r4, r0, #3
 80056dc:	f024 0403 	bic.w	r4, r4, #3
 80056e0:	42a0      	cmp	r0, r4
 80056e2:	d0e3      	beq.n	80056ac <_malloc_r+0x64>
 80056e4:	1a21      	subs	r1, r4, r0
 80056e6:	4630      	mov	r0, r6
 80056e8:	f000 f82e 	bl	8005748 <_sbrk_r>
 80056ec:	3001      	adds	r0, #1
 80056ee:	d1dd      	bne.n	80056ac <_malloc_r+0x64>
 80056f0:	e7cf      	b.n	8005692 <_malloc_r+0x4a>
 80056f2:	bf00      	nop
 80056f4:	20000144 	.word	0x20000144
 80056f8:	20000148 	.word	0x20000148

080056fc <_realloc_r>:
 80056fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fe:	4607      	mov	r7, r0
 8005700:	4614      	mov	r4, r2
 8005702:	460e      	mov	r6, r1
 8005704:	b921      	cbnz	r1, 8005710 <_realloc_r+0x14>
 8005706:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800570a:	4611      	mov	r1, r2
 800570c:	f7ff bf9c 	b.w	8005648 <_malloc_r>
 8005710:	b922      	cbnz	r2, 800571c <_realloc_r+0x20>
 8005712:	f7ff ff49 	bl	80055a8 <_free_r>
 8005716:	4625      	mov	r5, r4
 8005718:	4628      	mov	r0, r5
 800571a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800571c:	f000 f830 	bl	8005780 <_malloc_usable_size_r>
 8005720:	42a0      	cmp	r0, r4
 8005722:	d20f      	bcs.n	8005744 <_realloc_r+0x48>
 8005724:	4621      	mov	r1, r4
 8005726:	4638      	mov	r0, r7
 8005728:	f7ff ff8e 	bl	8005648 <_malloc_r>
 800572c:	4605      	mov	r5, r0
 800572e:	2800      	cmp	r0, #0
 8005730:	d0f2      	beq.n	8005718 <_realloc_r+0x1c>
 8005732:	4631      	mov	r1, r6
 8005734:	4622      	mov	r2, r4
 8005736:	f7ff fbf7 	bl	8004f28 <memcpy>
 800573a:	4631      	mov	r1, r6
 800573c:	4638      	mov	r0, r7
 800573e:	f7ff ff33 	bl	80055a8 <_free_r>
 8005742:	e7e9      	b.n	8005718 <_realloc_r+0x1c>
 8005744:	4635      	mov	r5, r6
 8005746:	e7e7      	b.n	8005718 <_realloc_r+0x1c>

08005748 <_sbrk_r>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	4d06      	ldr	r5, [pc, #24]	; (8005764 <_sbrk_r+0x1c>)
 800574c:	2300      	movs	r3, #0
 800574e:	4604      	mov	r4, r0
 8005750:	4608      	mov	r0, r1
 8005752:	602b      	str	r3, [r5, #0]
 8005754:	f7fb fa9a 	bl	8000c8c <_sbrk>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	d102      	bne.n	8005762 <_sbrk_r+0x1a>
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	b103      	cbz	r3, 8005762 <_sbrk_r+0x1a>
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	bd38      	pop	{r3, r4, r5, pc}
 8005764:	200002d8 	.word	0x200002d8

08005768 <__malloc_lock>:
 8005768:	4801      	ldr	r0, [pc, #4]	; (8005770 <__malloc_lock+0x8>)
 800576a:	f000 b811 	b.w	8005790 <__retarget_lock_acquire_recursive>
 800576e:	bf00      	nop
 8005770:	200002e0 	.word	0x200002e0

08005774 <__malloc_unlock>:
 8005774:	4801      	ldr	r0, [pc, #4]	; (800577c <__malloc_unlock+0x8>)
 8005776:	f000 b80c 	b.w	8005792 <__retarget_lock_release_recursive>
 800577a:	bf00      	nop
 800577c:	200002e0 	.word	0x200002e0

08005780 <_malloc_usable_size_r>:
 8005780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005784:	1f18      	subs	r0, r3, #4
 8005786:	2b00      	cmp	r3, #0
 8005788:	bfbc      	itt	lt
 800578a:	580b      	ldrlt	r3, [r1, r0]
 800578c:	18c0      	addlt	r0, r0, r3
 800578e:	4770      	bx	lr

08005790 <__retarget_lock_acquire_recursive>:
 8005790:	4770      	bx	lr

08005792 <__retarget_lock_release_recursive>:
 8005792:	4770      	bx	lr

08005794 <_init>:
 8005794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005796:	bf00      	nop
 8005798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579a:	bc08      	pop	{r3}
 800579c:	469e      	mov	lr, r3
 800579e:	4770      	bx	lr

080057a0 <_fini>:
 80057a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a2:	bf00      	nop
 80057a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a6:	bc08      	pop	{r3}
 80057a8:	469e      	mov	lr, r3
 80057aa:	4770      	bx	lr
