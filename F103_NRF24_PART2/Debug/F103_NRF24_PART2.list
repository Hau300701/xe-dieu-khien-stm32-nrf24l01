
F103_NRF24_PART2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005300  08005300  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005300  08005300  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005300  08005300  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005300  08005300  00015300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005304  08005304  00015304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005308  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000078  08005380  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08005380  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e801  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f69  00000000  00000000  0002e8a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00030810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  00031728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184ac  00000000  00000000  00032588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e71a  00000000  00000000  0004aa34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d154  00000000  00000000  0005914e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e62a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004398  00000000  00000000  000e62f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d38 	.word	0x08004d38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004d38 	.word	0x08004d38

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800015e:	b097      	sub	sp, #92	; 0x5c
 8000160:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fc89 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f93b 	bl	80003e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 fa7f 	bl	800066c <MX_GPIO_Init>
  MX_SPI2_Init();
 800016e:	f000 f971 	bl	8000454 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000172:	f000 fa51 	bl	8000618 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000176:	f000 f9a3 	bl	80004c0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800017a:	2100      	movs	r1, #0
 800017c:	488d      	ldr	r0, [pc, #564]	; (80003b4 <main+0x258>)
 800017e:	f002 f9af 	bl	80024e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000182:	2104      	movs	r1, #4
 8000184:	488b      	ldr	r0, [pc, #556]	; (80003b4 <main+0x258>)
 8000186:	f002 f9ab 	bl	80024e0 <HAL_TIM_PWM_Start>
	NRF24_begin(GPIOA, nrf_CSN_PIN, nrf_CE_PIN, hspi2);
 800018a:	4c8b      	ldr	r4, [pc, #556]	; (80003b8 <main+0x25c>)
 800018c:	4668      	mov	r0, sp
 800018e:	1d23      	adds	r3, r4, #4
 8000190:	2254      	movs	r2, #84	; 0x54
 8000192:	4619      	mov	r1, r3
 8000194:	f004 f98e 	bl	80044b4 <memcpy>
 8000198:	6823      	ldr	r3, [r4, #0]
 800019a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800019e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001a2:	4886      	ldr	r0, [pc, #536]	; (80003bc <main+0x260>)
 80001a4:	f003 fa12 	bl	80035cc <NRF24_begin>
	nrf24_DebugUART_Init(huart1);
 80001a8:	4e85      	ldr	r6, [pc, #532]	; (80003c0 <main+0x264>)
 80001aa:	466d      	mov	r5, sp
 80001ac:	f106 0410 	add.w	r4, r6, #16
 80001b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001bc:	6823      	ldr	r3, [r4, #0]
 80001be:	602b      	str	r3, [r5, #0]
 80001c0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80001c4:	f004 f934 	bl	8004430 <nrf24_DebugUART_Init>

	printRadioSettings();
 80001c8:	f003 fd0a 	bl	8003be0 <printRadioSettings>

	NRF24_setAutoAck(true);
 80001cc:	2001      	movs	r0, #1
 80001ce:	f003 fbe9 	bl	80039a4 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 80001d2:	2034      	movs	r0, #52	; 0x34
 80001d4:	f003 fb91 	bl	80038fa <NRF24_setChannel>
	NRF24_setPayloadSize(4);
 80001d8:	2004      	movs	r0, #4
 80001da:	f003 fba3 	bl	8003924 <NRF24_setPayloadSize>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 80001de:	4b79      	ldr	r3, [pc, #484]	; (80003c4 <main+0x268>)
 80001e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80001e4:	2001      	movs	r0, #1
 80001e6:	f003 fb1f 	bl	8003828 <NRF24_openReadingPipe>
	//NRF24_enableDynamicPayloads();
	//NRF24_enableAckPayload();

	NRF24_startListening();
 80001ea:	f003 facf 	bl	800378c <NRF24_startListening>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(NRF24_available())
 80001ee:	f003 faf3 	bl	80037d8 <NRF24_available>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d003      	beq.n	8000200 <main+0xa4>
	  {
		NRF24_read(adc_value, 4);
 80001f8:	2104      	movs	r1, #4
 80001fa:	4873      	ldr	r0, [pc, #460]	; (80003c8 <main+0x26c>)
 80001fc:	f003 faf4 	bl	80037e8 <NRF24_read>
	  }
	  // xe dung
	  if(adc_value[0] > 490 && adc_value[0] < 510 && adc_value[1] > 488 && adc_value[1] < 506)
 8000200:	4b71      	ldr	r3, [pc, #452]	; (80003c8 <main+0x26c>)
 8000202:	881b      	ldrh	r3, [r3, #0]
 8000204:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8000208:	d917      	bls.n	800023a <main+0xde>
 800020a:	4b6f      	ldr	r3, [pc, #444]	; (80003c8 <main+0x26c>)
 800020c:	881b      	ldrh	r3, [r3, #0]
 800020e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8000212:	d212      	bcs.n	800023a <main+0xde>
 8000214:	4b6c      	ldr	r3, [pc, #432]	; (80003c8 <main+0x26c>)
 8000216:	885b      	ldrh	r3, [r3, #2]
 8000218:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 800021c:	d90d      	bls.n	800023a <main+0xde>
 800021e:	4b6a      	ldr	r3, [pc, #424]	; (80003c8 <main+0x26c>)
 8000220:	885b      	ldrh	r3, [r3, #2]
 8000222:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8000226:	d208      	bcs.n	800023a <main+0xde>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 8000228:	4b62      	ldr	r3, [pc, #392]	; (80003b4 <main+0x258>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2200      	movs	r2, #0
 800022e:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 8000230:	4b60      	ldr	r3, [pc, #384]	; (80003b4 <main+0x258>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2200      	movs	r2, #0
 8000236:	639a      	str	r2, [r3, #56]	; 0x38
 8000238:	e0bb      	b.n	80003b2 <main+0x256>
	  // xe chay thang
	  }else if(adc_value[0] > 510)
 800023a:	4b63      	ldr	r3, [pc, #396]	; (80003c8 <main+0x26c>)
 800023c:	881b      	ldrh	r3, [r3, #0]
 800023e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8000242:	d92e      	bls.n	80002a2 <main+0x146>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	485c      	ldr	r0, [pc, #368]	; (80003bc <main+0x260>)
 800024a:	f000 ff03 	bl	8001054 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800024e:	2201      	movs	r2, #1
 8000250:	2120      	movs	r1, #32
 8000252:	485a      	ldr	r0, [pc, #360]	; (80003bc <main+0x260>)
 8000254:	f000 fefe 	bl	8001054 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000258:	2200      	movs	r2, #0
 800025a:	2140      	movs	r1, #64	; 0x40
 800025c:	4857      	ldr	r0, [pc, #348]	; (80003bc <main+0x260>)
 800025e:	f000 fef9 	bl	8001054 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000262:	2201      	movs	r2, #1
 8000264:	2180      	movs	r1, #128	; 0x80
 8000266:	4855      	ldr	r0, [pc, #340]	; (80003bc <main+0x260>)
 8000268:	f000 fef4 	bl	8001054 <HAL_GPIO_WritePin>
		  ccr_value = ((adc_value[0] - 510) * 7999) / 513;
 800026c:	4b56      	ldr	r3, [pc, #344]	; (80003c8 <main+0x26c>)
 800026e:	881b      	ldrh	r3, [r3, #0]
 8000270:	f5a3 73ff 	sub.w	r3, r3, #510	; 0x1fe
 8000274:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000278:	fb02 f303 	mul.w	r3, r2, r3
 800027c:	4a53      	ldr	r2, [pc, #332]	; (80003cc <main+0x270>)
 800027e:	fb82 1203 	smull	r1, r2, r2, r3
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	17db      	asrs	r3, r3, #31
 8000286:	1ad3      	subs	r3, r2, r3
 8000288:	4a51      	ldr	r2, [pc, #324]	; (80003d0 <main+0x274>)
 800028a:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, ccr_value);
 800028c:	4b50      	ldr	r3, [pc, #320]	; (80003d0 <main+0x274>)
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	4b48      	ldr	r3, [pc, #288]	; (80003b4 <main+0x258>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, ccr_value);
 8000296:	4b4e      	ldr	r3, [pc, #312]	; (80003d0 <main+0x274>)
 8000298:	681a      	ldr	r2, [r3, #0]
 800029a:	4b46      	ldr	r3, [pc, #280]	; (80003b4 <main+0x258>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	639a      	str	r2, [r3, #56]	; 0x38
 80002a0:	e7a5      	b.n	80001ee <main+0x92>
	  // xe chay lui
	  }else if(adc_value[0] < 490)
 80002a2:	4b49      	ldr	r3, [pc, #292]	; (80003c8 <main+0x26c>)
 80002a4:	881b      	ldrh	r3, [r3, #0]
 80002a6:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 80002aa:	d22f      	bcs.n	800030c <main+0x1b0>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2110      	movs	r1, #16
 80002b0:	4842      	ldr	r0, [pc, #264]	; (80003bc <main+0x260>)
 80002b2:	f000 fecf 	bl	8001054 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2120      	movs	r1, #32
 80002ba:	4840      	ldr	r0, [pc, #256]	; (80003bc <main+0x260>)
 80002bc:	f000 feca 	bl	8001054 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80002c0:	2201      	movs	r2, #1
 80002c2:	2140      	movs	r1, #64	; 0x40
 80002c4:	483d      	ldr	r0, [pc, #244]	; (80003bc <main+0x260>)
 80002c6:	f000 fec5 	bl	8001054 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2180      	movs	r1, #128	; 0x80
 80002ce:	483b      	ldr	r0, [pc, #236]	; (80003bc <main+0x260>)
 80002d0:	f000 fec0 	bl	8001054 <HAL_GPIO_WritePin>
		  ccr_value = ((adc_value[0] * (-1) + 502 ) * 7999) / 502;
 80002d4:	4b3c      	ldr	r3, [pc, #240]	; (80003c8 <main+0x26c>)
 80002d6:	881b      	ldrh	r3, [r3, #0]
 80002d8:	f5c3 73fb 	rsb	r3, r3, #502	; 0x1f6
 80002dc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002e0:	fb02 f303 	mul.w	r3, r2, r3
 80002e4:	4a3b      	ldr	r2, [pc, #236]	; (80003d4 <main+0x278>)
 80002e6:	fb82 1203 	smull	r1, r2, r2, r3
 80002ea:	441a      	add	r2, r3
 80002ec:	1212      	asrs	r2, r2, #8
 80002ee:	17db      	asrs	r3, r3, #31
 80002f0:	1ad3      	subs	r3, r2, r3
 80002f2:	4a37      	ldr	r2, [pc, #220]	; (80003d0 <main+0x274>)
 80002f4:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, ccr_value);
 80002f6:	4b36      	ldr	r3, [pc, #216]	; (80003d0 <main+0x274>)
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	4b2e      	ldr	r3, [pc, #184]	; (80003b4 <main+0x258>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, ccr_value);
 8000300:	4b33      	ldr	r3, [pc, #204]	; (80003d0 <main+0x274>)
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	4b2b      	ldr	r3, [pc, #172]	; (80003b4 <main+0x258>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	639a      	str	r2, [r3, #56]	; 0x38
 800030a:	e770      	b.n	80001ee <main+0x92>
	  // xe re phai
	  }else if(adc_value[1] > 506)
 800030c:	4b2e      	ldr	r3, [pc, #184]	; (80003c8 <main+0x26c>)
 800030e:	885b      	ldrh	r3, [r3, #2]
 8000310:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8000314:	d923      	bls.n	800035e <main+0x202>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000316:	2200      	movs	r2, #0
 8000318:	2110      	movs	r1, #16
 800031a:	4828      	ldr	r0, [pc, #160]	; (80003bc <main+0x260>)
 800031c:	f000 fe9a 	bl	8001054 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000320:	2201      	movs	r2, #1
 8000322:	2120      	movs	r1, #32
 8000324:	4825      	ldr	r0, [pc, #148]	; (80003bc <main+0x260>)
 8000326:	f000 fe95 	bl	8001054 <HAL_GPIO_WritePin>
		  ccr_value = ((adc_value[1] - 506) * 7999) / 517;
 800032a:	4b27      	ldr	r3, [pc, #156]	; (80003c8 <main+0x26c>)
 800032c:	885b      	ldrh	r3, [r3, #2]
 800032e:	f5a3 73fd 	sub.w	r3, r3, #506	; 0x1fa
 8000332:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000336:	fb02 f303 	mul.w	r3, r2, r3
 800033a:	4a27      	ldr	r2, [pc, #156]	; (80003d8 <main+0x27c>)
 800033c:	fb82 1203 	smull	r1, r2, r2, r3
 8000340:	1192      	asrs	r2, r2, #6
 8000342:	17db      	asrs	r3, r3, #31
 8000344:	1ad3      	subs	r3, r2, r3
 8000346:	4a22      	ldr	r2, [pc, #136]	; (80003d0 <main+0x274>)
 8000348:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, ccr_value);
 800034a:	4b21      	ldr	r3, [pc, #132]	; (80003d0 <main+0x274>)
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <main+0x258>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 8000354:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <main+0x258>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2200      	movs	r2, #0
 800035a:	639a      	str	r2, [r3, #56]	; 0x38
 800035c:	e747      	b.n	80001ee <main+0x92>
		  // xe re trai
	  }else if(adc_value[1] < 488)
 800035e:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <main+0x26c>)
 8000360:	885b      	ldrh	r3, [r3, #2]
 8000362:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8000366:	f4bf af42 	bcs.w	80001ee <main+0x92>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800036a:	2200      	movs	r2, #0
 800036c:	2140      	movs	r1, #64	; 0x40
 800036e:	4813      	ldr	r0, [pc, #76]	; (80003bc <main+0x260>)
 8000370:	f000 fe70 	bl	8001054 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000374:	2201      	movs	r2, #1
 8000376:	2180      	movs	r1, #128	; 0x80
 8000378:	4810      	ldr	r0, [pc, #64]	; (80003bc <main+0x260>)
 800037a:	f000 fe6b 	bl	8001054 <HAL_GPIO_WritePin>
		  ccr_value = ((adc_value[1] * (-1) + 495 ) * 7999) / 495;
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <main+0x26c>)
 8000380:	885b      	ldrh	r3, [r3, #2]
 8000382:	f5c3 73f7 	rsb	r3, r3, #494	; 0x1ee
 8000386:	3301      	adds	r3, #1
 8000388:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800038c:	fb02 f303 	mul.w	r3, r2, r3
 8000390:	4a12      	ldr	r2, [pc, #72]	; (80003dc <main+0x280>)
 8000392:	fb82 1203 	smull	r1, r2, r2, r3
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	17db      	asrs	r3, r3, #31
 800039a:	1ad3      	subs	r3, r2, r3
 800039c:	4a0c      	ldr	r2, [pc, #48]	; (80003d0 <main+0x274>)
 800039e:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 80003a0:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <main+0x258>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	2200      	movs	r2, #0
 80003a6:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, ccr_value);
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <main+0x274>)
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	4b01      	ldr	r3, [pc, #4]	; (80003b4 <main+0x258>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	639a      	str	r2, [r3, #56]	; 0x38
	  if(NRF24_available())
 80003b2:	e71c      	b.n	80001ee <main+0x92>
 80003b4:	20000228 	.word	0x20000228
 80003b8:	20000150 	.word	0x20000150
 80003bc:	40010800 	.word	0x40010800
 80003c0:	200001e0 	.word	0x200001e0
 80003c4:	20000000 	.word	0x20000000
 80003c8:	200001dc 	.word	0x200001dc
 80003cc:	7fc01ff1 	.word	0x7fc01ff1
 80003d0:	20000224 	.word	0x20000224
 80003d4:	828cbfbf 	.word	0x828cbfbf
 80003d8:	1fb0c611 	.word	0x1fb0c611
 80003dc:	21195767 	.word	0x21195767

080003e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b090      	sub	sp, #64	; 0x40
 80003e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e6:	f107 0318 	add.w	r3, r7, #24
 80003ea:	2228      	movs	r2, #40	; 0x28
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f004 f86e 	bl	80044d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
 8000400:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000402:	2301      	movs	r3, #1
 8000404:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000406:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800040c:	2300      	movs	r3, #0
 800040e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000410:	f107 0318 	add.w	r3, r7, #24
 8000414:	4618      	mov	r0, r3
 8000416:	f000 fe35 	bl	8001084 <HAL_RCC_OscConfig>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000420:	f000 f970 	bl	8000704 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000424:	230f      	movs	r3, #15
 8000426:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000428:	2301      	movs	r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	2100      	movs	r1, #0
 800043c:	4618      	mov	r0, r3
 800043e:	f001 f8a1 	bl	8001584 <HAL_RCC_ClockConfig>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000448:	f000 f95c 	bl	8000704 <Error_Handler>
  }
}
 800044c:	bf00      	nop
 800044e:	3740      	adds	r7, #64	; 0x40
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000458:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <MX_SPI2_Init+0x64>)
 800045a:	4a18      	ldr	r2, [pc, #96]	; (80004bc <MX_SPI2_Init+0x68>)
 800045c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800045e:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <MX_SPI2_Init+0x64>)
 8000460:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000464:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <MX_SPI2_Init+0x64>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <MX_SPI2_Init+0x64>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <MX_SPI2_Init+0x64>)
 8000474:	2200      	movs	r2, #0
 8000476:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_SPI2_Init+0x64>)
 800047a:	2200      	movs	r2, #0
 800047c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <MX_SPI2_Init+0x64>)
 8000480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000484:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <MX_SPI2_Init+0x64>)
 8000488:	2208      	movs	r2, #8
 800048a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800048c:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <MX_SPI2_Init+0x64>)
 800048e:	2200      	movs	r2, #0
 8000490:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000492:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <MX_SPI2_Init+0x64>)
 8000494:	2200      	movs	r2, #0
 8000496:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <MX_SPI2_Init+0x64>)
 800049a:	2200      	movs	r2, #0
 800049c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_SPI2_Init+0x64>)
 80004a0:	220a      	movs	r2, #10
 80004a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004a4:	4804      	ldr	r0, [pc, #16]	; (80004b8 <MX_SPI2_Init+0x64>)
 80004a6:	f001 fa07 	bl	80018b8 <HAL_SPI_Init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80004b0:	f000 f928 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000150 	.word	0x20000150
 80004bc:	40003800 	.word	0x40003800

080004c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b096      	sub	sp, #88	; 0x58
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]
 80004ee:	615a      	str	r2, [r3, #20]
 80004f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2220      	movs	r2, #32
 80004f6:	2100      	movs	r1, #0
 80004f8:	4618      	mov	r0, r3
 80004fa:	f003 ffe9 	bl	80044d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004fe:	4b44      	ldr	r3, [pc, #272]	; (8000610 <MX_TIM1_Init+0x150>)
 8000500:	4a44      	ldr	r2, [pc, #272]	; (8000614 <MX_TIM1_Init+0x154>)
 8000502:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000504:	4b42      	ldr	r3, [pc, #264]	; (8000610 <MX_TIM1_Init+0x150>)
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050a:	4b41      	ldr	r3, [pc, #260]	; (8000610 <MX_TIM1_Init+0x150>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7999;
 8000510:	4b3f      	ldr	r3, [pc, #252]	; (8000610 <MX_TIM1_Init+0x150>)
 8000512:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000516:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000518:	4b3d      	ldr	r3, [pc, #244]	; (8000610 <MX_TIM1_Init+0x150>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800051e:	4b3c      	ldr	r3, [pc, #240]	; (8000610 <MX_TIM1_Init+0x150>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000524:	4b3a      	ldr	r3, [pc, #232]	; (8000610 <MX_TIM1_Init+0x150>)
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800052a:	4839      	ldr	r0, [pc, #228]	; (8000610 <MX_TIM1_Init+0x150>)
 800052c:	f001 ff30 	bl	8002390 <HAL_TIM_Base_Init>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000536:	f000 f8e5 	bl	8000704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800053a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800053e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000540:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000544:	4619      	mov	r1, r3
 8000546:	4832      	ldr	r0, [pc, #200]	; (8000610 <MX_TIM1_Init+0x150>)
 8000548:	f002 f92a 	bl	80027a0 <HAL_TIM_ConfigClockSource>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000552:	f000 f8d7 	bl	8000704 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000556:	482e      	ldr	r0, [pc, #184]	; (8000610 <MX_TIM1_Init+0x150>)
 8000558:	f001 ff69 	bl	800242e <HAL_TIM_PWM_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000562:	f000 f8cf 	bl	8000704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000566:	2300      	movs	r3, #0
 8000568:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800056a:	2300      	movs	r3, #0
 800056c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800056e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000572:	4619      	mov	r1, r3
 8000574:	4826      	ldr	r0, [pc, #152]	; (8000610 <MX_TIM1_Init+0x150>)
 8000576:	f002 fc7b 	bl	8002e70 <HAL_TIMEx_MasterConfigSynchronization>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000580:	f000 f8c0 	bl	8000704 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000584:	2360      	movs	r3, #96	; 0x60
 8000586:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800058c:	2300      	movs	r3, #0
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000590:	2300      	movs	r3, #0
 8000592:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000594:	2300      	movs	r3, #0
 8000596:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000598:	2300      	movs	r3, #0
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800059c:	2300      	movs	r3, #0
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a4:	2200      	movs	r2, #0
 80005a6:	4619      	mov	r1, r3
 80005a8:	4819      	ldr	r0, [pc, #100]	; (8000610 <MX_TIM1_Init+0x150>)
 80005aa:	f002 f83b 	bl	8002624 <HAL_TIM_PWM_ConfigChannel>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80005b4:	f000 f8a6 	bl	8000704 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005bc:	2204      	movs	r2, #4
 80005be:	4619      	mov	r1, r3
 80005c0:	4813      	ldr	r0, [pc, #76]	; (8000610 <MX_TIM1_Init+0x150>)
 80005c2:	f002 f82f 	bl	8002624 <HAL_TIM_PWM_ConfigChannel>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80005cc:	f000 f89a 	bl	8000704 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4619      	mov	r1, r3
 80005f2:	4807      	ldr	r0, [pc, #28]	; (8000610 <MX_TIM1_Init+0x150>)
 80005f4:	f002 fc9a 	bl	8002f2c <HAL_TIMEx_ConfigBreakDeadTime>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80005fe:	f000 f881 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000602:	4803      	ldr	r0, [pc, #12]	; (8000610 <MX_TIM1_Init+0x150>)
 8000604:	f000 f920 	bl	8000848 <HAL_TIM_MspPostInit>

}
 8000608:	bf00      	nop
 800060a:	3758      	adds	r7, #88	; 0x58
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000228 	.word	0x20000228
 8000614:	40012c00 	.word	0x40012c00

08000618 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_USART1_UART_Init+0x50>)
 8000620:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000628:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000650:	f002 fcbd 	bl	8002fce <HAL_UART_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800065a:	f000 f853 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200001e0 	.word	0x200001e0
 8000668:	40013800 	.word	0x40013800

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000680:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <MX_GPIO_Init+0x90>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a1d      	ldr	r2, [pc, #116]	; (80006fc <MX_GPIO_Init+0x90>)
 8000686:	f043 0320 	orr.w	r3, r3, #32
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_GPIO_Init+0x90>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0320 	and.w	r3, r3, #32
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <MX_GPIO_Init+0x90>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a17      	ldr	r2, [pc, #92]	; (80006fc <MX_GPIO_Init+0x90>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_GPIO_Init+0x90>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0304 	and.w	r3, r3, #4
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_GPIO_Init+0x90>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a11      	ldr	r2, [pc, #68]	; (80006fc <MX_GPIO_Init+0x90>)
 80006b6:	f043 0308 	orr.w	r3, r3, #8
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_GPIO_Init+0x90>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0308 	and.w	r3, r3, #8
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80006c8:	2200      	movs	r2, #0
 80006ca:	f641 01f0 	movw	r1, #6384	; 0x18f0
 80006ce:	480c      	ldr	r0, [pc, #48]	; (8000700 <MX_GPIO_Init+0x94>)
 80006d0:	f000 fcc0 	bl	8001054 <HAL_GPIO_WritePin>
                          |cs_Pin|csn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           cs_Pin csn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80006d4:	f641 03f0 	movw	r3, #6384	; 0x18f0
 80006d8:	613b      	str	r3, [r7, #16]
                          |cs_Pin|csn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2302      	movs	r3, #2
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4619      	mov	r1, r3
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_GPIO_Init+0x94>)
 80006ee:	f000 fb2d 	bl	8000d4c <HAL_GPIO_Init>

}
 80006f2:	bf00      	nop
 80006f4:	3720      	adds	r7, #32
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010800 	.word	0x40010800

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_MspInit+0x5c>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	4a14      	ldr	r2, [pc, #80]	; (800076c <HAL_MspInit+0x5c>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6193      	str	r3, [r2, #24]
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_MspInit+0x5c>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_MspInit+0x5c>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	4a0e      	ldr	r2, [pc, #56]	; (800076c <HAL_MspInit+0x5c>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000738:	61d3      	str	r3, [r2, #28]
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_MspInit+0x5c>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <HAL_MspInit+0x60>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	4a04      	ldr	r2, [pc, #16]	; (8000770 <HAL_MspInit+0x60>)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	40021000 	.word	0x40021000
 8000770:	40010000 	.word	0x40010000

08000774 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <HAL_SPI_MspInit+0x8c>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d131      	bne.n	80007f8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <HAL_SPI_MspInit+0x90>)
 8000796:	69db      	ldr	r3, [r3, #28]
 8000798:	4a1a      	ldr	r2, [pc, #104]	; (8000804 <HAL_SPI_MspInit+0x90>)
 800079a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079e:	61d3      	str	r3, [r2, #28]
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <HAL_SPI_MspInit+0x90>)
 80007a2:	69db      	ldr	r3, [r3, #28]
 80007a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <HAL_SPI_MspInit+0x90>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a14      	ldr	r2, [pc, #80]	; (8000804 <HAL_SPI_MspInit+0x90>)
 80007b2:	f043 0308 	orr.w	r3, r3, #8
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_SPI_MspInit+0x90>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0308 	and.w	r3, r3, #8
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80007c4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80007c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	4619      	mov	r1, r3
 80007d8:	480b      	ldr	r0, [pc, #44]	; (8000808 <HAL_SPI_MspInit+0x94>)
 80007da:	f000 fab7 	bl	8000d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	4619      	mov	r1, r3
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <HAL_SPI_MspInit+0x94>)
 80007f4:	f000 faaa 	bl	8000d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80007f8:	bf00      	nop
 80007fa:	3720      	adds	r7, #32
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40003800 	.word	0x40003800
 8000804:	40021000 	.word	0x40021000
 8000808:	40010c00 	.word	0x40010c00

0800080c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a09      	ldr	r2, [pc, #36]	; (8000840 <HAL_TIM_Base_MspInit+0x34>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d10b      	bne.n	8000836 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_TIM_Base_MspInit+0x38>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_TIM_Base_MspInit+0x38>)
 8000824:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000828:	6193      	str	r3, [r2, #24]
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_TIM_Base_MspInit+0x38>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	40012c00 	.word	0x40012c00
 8000844:	40021000 	.word	0x40021000

08000848 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <HAL_TIM_MspPostInit+0x5c>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d118      	bne.n	800089a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_TIM_MspPostInit+0x60>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <HAL_TIM_MspPostInit+0x60>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <HAL_TIM_MspPostInit+0x60>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000880:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000884:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2302      	movs	r3, #2
 800088c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <HAL_TIM_MspPostInit+0x64>)
 8000896:	f000 fa59 	bl	8000d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800089a:	bf00      	nop
 800089c:	3720      	adds	r7, #32
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40012c00 	.word	0x40012c00
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40010800 	.word	0x40010800

080008b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a22      	ldr	r2, [pc, #136]	; (8000954 <HAL_UART_MspInit+0xa4>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d13d      	bne.n	800094c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <HAL_UART_MspInit+0xa8>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a20      	ldr	r2, [pc, #128]	; (8000958 <HAL_UART_MspInit+0xa8>)
 80008d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <HAL_UART_MspInit+0xa8>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <HAL_UART_MspInit+0xa8>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a1a      	ldr	r2, [pc, #104]	; (8000958 <HAL_UART_MspInit+0xa8>)
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <HAL_UART_MspInit+0xa8>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0308 	and.w	r3, r3, #8
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000900:	2340      	movs	r3, #64	; 0x40
 8000902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4812      	ldr	r0, [pc, #72]	; (800095c <HAL_UART_MspInit+0xac>)
 8000914:	f000 fa1a 	bl	8000d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	480c      	ldr	r0, [pc, #48]	; (800095c <HAL_UART_MspInit+0xac>)
 800092c:	f000 fa0e 	bl	8000d4c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_UART_MspInit+0xb0>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
 8000946:	4a06      	ldr	r2, [pc, #24]	; (8000960 <HAL_UART_MspInit+0xb0>)
 8000948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	; 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40013800 	.word	0x40013800
 8000958:	40021000 	.word	0x40021000
 800095c:	40010c00 	.word	0x40010c00
 8000960:	40010000 	.word	0x40010000

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <NMI_Handler+0x4>

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler+0x4>

08000976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler+0x4>

08000982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr

0800098e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr

0800099a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr

080009a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009aa:	f000 f8ab 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009bc:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <_sbrk+0x5c>)
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <_sbrk+0x60>)
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d102      	bne.n	80009d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <_sbrk+0x64>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <_sbrk+0x68>)
 80009d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <_sbrk+0x64>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d207      	bcs.n	80009f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e4:	f003 fd3c 	bl	8004460 <__errno>
 80009e8:	4603      	mov	r3, r0
 80009ea:	220c      	movs	r2, #12
 80009ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	e009      	b.n	8000a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <_sbrk+0x64>)
 8000a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a06:	68fb      	ldr	r3, [r7, #12]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20005000 	.word	0x20005000
 8000a14:	00000400 	.word	0x00000400
 8000a18:	20000094 	.word	0x20000094
 8000a1c:	20000288 	.word	0x20000288

08000a20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	; (8000a64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	; (8000a70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a52:	f7ff ffe5 	bl	8000a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a56:	f003 fd09 	bl	800446c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a5a:	f7ff fb7f 	bl	800015c <main>
  bx lr
 8000a5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000a68:	08005308 	.word	0x08005308
  ldr r2, =_sbss
 8000a6c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000a70:	20000284 	.word	0x20000284

08000a74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC1_2_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_Init+0x28>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_Init+0x28>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 f92b 	bl	8000ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8e:	200f      	movs	r0, #15
 8000a90:	f000 f808 	bl	8000aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a94:	f7ff fe3c 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x54>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_InitTick+0x58>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f935 	bl	8000d32 <HAL_SYSTICK_Config>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00e      	b.n	8000af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d80a      	bhi.n	8000aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f000 f90b 	bl	8000cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_InitTick+0x5c>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000010 	.word	0x20000010
 8000b00:	2000000c 	.word	0x2000000c

08000b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_IncTick+0x1c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_IncTick+0x20>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a03      	ldr	r2, [pc, #12]	; (8000b24 <HAL_IncTick+0x20>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	20000010 	.word	0x20000010
 8000b24:	20000270 	.word	0x20000270

08000b28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b02      	ldr	r3, [pc, #8]	; (8000b38 <HAL_GetTick+0x10>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	20000270 	.word	0x20000270

08000b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b44:	f7ff fff0 	bl	8000b28 <HAL_GetTick>
 8000b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b54:	d005      	beq.n	8000b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_Delay+0x44>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b62:	bf00      	nop
 8000b64:	f7ff ffe0 	bl	8000b28 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d8f7      	bhi.n	8000b64 <HAL_Delay+0x28>
  {
  }
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000010 	.word	0x20000010

08000b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	; (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f1c3 0307 	rsb	r3, r3, #7
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf28      	it	cs
 8000c5a:	2304      	movcs	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3304      	adds	r3, #4
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d902      	bls.n	8000c6c <NVIC_EncodePriority+0x30>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	e000      	b.n	8000c6e <NVIC_EncodePriority+0x32>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43d9      	mvns	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4313      	orrs	r3, r2
         );
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb0:	d301      	bcc.n	8000cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00f      	b.n	8000cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <SysTick_Config+0x40>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cbe:	210f      	movs	r1, #15
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f7ff ff90 	bl	8000be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <SysTick_Config+0x40>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <SysTick_Config+0x40>)
 8000cd0:	2207      	movs	r2, #7
 8000cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	e000e010 	.word	0xe000e010

08000ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ff49 	bl	8000b84 <__NVIC_SetPriorityGrouping>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b086      	sub	sp, #24
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d0c:	f7ff ff5e 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 8000d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	6978      	ldr	r0, [r7, #20]
 8000d18:	f7ff ff90 	bl	8000c3c <NVIC_EncodePriority>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff5f 	bl	8000be8 <__NVIC_SetPriority>
}
 8000d2a:	bf00      	nop
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ffb0 	bl	8000ca0 <SysTick_Config>
 8000d40:	4603      	mov	r3, r0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b08b      	sub	sp, #44	; 0x2c
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5e:	e169      	b.n	8001034 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d60:	2201      	movs	r2, #1
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	f040 8158 	bne.w	800102e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	4a9a      	ldr	r2, [pc, #616]	; (8000fec <HAL_GPIO_Init+0x2a0>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d05e      	beq.n	8000e46 <HAL_GPIO_Init+0xfa>
 8000d88:	4a98      	ldr	r2, [pc, #608]	; (8000fec <HAL_GPIO_Init+0x2a0>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d875      	bhi.n	8000e7a <HAL_GPIO_Init+0x12e>
 8000d8e:	4a98      	ldr	r2, [pc, #608]	; (8000ff0 <HAL_GPIO_Init+0x2a4>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d058      	beq.n	8000e46 <HAL_GPIO_Init+0xfa>
 8000d94:	4a96      	ldr	r2, [pc, #600]	; (8000ff0 <HAL_GPIO_Init+0x2a4>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d86f      	bhi.n	8000e7a <HAL_GPIO_Init+0x12e>
 8000d9a:	4a96      	ldr	r2, [pc, #600]	; (8000ff4 <HAL_GPIO_Init+0x2a8>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d052      	beq.n	8000e46 <HAL_GPIO_Init+0xfa>
 8000da0:	4a94      	ldr	r2, [pc, #592]	; (8000ff4 <HAL_GPIO_Init+0x2a8>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d869      	bhi.n	8000e7a <HAL_GPIO_Init+0x12e>
 8000da6:	4a94      	ldr	r2, [pc, #592]	; (8000ff8 <HAL_GPIO_Init+0x2ac>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d04c      	beq.n	8000e46 <HAL_GPIO_Init+0xfa>
 8000dac:	4a92      	ldr	r2, [pc, #584]	; (8000ff8 <HAL_GPIO_Init+0x2ac>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d863      	bhi.n	8000e7a <HAL_GPIO_Init+0x12e>
 8000db2:	4a92      	ldr	r2, [pc, #584]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d046      	beq.n	8000e46 <HAL_GPIO_Init+0xfa>
 8000db8:	4a90      	ldr	r2, [pc, #576]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d85d      	bhi.n	8000e7a <HAL_GPIO_Init+0x12e>
 8000dbe:	2b12      	cmp	r3, #18
 8000dc0:	d82a      	bhi.n	8000e18 <HAL_GPIO_Init+0xcc>
 8000dc2:	2b12      	cmp	r3, #18
 8000dc4:	d859      	bhi.n	8000e7a <HAL_GPIO_Init+0x12e>
 8000dc6:	a201      	add	r2, pc, #4	; (adr r2, 8000dcc <HAL_GPIO_Init+0x80>)
 8000dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dcc:	08000e47 	.word	0x08000e47
 8000dd0:	08000e21 	.word	0x08000e21
 8000dd4:	08000e33 	.word	0x08000e33
 8000dd8:	08000e75 	.word	0x08000e75
 8000ddc:	08000e7b 	.word	0x08000e7b
 8000de0:	08000e7b 	.word	0x08000e7b
 8000de4:	08000e7b 	.word	0x08000e7b
 8000de8:	08000e7b 	.word	0x08000e7b
 8000dec:	08000e7b 	.word	0x08000e7b
 8000df0:	08000e7b 	.word	0x08000e7b
 8000df4:	08000e7b 	.word	0x08000e7b
 8000df8:	08000e7b 	.word	0x08000e7b
 8000dfc:	08000e7b 	.word	0x08000e7b
 8000e00:	08000e7b 	.word	0x08000e7b
 8000e04:	08000e7b 	.word	0x08000e7b
 8000e08:	08000e7b 	.word	0x08000e7b
 8000e0c:	08000e7b 	.word	0x08000e7b
 8000e10:	08000e29 	.word	0x08000e29
 8000e14:	08000e3d 	.word	0x08000e3d
 8000e18:	4a79      	ldr	r2, [pc, #484]	; (8001000 <HAL_GPIO_Init+0x2b4>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d013      	beq.n	8000e46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e1e:	e02c      	b.n	8000e7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	623b      	str	r3, [r7, #32]
          break;
 8000e26:	e029      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	623b      	str	r3, [r7, #32]
          break;
 8000e30:	e024      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	3308      	adds	r3, #8
 8000e38:	623b      	str	r3, [r7, #32]
          break;
 8000e3a:	e01f      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	330c      	adds	r3, #12
 8000e42:	623b      	str	r3, [r7, #32]
          break;
 8000e44:	e01a      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d102      	bne.n	8000e54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	623b      	str	r3, [r7, #32]
          break;
 8000e52:	e013      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d105      	bne.n	8000e68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e5c:	2308      	movs	r3, #8
 8000e5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	69fa      	ldr	r2, [r7, #28]
 8000e64:	611a      	str	r2, [r3, #16]
          break;
 8000e66:	e009      	b.n	8000e7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e68:	2308      	movs	r3, #8
 8000e6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69fa      	ldr	r2, [r7, #28]
 8000e70:	615a      	str	r2, [r3, #20]
          break;
 8000e72:	e003      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
          break;
 8000e78:	e000      	b.n	8000e7c <HAL_GPIO_Init+0x130>
          break;
 8000e7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	2bff      	cmp	r3, #255	; 0xff
 8000e80:	d801      	bhi.n	8000e86 <HAL_GPIO_Init+0x13a>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	e001      	b.n	8000e8a <HAL_GPIO_Init+0x13e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	2bff      	cmp	r3, #255	; 0xff
 8000e90:	d802      	bhi.n	8000e98 <HAL_GPIO_Init+0x14c>
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	e002      	b.n	8000e9e <HAL_GPIO_Init+0x152>
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	3b08      	subs	r3, #8
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	210f      	movs	r1, #15
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	401a      	ands	r2, r3
 8000eb0:	6a39      	ldr	r1, [r7, #32]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 80b1 	beq.w	800102e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ecc:	4b4d      	ldr	r3, [pc, #308]	; (8001004 <HAL_GPIO_Init+0x2b8>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a4c      	ldr	r2, [pc, #304]	; (8001004 <HAL_GPIO_Init+0x2b8>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b4a      	ldr	r3, [pc, #296]	; (8001004 <HAL_GPIO_Init+0x2b8>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ee4:	4a48      	ldr	r2, [pc, #288]	; (8001008 <HAL_GPIO_Init+0x2bc>)
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3302      	adds	r3, #2
 8000eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	4013      	ands	r3, r2
 8000f06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a40      	ldr	r2, [pc, #256]	; (800100c <HAL_GPIO_Init+0x2c0>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d013      	beq.n	8000f38 <HAL_GPIO_Init+0x1ec>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a3f      	ldr	r2, [pc, #252]	; (8001010 <HAL_GPIO_Init+0x2c4>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d00d      	beq.n	8000f34 <HAL_GPIO_Init+0x1e8>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a3e      	ldr	r2, [pc, #248]	; (8001014 <HAL_GPIO_Init+0x2c8>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d007      	beq.n	8000f30 <HAL_GPIO_Init+0x1e4>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a3d      	ldr	r2, [pc, #244]	; (8001018 <HAL_GPIO_Init+0x2cc>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d101      	bne.n	8000f2c <HAL_GPIO_Init+0x1e0>
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e006      	b.n	8000f3a <HAL_GPIO_Init+0x1ee>
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	e004      	b.n	8000f3a <HAL_GPIO_Init+0x1ee>
 8000f30:	2302      	movs	r3, #2
 8000f32:	e002      	b.n	8000f3a <HAL_GPIO_Init+0x1ee>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <HAL_GPIO_Init+0x1ee>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f3c:	f002 0203 	and.w	r2, r2, #3
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	4093      	lsls	r3, r2
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f4a:	492f      	ldr	r1, [pc, #188]	; (8001008 <HAL_GPIO_Init+0x2bc>)
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3302      	adds	r3, #2
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d006      	beq.n	8000f72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f64:	4b2d      	ldr	r3, [pc, #180]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	492c      	ldr	r1, [pc, #176]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	600b      	str	r3, [r1, #0]
 8000f70:	e006      	b.n	8000f80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f72:	4b2a      	ldr	r3, [pc, #168]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	4928      	ldr	r1, [pc, #160]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d006      	beq.n	8000f9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	4922      	ldr	r1, [pc, #136]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	604b      	str	r3, [r1, #4]
 8000f98:	e006      	b.n	8000fa8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f9a:	4b20      	ldr	r3, [pc, #128]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	491e      	ldr	r1, [pc, #120]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d006      	beq.n	8000fc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	4918      	ldr	r1, [pc, #96]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	608b      	str	r3, [r1, #8]
 8000fc0:	e006      	b.n	8000fd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	4914      	ldr	r1, [pc, #80]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000fcc:	4013      	ands	r3, r2
 8000fce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d021      	beq.n	8001020 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	490e      	ldr	r1, [pc, #56]	; (800101c <HAL_GPIO_Init+0x2d0>)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	60cb      	str	r3, [r1, #12]
 8000fe8:	e021      	b.n	800102e <HAL_GPIO_Init+0x2e2>
 8000fea:	bf00      	nop
 8000fec:	10320000 	.word	0x10320000
 8000ff0:	10310000 	.word	0x10310000
 8000ff4:	10220000 	.word	0x10220000
 8000ff8:	10210000 	.word	0x10210000
 8000ffc:	10120000 	.word	0x10120000
 8001000:	10110000 	.word	0x10110000
 8001004:	40021000 	.word	0x40021000
 8001008:	40010000 	.word	0x40010000
 800100c:	40010800 	.word	0x40010800
 8001010:	40010c00 	.word	0x40010c00
 8001014:	40011000 	.word	0x40011000
 8001018:	40011400 	.word	0x40011400
 800101c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_GPIO_Init+0x304>)
 8001022:	68da      	ldr	r2, [r3, #12]
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	43db      	mvns	r3, r3
 8001028:	4909      	ldr	r1, [pc, #36]	; (8001050 <HAL_GPIO_Init+0x304>)
 800102a:	4013      	ands	r3, r2
 800102c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	3301      	adds	r3, #1
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	fa22 f303 	lsr.w	r3, r2, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	f47f ae8e 	bne.w	8000d60 <HAL_GPIO_Init+0x14>
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	372c      	adds	r7, #44	; 0x2c
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	40010400 	.word	0x40010400

08001054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	807b      	strh	r3, [r7, #2]
 8001060:	4613      	mov	r3, r2
 8001062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001064:	787b      	ldrb	r3, [r7, #1]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001070:	e003      	b.n	800107a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001072:	887b      	ldrh	r3, [r7, #2]
 8001074:	041a      	lsls	r2, r3, #16
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	611a      	str	r2, [r3, #16]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e26c      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 8087 	beq.w	80011b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010a4:	4b92      	ldr	r3, [pc, #584]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 030c 	and.w	r3, r3, #12
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d00c      	beq.n	80010ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010b0:	4b8f      	ldr	r3, [pc, #572]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 030c 	and.w	r3, r3, #12
 80010b8:	2b08      	cmp	r3, #8
 80010ba:	d112      	bne.n	80010e2 <HAL_RCC_OscConfig+0x5e>
 80010bc:	4b8c      	ldr	r3, [pc, #560]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c8:	d10b      	bne.n	80010e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ca:	4b89      	ldr	r3, [pc, #548]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d06c      	beq.n	80011b0 <HAL_RCC_OscConfig+0x12c>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d168      	bne.n	80011b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e246      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ea:	d106      	bne.n	80010fa <HAL_RCC_OscConfig+0x76>
 80010ec:	4b80      	ldr	r3, [pc, #512]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a7f      	ldr	r2, [pc, #508]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	e02e      	b.n	8001158 <HAL_RCC_OscConfig+0xd4>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10c      	bne.n	800111c <HAL_RCC_OscConfig+0x98>
 8001102:	4b7b      	ldr	r3, [pc, #492]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a7a      	ldr	r2, [pc, #488]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	4b78      	ldr	r3, [pc, #480]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a77      	ldr	r2, [pc, #476]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e01d      	b.n	8001158 <HAL_RCC_OscConfig+0xd4>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001124:	d10c      	bne.n	8001140 <HAL_RCC_OscConfig+0xbc>
 8001126:	4b72      	ldr	r3, [pc, #456]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a71      	ldr	r2, [pc, #452]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800112c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b6f      	ldr	r3, [pc, #444]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a6e      	ldr	r2, [pc, #440]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e00b      	b.n	8001158 <HAL_RCC_OscConfig+0xd4>
 8001140:	4b6b      	ldr	r3, [pc, #428]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a6a      	ldr	r2, [pc, #424]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b68      	ldr	r3, [pc, #416]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a67      	ldr	r2, [pc, #412]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001156:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d013      	beq.n	8001188 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff fce2 	bl	8000b28 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001168:	f7ff fcde 	bl	8000b28 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b64      	cmp	r3, #100	; 0x64
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e1fa      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	4b5d      	ldr	r3, [pc, #372]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0xe4>
 8001186:	e014      	b.n	80011b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fcce 	bl	8000b28 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001190:	f7ff fcca 	bl	8000b28 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b64      	cmp	r3, #100	; 0x64
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e1e6      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a2:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f0      	bne.n	8001190 <HAL_RCC_OscConfig+0x10c>
 80011ae:	e000      	b.n	80011b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d063      	beq.n	8001286 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011be:	4b4c      	ldr	r3, [pc, #304]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00b      	beq.n	80011e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011ca:	4b49      	ldr	r3, [pc, #292]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d11c      	bne.n	8001210 <HAL_RCC_OscConfig+0x18c>
 80011d6:	4b46      	ldr	r3, [pc, #280]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d116      	bne.n	8001210 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	4b43      	ldr	r3, [pc, #268]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d005      	beq.n	80011fa <HAL_RCC_OscConfig+0x176>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d001      	beq.n	80011fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e1ba      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fa:	4b3d      	ldr	r3, [pc, #244]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4939      	ldr	r1, [pc, #228]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800120a:	4313      	orrs	r3, r2
 800120c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	e03a      	b.n	8001286 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d020      	beq.n	800125a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001218:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff fc83 	bl	8000b28 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001226:	f7ff fc7f 	bl	8000b28 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e19b      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001244:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4927      	ldr	r1, [pc, #156]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001254:	4313      	orrs	r3, r2
 8001256:	600b      	str	r3, [r1, #0]
 8001258:	e015      	b.n	8001286 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fc62 	bl	8000b28 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001268:	f7ff fc5e 	bl	8000b28 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e17a      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d03a      	beq.n	8001308 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d019      	beq.n	80012ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_RCC_OscConfig+0x274>)
 800129c:	2201      	movs	r2, #1
 800129e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a0:	f7ff fc42 	bl	8000b28 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a8:	f7ff fc3e 	bl	8000b28 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e15a      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f0      	beq.n	80012a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012c6:	2001      	movs	r0, #1
 80012c8:	f000 fad8 	bl	800187c <RCC_Delay>
 80012cc:	e01c      	b.n	8001308 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_RCC_OscConfig+0x274>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d4:	f7ff fc28 	bl	8000b28 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012da:	e00f      	b.n	80012fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012dc:	f7ff fc24 	bl	8000b28 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d908      	bls.n	80012fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e140      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000
 80012f4:	42420000 	.word	0x42420000
 80012f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fc:	4b9e      	ldr	r3, [pc, #632]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1e9      	bne.n	80012dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80a6 	beq.w	8001462 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131a:	4b97      	ldr	r3, [pc, #604]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10d      	bne.n	8001342 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b94      	ldr	r3, [pc, #592]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a93      	ldr	r2, [pc, #588]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	61d3      	str	r3, [r2, #28]
 8001332:	4b91      	ldr	r3, [pc, #580]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800133e:	2301      	movs	r3, #1
 8001340:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001342:	4b8e      	ldr	r3, [pc, #568]	; (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134a:	2b00      	cmp	r3, #0
 800134c:	d118      	bne.n	8001380 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800134e:	4b8b      	ldr	r3, [pc, #556]	; (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a8a      	ldr	r2, [pc, #552]	; (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800135a:	f7ff fbe5 	bl	8000b28 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001362:	f7ff fbe1 	bl	8000b28 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b64      	cmp	r3, #100	; 0x64
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e0fd      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	4b81      	ldr	r3, [pc, #516]	; (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d106      	bne.n	8001396 <HAL_RCC_OscConfig+0x312>
 8001388:	4b7b      	ldr	r3, [pc, #492]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	4a7a      	ldr	r2, [pc, #488]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6213      	str	r3, [r2, #32]
 8001394:	e02d      	b.n	80013f2 <HAL_RCC_OscConfig+0x36e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x334>
 800139e:	4b76      	ldr	r3, [pc, #472]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4a75      	ldr	r2, [pc, #468]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	6213      	str	r3, [r2, #32]
 80013aa:	4b73      	ldr	r3, [pc, #460]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4a72      	ldr	r2, [pc, #456]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013b0:	f023 0304 	bic.w	r3, r3, #4
 80013b4:	6213      	str	r3, [r2, #32]
 80013b6:	e01c      	b.n	80013f2 <HAL_RCC_OscConfig+0x36e>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d10c      	bne.n	80013da <HAL_RCC_OscConfig+0x356>
 80013c0:	4b6d      	ldr	r3, [pc, #436]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4a6c      	ldr	r2, [pc, #432]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	6213      	str	r3, [r2, #32]
 80013cc:	4b6a      	ldr	r3, [pc, #424]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	4a69      	ldr	r2, [pc, #420]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6213      	str	r3, [r2, #32]
 80013d8:	e00b      	b.n	80013f2 <HAL_RCC_OscConfig+0x36e>
 80013da:	4b67      	ldr	r3, [pc, #412]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	4a66      	ldr	r2, [pc, #408]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013e0:	f023 0301 	bic.w	r3, r3, #1
 80013e4:	6213      	str	r3, [r2, #32]
 80013e6:	4b64      	ldr	r3, [pc, #400]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4a63      	ldr	r2, [pc, #396]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013ec:	f023 0304 	bic.w	r3, r3, #4
 80013f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d015      	beq.n	8001426 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fb95 	bl	8000b28 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001400:	e00a      	b.n	8001418 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001402:	f7ff fb91 	bl	8000b28 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001410:	4293      	cmp	r3, r2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e0ab      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001418:	4b57      	ldr	r3, [pc, #348]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0ee      	beq.n	8001402 <HAL_RCC_OscConfig+0x37e>
 8001424:	e014      	b.n	8001450 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fb7f 	bl	8000b28 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800142c:	e00a      	b.n	8001444 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f7ff fb7b 	bl	8000b28 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f241 3288 	movw	r2, #5000	; 0x1388
 800143c:	4293      	cmp	r3, r2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e095      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001444:	4b4c      	ldr	r3, [pc, #304]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1ee      	bne.n	800142e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d105      	bne.n	8001462 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001456:	4b48      	ldr	r3, [pc, #288]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a47      	ldr	r2, [pc, #284]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800145c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001460:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 8081 	beq.w	800156e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800146c:	4b42      	ldr	r3, [pc, #264]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	2b08      	cmp	r3, #8
 8001476:	d061      	beq.n	800153c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d146      	bne.n	800150e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001480:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <HAL_RCC_OscConfig+0x4fc>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001486:	f7ff fb4f 	bl	8000b28 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148e:	f7ff fb4b 	bl	8000b28 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e067      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a0:	4b35      	ldr	r3, [pc, #212]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f0      	bne.n	800148e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b4:	d108      	bne.n	80014c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	492d      	ldr	r1, [pc, #180]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014c8:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a19      	ldr	r1, [r3, #32]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	430b      	orrs	r3, r1
 80014da:	4927      	ldr	r1, [pc, #156]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_RCC_OscConfig+0x4fc>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff fb1f 	bl	8000b28 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ee:	f7ff fb1b 	bl	8000b28 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e037      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001500:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x46a>
 800150c:	e02f      	b.n	800156e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150e:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <HAL_RCC_OscConfig+0x4fc>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fb08 	bl	8000b28 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151c:	f7ff fb04 	bl	8000b28 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e020      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x498>
 800153a:	e018      	b.n	800156e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e013      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	429a      	cmp	r2, r3
 800155a:	d106      	bne.n	800156a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001566:	429a      	cmp	r2, r3
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021000 	.word	0x40021000
 800157c:	40007000 	.word	0x40007000
 8001580:	42420060 	.word	0x42420060

08001584 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0d0      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001598:	4b6a      	ldr	r3, [pc, #424]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d910      	bls.n	80015c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b67      	ldr	r3, [pc, #412]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 0207 	bic.w	r2, r3, #7
 80015ae:	4965      	ldr	r1, [pc, #404]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b63      	ldr	r3, [pc, #396]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0b8      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d020      	beq.n	8001616 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e0:	4b59      	ldr	r3, [pc, #356]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4a58      	ldr	r2, [pc, #352]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4a52      	ldr	r2, [pc, #328]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001602:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	494d      	ldr	r1, [pc, #308]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	4313      	orrs	r3, r2
 8001614:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d040      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d107      	bne.n	800163a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	4b47      	ldr	r3, [pc, #284]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d115      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e07f      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e073      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001652:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e06b      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001662:	4b39      	ldr	r3, [pc, #228]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f023 0203 	bic.w	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4936      	ldr	r1, [pc, #216]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001674:	f7ff fa58 	bl	8000b28 <HAL_GetTick>
 8001678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167a:	e00a      	b.n	8001692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800167c:	f7ff fa54 	bl	8000b28 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	; 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e053      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 020c 	and.w	r2, r3, #12
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d1eb      	bne.n	800167c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d210      	bcs.n	80016d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 0207 	bic.w	r2, r3, #7
 80016ba:	4922      	ldr	r1, [pc, #136]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e032      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	4916      	ldr	r1, [pc, #88]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d009      	beq.n	8001712 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	490e      	ldr	r1, [pc, #56]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	4313      	orrs	r3, r2
 8001710:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001712:	f000 f821 	bl	8001758 <HAL_RCC_GetSysClockFreq>
 8001716:	4602      	mov	r2, r0
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	490a      	ldr	r1, [pc, #40]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 8001724:	5ccb      	ldrb	r3, [r1, r3]
 8001726:	fa22 f303 	lsr.w	r3, r2, r3
 800172a:	4a09      	ldr	r2, [pc, #36]	; (8001750 <HAL_RCC_ClockConfig+0x1cc>)
 800172c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_RCC_ClockConfig+0x1d0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f9b6 	bl	8000aa4 <HAL_InitTick>

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40022000 	.word	0x40022000
 8001748:	40021000 	.word	0x40021000
 800174c:	080052a4 	.word	0x080052a4
 8001750:	20000008 	.word	0x20000008
 8001754:	2000000c 	.word	0x2000000c

08001758 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001758:	b490      	push	{r4, r7}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800175e:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001760:	1d3c      	adds	r4, r7, #4
 8001762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001764:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001768:	f240 2301 	movw	r3, #513	; 0x201
 800176c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001782:	4b22      	ldr	r3, [pc, #136]	; (800180c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b04      	cmp	r3, #4
 8001790:	d002      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x40>
 8001792:	2b08      	cmp	r3, #8
 8001794:	d003      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0x46>
 8001796:	e02d      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <HAL_RCC_GetSysClockFreq+0xb8>)
 800179a:	623b      	str	r3, [r7, #32]
      break;
 800179c:	e02d      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	0c9b      	lsrs	r3, r3, #18
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017aa:	4413      	add	r3, r2
 80017ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017bc:	4b13      	ldr	r3, [pc, #76]	; (800180c <HAL_RCC_GetSysClockFreq+0xb4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	0c5b      	lsrs	r3, r3, #17
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017ca:	4413      	add	r3, r2
 80017cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017d6:	fb02 f203 	mul.w	r2, r2, r3
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
 80017e2:	e004      	b.n	80017ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017e8:	fb02 f303 	mul.w	r3, r2, r3
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	623b      	str	r3, [r7, #32]
      break;
 80017f2:	e002      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017f6:	623b      	str	r3, [r7, #32]
      break;
 80017f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017fa:	6a3b      	ldr	r3, [r7, #32]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bc90      	pop	{r4, r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	08004d50 	.word	0x08004d50
 800180c:	40021000 	.word	0x40021000
 8001810:	007a1200 	.word	0x007a1200
 8001814:	003d0900 	.word	0x003d0900

08001818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800181c:	4b02      	ldr	r3, [pc, #8]	; (8001828 <HAL_RCC_GetHCLKFreq+0x10>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	20000008 	.word	0x20000008

0800182c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001830:	f7ff fff2 	bl	8001818 <HAL_RCC_GetHCLKFreq>
 8001834:	4602      	mov	r2, r0
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	0a1b      	lsrs	r3, r3, #8
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	4903      	ldr	r1, [pc, #12]	; (8001850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001842:	5ccb      	ldrb	r3, [r1, r3]
 8001844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001848:	4618      	mov	r0, r3
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000
 8001850:	080052b4 	.word	0x080052b4

08001854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001858:	f7ff ffde 	bl	8001818 <HAL_RCC_GetHCLKFreq>
 800185c:	4602      	mov	r2, r0
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	0adb      	lsrs	r3, r3, #11
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	4903      	ldr	r1, [pc, #12]	; (8001878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800186a:	5ccb      	ldrb	r3, [r1, r3]
 800186c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	080052b4 	.word	0x080052b4

0800187c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <RCC_Delay+0x34>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <RCC_Delay+0x38>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	0a5b      	lsrs	r3, r3, #9
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001898:	bf00      	nop
  }
  while (Delay --);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1e5a      	subs	r2, r3, #1
 800189e:	60fa      	str	r2, [r7, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f9      	bne.n	8001898 <RCC_Delay+0x1c>
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	20000008 	.word	0x20000008
 80018b4:	10624dd3 	.word	0x10624dd3

080018b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e076      	b.n	80019b8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d108      	bne.n	80018e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018da:	d009      	beq.n	80018f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
 80018e2:	e005      	b.n	80018f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d106      	bne.n	8001910 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7fe ff32 	bl	8000774 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001926:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001974:	ea42 0103 	orr.w	r1, r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	0c1a      	lsrs	r2, r3, #16
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f002 0204 	and.w	r2, r2, #4
 8001996:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	69da      	ldr	r2, [r3, #28]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	4613      	mov	r3, r2
 80019ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_SPI_Transmit+0x22>
 80019de:	2302      	movs	r3, #2
 80019e0:	e126      	b.n	8001c30 <HAL_SPI_Transmit+0x270>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019ea:	f7ff f89d 	bl	8000b28 <HAL_GetTick>
 80019ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d002      	beq.n	8001a06 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a00:	2302      	movs	r3, #2
 8001a02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a04:	e10b      	b.n	8001c1e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <HAL_SPI_Transmit+0x52>
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d102      	bne.n	8001a18 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a16:	e102      	b.n	8001c1e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2200      	movs	r2, #0
 8001a24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	88fa      	ldrh	r2, [r7, #6]
 8001a30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	88fa      	ldrh	r2, [r7, #6]
 8001a36:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a5e:	d10f      	bne.n	8001a80 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a7e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8a:	2b40      	cmp	r3, #64	; 0x40
 8001a8c:	d007      	beq.n	8001a9e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001aa6:	d14b      	bne.n	8001b40 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <HAL_SPI_Transmit+0xf6>
 8001ab0:	8afb      	ldrh	r3, [r7, #22]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d13e      	bne.n	8001b34 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	881a      	ldrh	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	1c9a      	adds	r2, r3, #2
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ada:	e02b      	b.n	8001b34 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d112      	bne.n	8001b10 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	881a      	ldrh	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	1c9a      	adds	r2, r3, #2
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b0e:	e011      	b.n	8001b34 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b10:	f7ff f80a 	bl	8000b28 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d803      	bhi.n	8001b28 <HAL_SPI_Transmit+0x168>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b26:	d102      	bne.n	8001b2e <HAL_SPI_Transmit+0x16e>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d102      	bne.n	8001b34 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b32:	e074      	b.n	8001c1e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1ce      	bne.n	8001adc <HAL_SPI_Transmit+0x11c>
 8001b3e:	e04c      	b.n	8001bda <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d002      	beq.n	8001b4e <HAL_SPI_Transmit+0x18e>
 8001b48:	8afb      	ldrh	r3, [r7, #22]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d140      	bne.n	8001bd0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	330c      	adds	r3, #12
 8001b58:	7812      	ldrb	r2, [r2, #0]
 8001b5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001b74:	e02c      	b.n	8001bd0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d113      	bne.n	8001bac <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	330c      	adds	r3, #12
 8001b8e:	7812      	ldrb	r2, [r2, #0]
 8001b90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	86da      	strh	r2, [r3, #54]	; 0x36
 8001baa:	e011      	b.n	8001bd0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bac:	f7fe ffbc 	bl	8000b28 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d803      	bhi.n	8001bc4 <HAL_SPI_Transmit+0x204>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc2:	d102      	bne.n	8001bca <HAL_SPI_Transmit+0x20a>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d102      	bne.n	8001bd0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001bce:	e026      	b.n	8001c1e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1cd      	bne.n	8001b76 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	6839      	ldr	r1, [r7, #0]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 fbb8 	bl	8002354 <SPI_EndRxTxTransaction>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2220      	movs	r2, #32
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10a      	bne.n	8001c0e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	77fb      	strb	r3, [r7, #31]
 8001c1a:	e000      	b.n	8001c1e <HAL_SPI_Transmit+0x25e>
  }

error:
 8001c1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3720      	adds	r7, #32
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af02      	add	r7, sp, #8
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	4613      	mov	r3, r2
 8001c46:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c54:	d112      	bne.n	8001c7c <HAL_SPI_Receive+0x44>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10e      	bne.n	8001c7c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2204      	movs	r2, #4
 8001c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001c66:	88fa      	ldrh	r2, [r7, #6]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 f8f1 	bl	8001e5a <HAL_SPI_TransmitReceive>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	e0ea      	b.n	8001e52 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d101      	bne.n	8001c8a <HAL_SPI_Receive+0x52>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e0e3      	b.n	8001e52 <HAL_SPI_Receive+0x21a>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c92:	f7fe ff49 	bl	8000b28 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d002      	beq.n	8001caa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001ca8:	e0ca      	b.n	8001e40 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <HAL_SPI_Receive+0x7e>
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001cba:	e0c1      	b.n	8001e40 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	88fa      	ldrh	r2, [r7, #6]
 8001cd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	88fa      	ldrh	r2, [r7, #6]
 8001cda:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d02:	d10f      	bne.n	8001d24 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d22:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2e:	2b40      	cmp	r3, #64	; 0x40
 8001d30:	d007      	beq.n	8001d42 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d40:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d162      	bne.n	8001e10 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001d4a:	e02e      	b.n	8001daa <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d115      	bne.n	8001d86 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f103 020c 	add.w	r2, r3, #12
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d66:	7812      	ldrb	r2, [r2, #0]
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d84:	e011      	b.n	8001daa <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d86:	f7fe fecf 	bl	8000b28 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d803      	bhi.n	8001d9e <HAL_SPI_Receive+0x166>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9c:	d102      	bne.n	8001da4 <HAL_SPI_Receive+0x16c>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001da8:	e04a      	b.n	8001e40 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1cb      	bne.n	8001d4c <HAL_SPI_Receive+0x114>
 8001db4:	e031      	b.n	8001e1a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d113      	bne.n	8001dec <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dce:	b292      	uxth	r2, r2
 8001dd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd6:	1c9a      	adds	r2, r3, #2
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001dea:	e011      	b.n	8001e10 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dec:	f7fe fe9c 	bl	8000b28 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d803      	bhi.n	8001e04 <HAL_SPI_Receive+0x1cc>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e02:	d102      	bne.n	8001e0a <HAL_SPI_Receive+0x1d2>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d102      	bne.n	8001e10 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001e0e:	e017      	b.n	8001e40 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1cd      	bne.n	8001db6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	6839      	ldr	r1, [r7, #0]
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 fa46 	bl	80022b0 <SPI_EndRxTransaction>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	75fb      	strb	r3, [r7, #23]
 8001e3c:	e000      	b.n	8001e40 <HAL_SPI_Receive+0x208>
  }

error :
 8001e3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b08c      	sub	sp, #48	; 0x30
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_SPI_TransmitReceive+0x26>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e18a      	b.n	8002196 <HAL_SPI_TransmitReceive+0x33c>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e88:	f7fe fe4e 	bl	8000b28 <HAL_GetTick>
 8001e8c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001e9e:	887b      	ldrh	r3, [r7, #2]
 8001ea0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ea2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d00f      	beq.n	8001eca <HAL_SPI_TransmitReceive+0x70>
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eb0:	d107      	bne.n	8001ec2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d103      	bne.n	8001ec2 <HAL_SPI_TransmitReceive+0x68>
 8001eba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d003      	beq.n	8001eca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ec8:	e15b      	b.n	8002182 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_SPI_TransmitReceive+0x82>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <HAL_SPI_TransmitReceive+0x82>
 8001ed6:	887b      	ldrh	r3, [r7, #2]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d103      	bne.n	8001ee4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ee2:	e14e      	b.n	8002182 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d003      	beq.n	8001ef8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2205      	movs	r2, #5
 8001ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	887a      	ldrh	r2, [r7, #2]
 8001f0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	887a      	ldrh	r2, [r7, #2]
 8001f1a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f38:	2b40      	cmp	r3, #64	; 0x40
 8001f3a:	d007      	beq.n	8001f4c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f54:	d178      	bne.n	8002048 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_SPI_TransmitReceive+0x10a>
 8001f5e:	8b7b      	ldrh	r3, [r7, #26]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d166      	bne.n	8002032 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	881a      	ldrh	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	1c9a      	adds	r2, r3, #2
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f88:	e053      	b.n	8002032 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d11b      	bne.n	8001fd0 <HAL_SPI_TransmitReceive+0x176>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d016      	beq.n	8001fd0 <HAL_SPI_TransmitReceive+0x176>
 8001fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d113      	bne.n	8001fd0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	881a      	ldrh	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	1c9a      	adds	r2, r3, #2
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d119      	bne.n	8002012 <HAL_SPI_TransmitReceive+0x1b8>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d014      	beq.n	8002012 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff2:	b292      	uxth	r2, r2
 8001ff4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffa:	1c9a      	adds	r2, r3, #2
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800200e:	2301      	movs	r3, #1
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002012:	f7fe fd89 	bl	8000b28 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800201e:	429a      	cmp	r2, r3
 8002020:	d807      	bhi.n	8002032 <HAL_SPI_TransmitReceive+0x1d8>
 8002022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002028:	d003      	beq.n	8002032 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002030:	e0a7      	b.n	8002182 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002036:	b29b      	uxth	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1a6      	bne.n	8001f8a <HAL_SPI_TransmitReceive+0x130>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002040:	b29b      	uxth	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1a1      	bne.n	8001f8a <HAL_SPI_TransmitReceive+0x130>
 8002046:	e07c      	b.n	8002142 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <HAL_SPI_TransmitReceive+0x1fc>
 8002050:	8b7b      	ldrh	r3, [r7, #26]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d16b      	bne.n	800212e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	330c      	adds	r3, #12
 8002060:	7812      	ldrb	r2, [r2, #0]
 8002062:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800207c:	e057      	b.n	800212e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b02      	cmp	r3, #2
 800208a:	d11c      	bne.n	80020c6 <HAL_SPI_TransmitReceive+0x26c>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002090:	b29b      	uxth	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d017      	beq.n	80020c6 <HAL_SPI_TransmitReceive+0x26c>
 8002096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002098:	2b01      	cmp	r3, #1
 800209a:	d114      	bne.n	80020c6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	330c      	adds	r3, #12
 80020a6:	7812      	ldrb	r2, [r2, #0]
 80020a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3b01      	subs	r3, #1
 80020bc:	b29a      	uxth	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d119      	bne.n	8002108 <HAL_SPI_TransmitReceive+0x2ae>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d014      	beq.n	8002108 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002104:	2301      	movs	r3, #1
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002108:	f7fe fd0e 	bl	8000b28 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002114:	429a      	cmp	r2, r3
 8002116:	d803      	bhi.n	8002120 <HAL_SPI_TransmitReceive+0x2c6>
 8002118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211e:	d102      	bne.n	8002126 <HAL_SPI_TransmitReceive+0x2cc>
 8002120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002122:	2b00      	cmp	r3, #0
 8002124:	d103      	bne.n	800212e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800212c:	e029      	b.n	8002182 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1a2      	bne.n	800207e <HAL_SPI_TransmitReceive+0x224>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800213c:	b29b      	uxth	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d19d      	bne.n	800207e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002144:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f904 	bl	8002354 <SPI_EndRxTxTransaction>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800215e:	e010      	b.n	8002182 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10b      	bne.n	8002180 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	e000      	b.n	8002182 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002180:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002192:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002196:	4618      	mov	r0, r3
 8002198:	3730      	adds	r7, #48	; 0x30
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	4613      	mov	r3, r2
 80021ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80021b0:	f7fe fcba 	bl	8000b28 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	4413      	add	r3, r2
 80021be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80021c0:	f7fe fcb2 	bl	8000b28 <HAL_GetTick>
 80021c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80021c6:	4b39      	ldr	r3, [pc, #228]	; (80022ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	015b      	lsls	r3, r3, #5
 80021cc:	0d1b      	lsrs	r3, r3, #20
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	fb02 f303 	mul.w	r3, r2, r3
 80021d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021d6:	e054      	b.n	8002282 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021de:	d050      	beq.n	8002282 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021e0:	f7fe fca2 	bl	8000b28 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	69fa      	ldr	r2, [r7, #28]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d902      	bls.n	80021f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d13d      	bne.n	8002272 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002204:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800220e:	d111      	bne.n	8002234 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002218:	d004      	beq.n	8002224 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002222:	d107      	bne.n	8002234 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002232:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800223c:	d10f      	bne.n	800225e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800225c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e017      	b.n	80022a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	3b01      	subs	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	4013      	ands	r3, r2
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	429a      	cmp	r2, r3
 8002290:	bf0c      	ite	eq
 8002292:	2301      	moveq	r3, #1
 8002294:	2300      	movne	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	429a      	cmp	r2, r3
 800229e:	d19b      	bne.n	80021d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3720      	adds	r7, #32
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000008 	.word	0x20000008

080022b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022c4:	d111      	bne.n	80022ea <SPI_EndRxTransaction+0x3a>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ce:	d004      	beq.n	80022da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d8:	d107      	bne.n	80022ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022e8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022f2:	d117      	bne.n	8002324 <SPI_EndRxTransaction+0x74>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022fc:	d112      	bne.n	8002324 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2200      	movs	r2, #0
 8002306:	2101      	movs	r1, #1
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f7ff ff49 	bl	80021a0 <SPI_WaitFlagStateUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d01a      	beq.n	800234a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002318:	f043 0220 	orr.w	r2, r3, #32
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e013      	b.n	800234c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2200      	movs	r2, #0
 800232c:	2180      	movs	r1, #128	; 0x80
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f7ff ff36 	bl	80021a0 <SPI_WaitFlagStateUntilTimeout>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d007      	beq.n	800234a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233e:	f043 0220 	orr.w	r2, r3, #32
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e000      	b.n	800234c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af02      	add	r7, sp, #8
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2200      	movs	r2, #0
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f7ff ff18 	bl	80021a0 <SPI_WaitFlagStateUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d007      	beq.n	8002386 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237a:	f043 0220 	orr.w	r2, r3, #32
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e000      	b.n	8002388 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e041      	b.n	8002426 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe fa28 	bl	800080c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3304      	adds	r3, #4
 80023cc:	4619      	mov	r1, r3
 80023ce:	4610      	mov	r0, r2
 80023d0:	f000 faaa 	bl	8002928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e041      	b.n	80024c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d106      	bne.n	800245a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f839 	bl	80024cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2202      	movs	r2, #2
 800245e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	4619      	mov	r1, r3
 800246c:	4610      	mov	r0, r2
 800246e:	f000 fa5b 	bl	8002928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr
	...

080024e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d109      	bne.n	8002504 <HAL_TIM_PWM_Start+0x24>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	bf14      	ite	ne
 80024fc:	2301      	movne	r3, #1
 80024fe:	2300      	moveq	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	e022      	b.n	800254a <HAL_TIM_PWM_Start+0x6a>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2b04      	cmp	r3, #4
 8002508:	d109      	bne.n	800251e <HAL_TIM_PWM_Start+0x3e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b01      	cmp	r3, #1
 8002514:	bf14      	ite	ne
 8002516:	2301      	movne	r3, #1
 8002518:	2300      	moveq	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	e015      	b.n	800254a <HAL_TIM_PWM_Start+0x6a>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b08      	cmp	r3, #8
 8002522:	d109      	bne.n	8002538 <HAL_TIM_PWM_Start+0x58>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b01      	cmp	r3, #1
 800252e:	bf14      	ite	ne
 8002530:	2301      	movne	r3, #1
 8002532:	2300      	moveq	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	e008      	b.n	800254a <HAL_TIM_PWM_Start+0x6a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b01      	cmp	r3, #1
 8002542:	bf14      	ite	ne
 8002544:	2301      	movne	r3, #1
 8002546:	2300      	moveq	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e05e      	b.n	8002610 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d104      	bne.n	8002562 <HAL_TIM_PWM_Start+0x82>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002560:	e013      	b.n	800258a <HAL_TIM_PWM_Start+0xaa>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b04      	cmp	r3, #4
 8002566:	d104      	bne.n	8002572 <HAL_TIM_PWM_Start+0x92>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002570:	e00b      	b.n	800258a <HAL_TIM_PWM_Start+0xaa>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b08      	cmp	r3, #8
 8002576:	d104      	bne.n	8002582 <HAL_TIM_PWM_Start+0xa2>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002580:	e003      	b.n	800258a <HAL_TIM_PWM_Start+0xaa>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2202      	movs	r2, #2
 8002586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2201      	movs	r2, #1
 8002590:	6839      	ldr	r1, [r7, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fc48 	bl	8002e28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a1e      	ldr	r2, [pc, #120]	; (8002618 <HAL_TIM_PWM_Start+0x138>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d107      	bne.n	80025b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a18      	ldr	r2, [pc, #96]	; (8002618 <HAL_TIM_PWM_Start+0x138>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d00e      	beq.n	80025da <HAL_TIM_PWM_Start+0xfa>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c4:	d009      	beq.n	80025da <HAL_TIM_PWM_Start+0xfa>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a14      	ldr	r2, [pc, #80]	; (800261c <HAL_TIM_PWM_Start+0x13c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d004      	beq.n	80025da <HAL_TIM_PWM_Start+0xfa>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a12      	ldr	r2, [pc, #72]	; (8002620 <HAL_TIM_PWM_Start+0x140>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d111      	bne.n	80025fe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b06      	cmp	r3, #6
 80025ea:	d010      	beq.n	800260e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025fc:	e007      	b.n	800260e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0201 	orr.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40012c00 	.word	0x40012c00
 800261c:	40000400 	.word	0x40000400
 8002620:	40000800 	.word	0x40000800

08002624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800263a:	2302      	movs	r3, #2
 800263c:	e0ac      	b.n	8002798 <HAL_TIM_PWM_ConfigChannel+0x174>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b0c      	cmp	r3, #12
 800264a:	f200 809f 	bhi.w	800278c <HAL_TIM_PWM_ConfigChannel+0x168>
 800264e:	a201      	add	r2, pc, #4	; (adr r2, 8002654 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002654:	08002689 	.word	0x08002689
 8002658:	0800278d 	.word	0x0800278d
 800265c:	0800278d 	.word	0x0800278d
 8002660:	0800278d 	.word	0x0800278d
 8002664:	080026c9 	.word	0x080026c9
 8002668:	0800278d 	.word	0x0800278d
 800266c:	0800278d 	.word	0x0800278d
 8002670:	0800278d 	.word	0x0800278d
 8002674:	0800270b 	.word	0x0800270b
 8002678:	0800278d 	.word	0x0800278d
 800267c:	0800278d 	.word	0x0800278d
 8002680:	0800278d 	.word	0x0800278d
 8002684:	0800274b 	.word	0x0800274b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f9ac 	bl	80029ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0208 	orr.w	r2, r2, #8
 80026a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699a      	ldr	r2, [r3, #24]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0204 	bic.w	r2, r2, #4
 80026b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6999      	ldr	r1, [r3, #24]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	619a      	str	r2, [r3, #24]
      break;
 80026c6:	e062      	b.n	800278e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f9f2 	bl	8002ab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6999      	ldr	r1, [r3, #24]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	021a      	lsls	r2, r3, #8
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	619a      	str	r2, [r3, #24]
      break;
 8002708:	e041      	b.n	800278e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	4618      	mov	r0, r3
 8002712:	f000 fa3b 	bl	8002b8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0208 	orr.w	r2, r2, #8
 8002724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69da      	ldr	r2, [r3, #28]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0204 	bic.w	r2, r2, #4
 8002734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69d9      	ldr	r1, [r3, #28]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	61da      	str	r2, [r3, #28]
      break;
 8002748:	e021      	b.n	800278e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fa85 	bl	8002c60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69d9      	ldr	r1, [r3, #28]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	021a      	lsls	r2, r3, #8
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	61da      	str	r2, [r3, #28]
      break;
 800278a:	e000      	b.n	800278e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800278c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_TIM_ConfigClockSource+0x18>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e0b3      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x180>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f0:	d03e      	beq.n	8002870 <HAL_TIM_ConfigClockSource+0xd0>
 80027f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f6:	f200 8087 	bhi.w	8002908 <HAL_TIM_ConfigClockSource+0x168>
 80027fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fe:	f000 8085 	beq.w	800290c <HAL_TIM_ConfigClockSource+0x16c>
 8002802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002806:	d87f      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x168>
 8002808:	2b70      	cmp	r3, #112	; 0x70
 800280a:	d01a      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0xa2>
 800280c:	2b70      	cmp	r3, #112	; 0x70
 800280e:	d87b      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x168>
 8002810:	2b60      	cmp	r3, #96	; 0x60
 8002812:	d050      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0x116>
 8002814:	2b60      	cmp	r3, #96	; 0x60
 8002816:	d877      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x168>
 8002818:	2b50      	cmp	r3, #80	; 0x50
 800281a:	d03c      	beq.n	8002896 <HAL_TIM_ConfigClockSource+0xf6>
 800281c:	2b50      	cmp	r3, #80	; 0x50
 800281e:	d873      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x168>
 8002820:	2b40      	cmp	r3, #64	; 0x40
 8002822:	d058      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x136>
 8002824:	2b40      	cmp	r3, #64	; 0x40
 8002826:	d86f      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x168>
 8002828:	2b30      	cmp	r3, #48	; 0x30
 800282a:	d064      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x156>
 800282c:	2b30      	cmp	r3, #48	; 0x30
 800282e:	d86b      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x168>
 8002830:	2b20      	cmp	r3, #32
 8002832:	d060      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x156>
 8002834:	2b20      	cmp	r3, #32
 8002836:	d867      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x168>
 8002838:	2b00      	cmp	r3, #0
 800283a:	d05c      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x156>
 800283c:	2b10      	cmp	r3, #16
 800283e:	d05a      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002840:	e062      	b.n	8002908 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6899      	ldr	r1, [r3, #8]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f000 faca 	bl	8002dea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002864:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	609a      	str	r2, [r3, #8]
      break;
 800286e:	e04e      	b.n	800290e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	6899      	ldr	r1, [r3, #8]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f000 fab3 	bl	8002dea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002892:	609a      	str	r2, [r3, #8]
      break;
 8002894:	e03b      	b.n	800290e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6859      	ldr	r1, [r3, #4]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	461a      	mov	r2, r3
 80028a4:	f000 fa2a 	bl	8002cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2150      	movs	r1, #80	; 0x50
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fa81 	bl	8002db6 <TIM_ITRx_SetConfig>
      break;
 80028b4:	e02b      	b.n	800290e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6859      	ldr	r1, [r3, #4]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	461a      	mov	r2, r3
 80028c4:	f000 fa48 	bl	8002d58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2160      	movs	r1, #96	; 0x60
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fa71 	bl	8002db6 <TIM_ITRx_SetConfig>
      break;
 80028d4:	e01b      	b.n	800290e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6859      	ldr	r1, [r3, #4]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	461a      	mov	r2, r3
 80028e4:	f000 fa0a 	bl	8002cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2140      	movs	r1, #64	; 0x40
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fa61 	bl	8002db6 <TIM_ITRx_SetConfig>
      break;
 80028f4:	e00b      	b.n	800290e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4619      	mov	r1, r3
 8002900:	4610      	mov	r0, r2
 8002902:	f000 fa58 	bl	8002db6 <TIM_ITRx_SetConfig>
        break;
 8002906:	e002      	b.n	800290e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002908:	bf00      	nop
 800290a:	e000      	b.n	800290e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800290c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a29      	ldr	r2, [pc, #164]	; (80029e0 <TIM_Base_SetConfig+0xb8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00b      	beq.n	8002958 <TIM_Base_SetConfig+0x30>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002946:	d007      	beq.n	8002958 <TIM_Base_SetConfig+0x30>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a26      	ldr	r2, [pc, #152]	; (80029e4 <TIM_Base_SetConfig+0xbc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d003      	beq.n	8002958 <TIM_Base_SetConfig+0x30>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a25      	ldr	r2, [pc, #148]	; (80029e8 <TIM_Base_SetConfig+0xc0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d108      	bne.n	800296a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a1c      	ldr	r2, [pc, #112]	; (80029e0 <TIM_Base_SetConfig+0xb8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00b      	beq.n	800298a <TIM_Base_SetConfig+0x62>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002978:	d007      	beq.n	800298a <TIM_Base_SetConfig+0x62>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a19      	ldr	r2, [pc, #100]	; (80029e4 <TIM_Base_SetConfig+0xbc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d003      	beq.n	800298a <TIM_Base_SetConfig+0x62>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a18      	ldr	r2, [pc, #96]	; (80029e8 <TIM_Base_SetConfig+0xc0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d108      	bne.n	800299c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <TIM_Base_SetConfig+0xb8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d103      	bne.n	80029d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	615a      	str	r2, [r3, #20]
}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr
 80029e0:	40012c00 	.word	0x40012c00
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40000800 	.word	0x40000800

080029ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	f023 0201 	bic.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0303 	bic.w	r3, r3, #3
 8002a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f023 0302 	bic.w	r3, r3, #2
 8002a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <TIM_OC1_SetConfig+0xc8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d10c      	bne.n	8002a62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f023 0308 	bic.w	r3, r3, #8
 8002a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f023 0304 	bic.w	r3, r3, #4
 8002a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a13      	ldr	r2, [pc, #76]	; (8002ab4 <TIM_OC1_SetConfig+0xc8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d111      	bne.n	8002a8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	621a      	str	r2, [r3, #32]
}
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40012c00 	.word	0x40012c00

08002ab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	f023 0210 	bic.w	r2, r3, #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f023 0320 	bic.w	r3, r3, #32
 8002b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <TIM_OC2_SetConfig+0xd0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d10d      	bne.n	8002b34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <TIM_OC2_SetConfig+0xd0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d113      	bne.n	8002b64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	621a      	str	r2, [r3, #32]
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr
 8002b88:	40012c00 	.word	0x40012c00

08002b8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f023 0303 	bic.w	r3, r3, #3
 8002bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <TIM_OC3_SetConfig+0xd0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10d      	bne.n	8002c06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	021b      	lsls	r3, r3, #8
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a14      	ldr	r2, [pc, #80]	; (8002c5c <TIM_OC3_SetConfig+0xd0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d113      	bne.n	8002c36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	621a      	str	r2, [r3, #32]
}
 8002c50:	bf00      	nop
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40012c00 	.word	0x40012c00

08002c60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	031b      	lsls	r3, r3, #12
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a0f      	ldr	r2, [pc, #60]	; (8002cf8 <TIM_OC4_SetConfig+0x98>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d109      	bne.n	8002cd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	019b      	lsls	r3, r3, #6
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	621a      	str	r2, [r3, #32]
}
 8002cee:	bf00      	nop
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	40012c00 	.word	0x40012c00

08002cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	f023 0201 	bic.w	r2, r3, #1
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f023 030a 	bic.w	r3, r3, #10
 8002d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	621a      	str	r2, [r3, #32]
}
 8002d4e:	bf00      	nop
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	f023 0210 	bic.w	r2, r3, #16
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	031b      	lsls	r3, r3, #12
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	621a      	str	r2, [r3, #32]
}
 8002dac:	bf00      	nop
 8002dae:	371c      	adds	r7, #28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr

08002db6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b085      	sub	sp, #20
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f043 0307 	orr.w	r3, r3, #7
 8002dd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	609a      	str	r2, [r3, #8]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr

08002dea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b087      	sub	sp, #28
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	021a      	lsls	r2, r3, #8
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	609a      	str	r2, [r3, #8]
}
 8002e1e:	bf00      	nop
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f003 031f 	and.w	r3, r3, #31
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a1a      	ldr	r2, [r3, #32]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a1a      	ldr	r2, [r3, #32]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e60:	431a      	orrs	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	621a      	str	r2, [r3, #32]
}
 8002e66:	bf00      	nop
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e046      	b.n	8002f16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a16      	ldr	r2, [pc, #88]	; (8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00e      	beq.n	8002eea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed4:	d009      	beq.n	8002eea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a12      	ldr	r2, [pc, #72]	; (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a10      	ldr	r2, [pc, #64]	; (8002f28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d10c      	bne.n	8002f04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	40012c00 	.word	0x40012c00
 8002f24:	40000400 	.word	0x40000400
 8002f28:	40000800 	.word	0x40000800

08002f2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e03d      	b.n	8002fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e03f      	b.n	8003060 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d106      	bne.n	8002ffa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7fd fc5b 	bl	80008b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2224      	movs	r2, #36	; 0x24
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003010:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f904 	bl	8003220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691a      	ldr	r2, [r3, #16]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003026:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003036:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003046:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08a      	sub	sp, #40	; 0x28
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	4613      	mov	r3, r2
 8003076:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b20      	cmp	r3, #32
 8003086:	d17c      	bne.n	8003182 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_UART_Transmit+0x2c>
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e075      	b.n	8003184 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_UART_Transmit+0x3e>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e06e      	b.n	8003184 <HAL_UART_Transmit+0x11c>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2221      	movs	r2, #33	; 0x21
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030bc:	f7fd fd34 	bl	8000b28 <HAL_GetTick>
 80030c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	88fa      	ldrh	r2, [r7, #6]
 80030c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	88fa      	ldrh	r2, [r7, #6]
 80030cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d6:	d108      	bne.n	80030ea <HAL_UART_Transmit+0x82>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d104      	bne.n	80030ea <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	e003      	b.n	80030f2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030fa:	e02a      	b.n	8003152 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2200      	movs	r2, #0
 8003104:	2180      	movs	r1, #128	; 0x80
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f840 	bl	800318c <UART_WaitOnFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e036      	b.n	8003184 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10b      	bne.n	8003134 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800312a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	3302      	adds	r3, #2
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	e007      	b.n	8003144 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	781a      	ldrb	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3301      	adds	r3, #1
 8003142:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1cf      	bne.n	80030fc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2200      	movs	r2, #0
 8003164:	2140      	movs	r1, #64	; 0x40
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f810 	bl	800318c <UART_WaitOnFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e006      	b.n	8003184 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	e000      	b.n	8003184 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003182:	2302      	movs	r3, #2
  }
}
 8003184:	4618      	mov	r0, r3
 8003186:	3720      	adds	r7, #32
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	4613      	mov	r3, r2
 800319a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800319c:	e02c      	b.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a4:	d028      	beq.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d007      	beq.n	80031bc <UART_WaitOnFlagUntilTimeout+0x30>
 80031ac:	f7fd fcbc 	bl	8000b28 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d21d      	bcs.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031ca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695a      	ldr	r2, [r3, #20]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0201 	bic.w	r2, r2, #1
 80031da:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e00f      	b.n	8003218 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4013      	ands	r3, r2
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	429a      	cmp	r2, r3
 8003206:	bf0c      	ite	eq
 8003208:	2301      	moveq	r3, #1
 800320a:	2300      	movne	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	429a      	cmp	r2, r3
 8003214:	d0c3      	beq.n	800319e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800325a:	f023 030c 	bic.w	r3, r3, #12
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6812      	ldr	r2, [r2, #0]
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	430b      	orrs	r3, r1
 8003266:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2c      	ldr	r2, [pc, #176]	; (8003334 <UART_SetConfig+0x114>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d103      	bne.n	8003290 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7fe fae4 	bl	8001854 <HAL_RCC_GetPCLK2Freq>
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	e002      	b.n	8003296 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003290:	f7fe facc 	bl	800182c <HAL_RCC_GetPCLK1Freq>
 8003294:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	009a      	lsls	r2, r3, #2
 80032a0:	441a      	add	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ac:	4a22      	ldr	r2, [pc, #136]	; (8003338 <UART_SetConfig+0x118>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	0119      	lsls	r1, r3, #4
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	009a      	lsls	r2, r3, #2
 80032c0:	441a      	add	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032cc:	4b1a      	ldr	r3, [pc, #104]	; (8003338 <UART_SetConfig+0x118>)
 80032ce:	fba3 0302 	umull	r0, r3, r3, r2
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2064      	movs	r0, #100	; 0x64
 80032d6:	fb00 f303 	mul.w	r3, r0, r3
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	3332      	adds	r3, #50	; 0x32
 80032e0:	4a15      	ldr	r2, [pc, #84]	; (8003338 <UART_SetConfig+0x118>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ec:	4419      	add	r1, r3
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	009a      	lsls	r2, r3, #2
 80032f8:	441a      	add	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	fbb2 f2f3 	udiv	r2, r2, r3
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <UART_SetConfig+0x118>)
 8003306:	fba3 0302 	umull	r0, r3, r3, r2
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	2064      	movs	r0, #100	; 0x64
 800330e:	fb00 f303 	mul.w	r3, r0, r3
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	3332      	adds	r3, #50	; 0x32
 8003318:	4a07      	ldr	r2, [pc, #28]	; (8003338 <UART_SetConfig+0x118>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	f003 020f 	and.w	r2, r3, #15
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	440a      	add	r2, r1
 800332a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40013800 	.word	0x40013800
 8003338:	51eb851f 	.word	0x51eb851f

0800333c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <NRF24_DelayMicroSeconds+0x38>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <NRF24_DelayMicroSeconds+0x3c>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	0c9a      	lsrs	r2, r3, #18
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 800335c:	bf00      	nop
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1e5a      	subs	r2, r3, #1
 8003362:	60fa      	str	r2, [r7, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1fa      	bne.n	800335e <NRF24_DelayMicroSeconds+0x22>
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	20000008 	.word	0x20000008
 8003378:	165e9f81 	.word	0x165e9f81

0800337c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <NRF24_csn+0x20>
 800338a:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <NRF24_csn+0x38>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a0a      	ldr	r2, [pc, #40]	; (80033b8 <NRF24_csn+0x3c>)
 8003390:	8811      	ldrh	r1, [r2, #0]
 8003392:	2201      	movs	r2, #1
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd fe5d 	bl	8001054 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800339a:	e007      	b.n	80033ac <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <NRF24_csn+0x38>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a05      	ldr	r2, [pc, #20]	; (80033b8 <NRF24_csn+0x3c>)
 80033a2:	8811      	ldrh	r1, [r2, #0]
 80033a4:	2200      	movs	r2, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd fe54 	bl	8001054 <HAL_GPIO_WritePin>
}
 80033ac:	bf00      	nop
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	200000a4 	.word	0x200000a4
 80033b8:	200000a8 	.word	0x200000a8

080033bc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <NRF24_ce+0x20>
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <NRF24_ce+0x38>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a0a      	ldr	r2, [pc, #40]	; (80033f8 <NRF24_ce+0x3c>)
 80033d0:	8811      	ldrh	r1, [r2, #0]
 80033d2:	2201      	movs	r2, #1
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fd fe3d 	bl	8001054 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80033da:	e007      	b.n	80033ec <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <NRF24_ce+0x38>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a05      	ldr	r2, [pc, #20]	; (80033f8 <NRF24_ce+0x3c>)
 80033e2:	8811      	ldrh	r1, [r2, #0]
 80033e4:	2200      	movs	r2, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fe34 	bl	8001054 <HAL_GPIO_WritePin>
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	200000a4 	.word	0x200000a4
 80033f8:	200000aa 	.word	0x200000aa

080033fc <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8003406:	2000      	movs	r0, #0
 8003408:	f7ff ffb8 	bl	800337c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	b2db      	uxtb	r3, r3
 8003414:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003416:	f107 010c 	add.w	r1, r7, #12
 800341a:	2364      	movs	r3, #100	; 0x64
 800341c:	2201      	movs	r2, #1
 800341e:	480a      	ldr	r0, [pc, #40]	; (8003448 <NRF24_read_register+0x4c>)
 8003420:	f7fe face 	bl	80019c0 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8003424:	f107 030c 	add.w	r3, r7, #12
 8003428:	1c59      	adds	r1, r3, #1
 800342a:	2364      	movs	r3, #100	; 0x64
 800342c:	2201      	movs	r2, #1
 800342e:	4806      	ldr	r0, [pc, #24]	; (8003448 <NRF24_read_register+0x4c>)
 8003430:	f7fe fc02 	bl	8001c38 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8003434:	7b7b      	ldrb	r3, [r7, #13]
 8003436:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8003438:	2001      	movs	r0, #1
 800343a:	f7ff ff9f 	bl	800337c <NRF24_csn>
	return retData;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	200000ac 	.word	0x200000ac

0800344c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	6039      	str	r1, [r7, #0]
 8003456:	71fb      	strb	r3, [r7, #7]
 8003458:	4613      	mov	r3, r2
 800345a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800345c:	2000      	movs	r0, #0
 800345e:	f7ff ff8d 	bl	800337c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	b2db      	uxtb	r3, r3
 800346a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800346c:	f107 010c 	add.w	r1, r7, #12
 8003470:	2364      	movs	r3, #100	; 0x64
 8003472:	2201      	movs	r2, #1
 8003474:	4808      	ldr	r0, [pc, #32]	; (8003498 <NRF24_read_registerN+0x4c>)
 8003476:	f7fe faa3 	bl	80019c0 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800347a:	79bb      	ldrb	r3, [r7, #6]
 800347c:	b29a      	uxth	r2, r3
 800347e:	2364      	movs	r3, #100	; 0x64
 8003480:	6839      	ldr	r1, [r7, #0]
 8003482:	4805      	ldr	r0, [pc, #20]	; (8003498 <NRF24_read_registerN+0x4c>)
 8003484:	f7fe fbd8 	bl	8001c38 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8003488:	2001      	movs	r0, #1
 800348a:	f7ff ff77 	bl	800337c <NRF24_csn>
}
 800348e:	bf00      	nop
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	200000ac 	.word	0x200000ac

0800349c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	460a      	mov	r2, r1
 80034a6:	71fb      	strb	r3, [r7, #7]
 80034a8:	4613      	mov	r3, r2
 80034aa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80034ac:	2000      	movs	r0, #0
 80034ae:	f7ff ff65 	bl	800337c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80034b2:	79fb      	ldrb	r3, [r7, #7]
 80034b4:	f043 0320 	orr.w	r3, r3, #32
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80034bc:	79bb      	ldrb	r3, [r7, #6]
 80034be:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80034c0:	f107 010c 	add.w	r1, r7, #12
 80034c4:	2364      	movs	r3, #100	; 0x64
 80034c6:	2202      	movs	r2, #2
 80034c8:	4804      	ldr	r0, [pc, #16]	; (80034dc <NRF24_write_register+0x40>)
 80034ca:	f7fe fa79 	bl	80019c0 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80034ce:	2001      	movs	r0, #1
 80034d0:	f7ff ff54 	bl	800337c <NRF24_csn>
}
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	200000ac 	.word	0x200000ac

080034e0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	6039      	str	r1, [r7, #0]
 80034ea:	71fb      	strb	r3, [r7, #7]
 80034ec:	4613      	mov	r3, r2
 80034ee:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80034f0:	2000      	movs	r0, #0
 80034f2:	f7ff ff43 	bl	800337c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	f043 0320 	orr.w	r3, r3, #32
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003500:	f107 010c 	add.w	r1, r7, #12
 8003504:	2364      	movs	r3, #100	; 0x64
 8003506:	2201      	movs	r2, #1
 8003508:	4808      	ldr	r0, [pc, #32]	; (800352c <NRF24_write_registerN+0x4c>)
 800350a:	f7fe fa59 	bl	80019c0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800350e:	79bb      	ldrb	r3, [r7, #6]
 8003510:	b29a      	uxth	r2, r3
 8003512:	2364      	movs	r3, #100	; 0x64
 8003514:	6839      	ldr	r1, [r7, #0]
 8003516:	4805      	ldr	r0, [pc, #20]	; (800352c <NRF24_write_registerN+0x4c>)
 8003518:	f7fe fa52 	bl	80019c0 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800351c:	2001      	movs	r0, #1
 800351e:	f7ff ff2d 	bl	800337c <NRF24_csn>
}
 8003522:	bf00      	nop
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	200000ac 	.word	0x200000ac

08003530 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800353c:	f000 fa08 	bl	8003950 <NRF24_getPayloadSize>
 8003540:	4603      	mov	r3, r0
 8003542:	461a      	mov	r2, r3
 8003544:	78fb      	ldrb	r3, [r7, #3]
 8003546:	4293      	cmp	r3, r2
 8003548:	d303      	bcc.n	8003552 <NRF24_read_payload+0x22>
 800354a:	f000 fa01 	bl	8003950 <NRF24_getPayloadSize>
 800354e:	4603      	mov	r3, r0
 8003550:	e000      	b.n	8003554 <NRF24_read_payload+0x24>
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8003556:	2000      	movs	r0, #0
 8003558:	f7ff ff10 	bl	800337c <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 800355c:	2361      	movs	r3, #97	; 0x61
 800355e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8003560:	f107 010e 	add.w	r1, r7, #14
 8003564:	2364      	movs	r3, #100	; 0x64
 8003566:	2201      	movs	r2, #1
 8003568:	4808      	ldr	r0, [pc, #32]	; (800358c <NRF24_read_payload+0x5c>)
 800356a:	f7fe fa29 	bl	80019c0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	b29a      	uxth	r2, r3
 8003572:	2364      	movs	r3, #100	; 0x64
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4805      	ldr	r0, [pc, #20]	; (800358c <NRF24_read_payload+0x5c>)
 8003578:	f7fe fb5e 	bl	8001c38 <HAL_SPI_Receive>
	NRF24_csn(1);
 800357c:	2001      	movs	r0, #1
 800357e:	f7ff fefd 	bl	800337c <NRF24_csn>
}
 8003582:	bf00      	nop
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	200000ac 	.word	0x200000ac

08003590 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8003594:	21ff      	movs	r1, #255	; 0xff
 8003596:	20e1      	movs	r0, #225	; 0xe1
 8003598:	f7ff ff80 	bl	800349c <NRF24_write_register>
}
 800359c:	bf00      	nop
 800359e:	bd80      	pop	{r7, pc}

080035a0 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80035a4:	21ff      	movs	r1, #255	; 0xff
 80035a6:	20e2      	movs	r0, #226	; 0xe2
 80035a8:	f7ff ff78 	bl	800349c <NRF24_write_register>
}
 80035ac:	bf00      	nop
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80035b6:	2007      	movs	r0, #7
 80035b8:	f7ff ff20 	bl	80033fc <NRF24_read_register>
 80035bc:	4603      	mov	r3, r0
 80035be:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80035c0:	79fb      	ldrb	r3, [r7, #7]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80035cc:	b082      	sub	sp, #8
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b084      	sub	sp, #16
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	460b      	mov	r3, r1
 80035da:	807b      	strh	r3, [r7, #2]
 80035dc:	4613      	mov	r3, r2
 80035de:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80035e0:	4b66      	ldr	r3, [pc, #408]	; (800377c <NRF24_begin+0x1b0>)
 80035e2:	4618      	mov	r0, r3
 80035e4:	f107 031c 	add.w	r3, r7, #28
 80035e8:	2258      	movs	r2, #88	; 0x58
 80035ea:	4619      	mov	r1, r3
 80035ec:	f000 ff62 	bl	80044b4 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80035f0:	4a63      	ldr	r2, [pc, #396]	; (8003780 <NRF24_begin+0x1b4>)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80035f6:	4a63      	ldr	r2, [pc, #396]	; (8003784 <NRF24_begin+0x1b8>)
 80035f8:	887b      	ldrh	r3, [r7, #2]
 80035fa:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80035fc:	4a62      	ldr	r2, [pc, #392]	; (8003788 <NRF24_begin+0x1bc>)
 80035fe:	883b      	ldrh	r3, [r7, #0]
 8003600:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8003602:	2001      	movs	r0, #1
 8003604:	f7ff feba 	bl	800337c <NRF24_csn>
	NRF24_ce(0);
 8003608:	2000      	movs	r0, #0
 800360a:	f7ff fed7 	bl	80033bc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800360e:	2005      	movs	r0, #5
 8003610:	f7fd fa94 	bl	8000b3c <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8003614:	2108      	movs	r1, #8
 8003616:	2000      	movs	r0, #0
 8003618:	f7ff ff40 	bl	800349c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800361c:	213f      	movs	r1, #63	; 0x3f
 800361e:	2001      	movs	r0, #1
 8003620:	f7ff ff3c 	bl	800349c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8003624:	2103      	movs	r1, #3
 8003626:	2002      	movs	r0, #2
 8003628:	f7ff ff38 	bl	800349c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800362c:	2103      	movs	r1, #3
 800362e:	2003      	movs	r0, #3
 8003630:	f7ff ff34 	bl	800349c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8003634:	2103      	movs	r1, #3
 8003636:	2004      	movs	r0, #4
 8003638:	f7ff ff30 	bl	800349c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800363c:	2102      	movs	r1, #2
 800363e:	2005      	movs	r0, #5
 8003640:	f7ff ff2c 	bl	800349c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8003644:	210f      	movs	r1, #15
 8003646:	2006      	movs	r0, #6
 8003648:	f7ff ff28 	bl	800349c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 800364c:	210e      	movs	r1, #14
 800364e:	2007      	movs	r0, #7
 8003650:	f7ff ff24 	bl	800349c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8003654:	2100      	movs	r1, #0
 8003656:	2008      	movs	r0, #8
 8003658:	f7ff ff20 	bl	800349c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 800365c:	2100      	movs	r1, #0
 800365e:	2009      	movs	r0, #9
 8003660:	f7ff ff1c 	bl	800349c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8003664:	23e7      	movs	r3, #231	; 0xe7
 8003666:	733b      	strb	r3, [r7, #12]
 8003668:	23e7      	movs	r3, #231	; 0xe7
 800366a:	72fb      	strb	r3, [r7, #11]
 800366c:	23e7      	movs	r3, #231	; 0xe7
 800366e:	72bb      	strb	r3, [r7, #10]
 8003670:	23e7      	movs	r3, #231	; 0xe7
 8003672:	727b      	strb	r3, [r7, #9]
 8003674:	23e7      	movs	r3, #231	; 0xe7
 8003676:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8003678:	f107 0308 	add.w	r3, r7, #8
 800367c:	2205      	movs	r2, #5
 800367e:	4619      	mov	r1, r3
 8003680:	200a      	movs	r0, #10
 8003682:	f7ff ff2d 	bl	80034e0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8003686:	23c2      	movs	r3, #194	; 0xc2
 8003688:	733b      	strb	r3, [r7, #12]
 800368a:	23c2      	movs	r3, #194	; 0xc2
 800368c:	72fb      	strb	r3, [r7, #11]
 800368e:	23c2      	movs	r3, #194	; 0xc2
 8003690:	72bb      	strb	r3, [r7, #10]
 8003692:	23c2      	movs	r3, #194	; 0xc2
 8003694:	727b      	strb	r3, [r7, #9]
 8003696:	23c2      	movs	r3, #194	; 0xc2
 8003698:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800369a:	f107 0308 	add.w	r3, r7, #8
 800369e:	2205      	movs	r2, #5
 80036a0:	4619      	mov	r1, r3
 80036a2:	200b      	movs	r0, #11
 80036a4:	f7ff ff1c 	bl	80034e0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80036a8:	21c3      	movs	r1, #195	; 0xc3
 80036aa:	200c      	movs	r0, #12
 80036ac:	f7ff fef6 	bl	800349c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80036b0:	21c4      	movs	r1, #196	; 0xc4
 80036b2:	200d      	movs	r0, #13
 80036b4:	f7ff fef2 	bl	800349c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80036b8:	21c5      	movs	r1, #197	; 0xc5
 80036ba:	200e      	movs	r0, #14
 80036bc:	f7ff feee 	bl	800349c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80036c0:	21c6      	movs	r1, #198	; 0xc6
 80036c2:	200f      	movs	r0, #15
 80036c4:	f7ff feea 	bl	800349c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80036c8:	23e7      	movs	r3, #231	; 0xe7
 80036ca:	733b      	strb	r3, [r7, #12]
 80036cc:	23e7      	movs	r3, #231	; 0xe7
 80036ce:	72fb      	strb	r3, [r7, #11]
 80036d0:	23e7      	movs	r3, #231	; 0xe7
 80036d2:	72bb      	strb	r3, [r7, #10]
 80036d4:	23e7      	movs	r3, #231	; 0xe7
 80036d6:	727b      	strb	r3, [r7, #9]
 80036d8:	23e7      	movs	r3, #231	; 0xe7
 80036da:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80036dc:	f107 0308 	add.w	r3, r7, #8
 80036e0:	2205      	movs	r2, #5
 80036e2:	4619      	mov	r1, r3
 80036e4:	2010      	movs	r0, #16
 80036e6:	f7ff fefb 	bl	80034e0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80036ea:	2100      	movs	r1, #0
 80036ec:	2011      	movs	r0, #17
 80036ee:	f7ff fed5 	bl	800349c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80036f2:	2100      	movs	r1, #0
 80036f4:	2012      	movs	r0, #18
 80036f6:	f7ff fed1 	bl	800349c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80036fa:	2100      	movs	r1, #0
 80036fc:	2013      	movs	r0, #19
 80036fe:	f7ff fecd 	bl	800349c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8003702:	2100      	movs	r1, #0
 8003704:	2014      	movs	r0, #20
 8003706:	f7ff fec9 	bl	800349c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800370a:	2100      	movs	r1, #0
 800370c:	2015      	movs	r0, #21
 800370e:	f7ff fec5 	bl	800349c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8003712:	2100      	movs	r1, #0
 8003714:	2016      	movs	r0, #22
 8003716:	f7ff fec1 	bl	800349c <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800371a:	f000 fa47 	bl	8003bac <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800371e:	2100      	movs	r1, #0
 8003720:	201c      	movs	r0, #28
 8003722:	f7ff febb 	bl	800349c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8003726:	2100      	movs	r1, #0
 8003728:	201d      	movs	r0, #29
 800372a:	f7ff feb7 	bl	800349c <NRF24_write_register>
	printRadioSettings();
 800372e:	f000 fa57 	bl	8003be0 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8003732:	210f      	movs	r1, #15
 8003734:	200f      	movs	r0, #15
 8003736:	f000 f8c5 	bl	80038c4 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800373a:	2003      	movs	r0, #3
 800373c:	f000 f947 	bl	80039ce <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8003740:	2001      	movs	r0, #1
 8003742:	f000 f97d 	bl	8003a40 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8003746:	2002      	movs	r0, #2
 8003748:	f000 f9c0 	bl	8003acc <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 800374c:	f000 f912 	bl	8003974 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8003750:	2020      	movs	r0, #32
 8003752:	f000 f8e7 	bl	8003924 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8003756:	f000 fa20 	bl	8003b9a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800375a:	204c      	movs	r0, #76	; 0x4c
 800375c:	f000 f8cd 	bl	80038fa <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8003760:	f7ff ff16 	bl	8003590 <NRF24_flush_tx>
	NRF24_flush_rx();
 8003764:	f7ff ff1c 	bl	80035a0 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8003768:	f000 f9d8 	bl	8003b1c <NRF24_powerDown>
	
}
 800376c:	bf00      	nop
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003776:	b002      	add	sp, #8
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	200000ac 	.word	0x200000ac
 8003780:	200000a4 	.word	0x200000a4
 8003784:	200000a8 	.word	0x200000a8
 8003788:	200000aa 	.word	0x200000aa

0800378c <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8003790:	2000      	movs	r0, #0
 8003792:	f7ff fe33 	bl	80033fc <NRF24_read_register>
 8003796:	4603      	mov	r3, r0
 8003798:	f043 0303 	orr.w	r3, r3, #3
 800379c:	b2db      	uxtb	r3, r3
 800379e:	4619      	mov	r1, r3
 80037a0:	2000      	movs	r0, #0
 80037a2:	f7ff fe7b 	bl	800349c <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 80037a6:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <NRF24_startListening+0x48>)
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	d004      	beq.n	80037ba <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80037b0:	2205      	movs	r2, #5
 80037b2:	4908      	ldr	r1, [pc, #32]	; (80037d4 <NRF24_startListening+0x48>)
 80037b4:	200a      	movs	r0, #10
 80037b6:	f7ff fe93 	bl	80034e0 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 80037ba:	f7ff fee9 	bl	8003590 <NRF24_flush_tx>
	NRF24_flush_rx();
 80037be:	f7ff feef 	bl	80035a0 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 80037c2:	2001      	movs	r0, #1
 80037c4:	f7ff fdfa 	bl	80033bc <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 80037c8:	2096      	movs	r0, #150	; 0x96
 80037ca:	f7ff fdb7 	bl	800333c <NRF24_DelayMicroSeconds>
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000098 	.word	0x20000098

080037d8 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80037dc:	2000      	movs	r0, #0
 80037de:	f000 f9ac 	bl	8003b3a <NRF24_availablePipe>
 80037e2:	4603      	mov	r3, r0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	4619      	mov	r1, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff fe99 	bl	8003530 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80037fe:	2017      	movs	r0, #23
 8003800:	f7ff fdfc 	bl	80033fc <NRF24_read_register>
 8003804:	4603      	mov	r3, r0
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 800380c:	f7ff fec8 	bl	80035a0 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8003810:	f000 f8a8 	bl	8003964 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b00      	cmp	r3, #0
 8003818:	bf14      	ite	ne
 800381a:	2301      	movne	r3, #1
 800381c:	2300      	moveq	r3, #0
 800381e:	b2db      	uxtb	r3, r3
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	4601      	mov	r1, r0
 8003830:	e9c7 2300 	strd	r2, r3, [r7]
 8003834:	460b      	mov	r3, r1
 8003836:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d104      	bne.n	8003848 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 800383e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003842:	491c      	ldr	r1, [pc, #112]	; (80038b4 <NRF24_openReadingPipe+0x8c>)
 8003844:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	2b06      	cmp	r3, #6
 800384c:	d82d      	bhi.n	80038aa <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d808      	bhi.n	8003866 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	4a18      	ldr	r2, [pc, #96]	; (80038b8 <NRF24_openReadingPipe+0x90>)
 8003858:	5cd3      	ldrb	r3, [r2, r3]
 800385a:	4639      	mov	r1, r7
 800385c:	2205      	movs	r2, #5
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fe3e 	bl	80034e0 <NRF24_write_registerN>
 8003864:	e007      	b.n	8003876 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	4a13      	ldr	r2, [pc, #76]	; (80038b8 <NRF24_openReadingPipe+0x90>)
 800386a:	5cd3      	ldrb	r3, [r2, r3]
 800386c:	4639      	mov	r1, r7
 800386e:	2201      	movs	r2, #1
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fe35 	bl	80034e0 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	4a10      	ldr	r2, [pc, #64]	; (80038bc <NRF24_openReadingPipe+0x94>)
 800387a:	5cd3      	ldrb	r3, [r2, r3]
 800387c:	4a10      	ldr	r2, [pc, #64]	; (80038c0 <NRF24_openReadingPipe+0x98>)
 800387e:	7812      	ldrb	r2, [r2, #0]
 8003880:	4611      	mov	r1, r2
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff fe0a 	bl	800349c <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8003888:	2002      	movs	r0, #2
 800388a:	f7ff fdb7 	bl	80033fc <NRF24_read_register>
 800388e:	4603      	mov	r3, r0
 8003890:	b25a      	sxtb	r2, r3
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	2101      	movs	r1, #1
 8003896:	fa01 f303 	lsl.w	r3, r1, r3
 800389a:	b25b      	sxtb	r3, r3
 800389c:	4313      	orrs	r3, r2
 800389e:	b25b      	sxtb	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	4619      	mov	r1, r3
 80038a4:	2002      	movs	r0, #2
 80038a6:	f7ff fdf9 	bl	800349c <NRF24_write_register>
	}
	
}
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000098 	.word	0x20000098
 80038b8:	080052bc 	.word	0x080052bc
 80038bc:	080052c4 	.word	0x080052c4
 80038c0:	200000a0 	.word	0x200000a0

080038c4 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	460a      	mov	r2, r1
 80038ce:	71fb      	strb	r3, [r7, #7]
 80038d0:	4613      	mov	r3, r2
 80038d2:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	b25a      	sxtb	r2, r3
 80038da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	b25b      	sxtb	r3, r3
 80038e4:	4313      	orrs	r3, r2
 80038e6:	b25b      	sxtb	r3, r3
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	4619      	mov	r1, r3
 80038ec:	2004      	movs	r0, #4
 80038ee:	f7ff fdd5 	bl	800349c <NRF24_write_register>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	4603      	mov	r3, r0
 8003902:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8003904:	237f      	movs	r3, #127	; 0x7f
 8003906:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8003908:	7bfa      	ldrb	r2, [r7, #15]
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	4293      	cmp	r3, r2
 800390e:	bf28      	it	cs
 8003910:	4613      	movcs	r3, r2
 8003912:	b2db      	uxtb	r3, r3
 8003914:	4619      	mov	r1, r3
 8003916:	2005      	movs	r0, #5
 8003918:	f7ff fdc0 	bl	800349c <NRF24_write_register>
}
 800391c:	bf00      	nop
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800392e:	2320      	movs	r3, #32
 8003930:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	4293      	cmp	r3, r2
 8003938:	bf28      	it	cs
 800393a:	4613      	movcs	r3, r2
 800393c:	b2da      	uxtb	r2, r3
 800393e:	4b03      	ldr	r3, [pc, #12]	; (800394c <NRF24_setPayloadSize+0x28>)
 8003940:	701a      	strb	r2, [r3, #0]
}
 8003942:	bf00      	nop
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	200000a0 	.word	0x200000a0

08003950 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
	return payload_size;
 8003954:	4b02      	ldr	r3, [pc, #8]	; (8003960 <NRF24_getPayloadSize+0x10>)
 8003956:	781b      	ldrb	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr
 8003960:	200000a0 	.word	0x200000a0

08003964 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8003968:	2060      	movs	r0, #96	; 0x60
 800396a:	f7ff fd47 	bl	80033fc <NRF24_read_register>
 800396e:	4603      	mov	r3, r0
}
 8003970:	4618      	mov	r0, r3
 8003972:	bd80      	pop	{r7, pc}

08003974 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8003978:	201d      	movs	r0, #29
 800397a:	f7ff fd3f 	bl	80033fc <NRF24_read_register>
 800397e:	4603      	mov	r3, r0
 8003980:	f023 0304 	bic.w	r3, r3, #4
 8003984:	b2db      	uxtb	r3, r3
 8003986:	4619      	mov	r1, r3
 8003988:	201d      	movs	r0, #29
 800398a:	f7ff fd87 	bl	800349c <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800398e:	2100      	movs	r1, #0
 8003990:	201c      	movs	r0, #28
 8003992:	f7ff fd83 	bl	800349c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8003996:	4b02      	ldr	r3, [pc, #8]	; (80039a0 <NRF24_disableDynamicPayloads+0x2c>)
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]
}
 800399c:	bf00      	nop
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	200000a1 	.word	0x200000a1

080039a4 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d004      	beq.n	80039be <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80039b4:	213f      	movs	r1, #63	; 0x3f
 80039b6:	2001      	movs	r0, #1
 80039b8:	f7ff fd70 	bl	800349c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80039bc:	e003      	b.n	80039c6 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80039be:	2100      	movs	r1, #0
 80039c0:	2001      	movs	r0, #1
 80039c2:	f7ff fd6b 	bl	800349c <NRF24_write_register>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	4603      	mov	r3, r0
 80039d6:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80039d8:	2006      	movs	r0, #6
 80039da:	f7ff fd0f 	bl	80033fc <NRF24_read_register>
 80039de:	4603      	mov	r3, r0
 80039e0:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
 80039e4:	f023 0306 	bic.w	r3, r3, #6
 80039e8:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d104      	bne.n	80039fa <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	f043 0306 	orr.w	r3, r3, #6
 80039f6:	73fb      	strb	r3, [r7, #15]
 80039f8:	e019      	b.n	8003a2e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d104      	bne.n	8003a0a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	f043 0304 	orr.w	r3, r3, #4
 8003a06:	73fb      	strb	r3, [r7, #15]
 8003a08:	e011      	b.n	8003a2e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d104      	bne.n	8003a1a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	f043 0302 	orr.w	r3, r3, #2
 8003a16:	73fb      	strb	r3, [r7, #15]
 8003a18:	e009      	b.n	8003a2e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d006      	beq.n	8003a2e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d103      	bne.n	8003a2e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	f043 0306 	orr.w	r3, r3, #6
 8003a2c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	4619      	mov	r1, r3
 8003a32:	2006      	movs	r0, #6
 8003a34:	f7ff fd32 	bl	800349c <NRF24_write_register>
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8003a4e:	2006      	movs	r0, #6
 8003a50:	f7ff fcd4 	bl	80033fc <NRF24_read_register>
 8003a54:	4603      	mov	r3, r0
 8003a56:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8003a58:	4b1b      	ldr	r3, [pc, #108]	; (8003ac8 <NRF24_setDataRate+0x88>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8003a5e:	7bbb      	ldrb	r3, [r7, #14]
 8003a60:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003a64:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d107      	bne.n	8003a7c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8003a6c:	4b16      	ldr	r3, [pc, #88]	; (8003ac8 <NRF24_setDataRate+0x88>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8003a72:	7bbb      	ldrb	r3, [r7, #14]
 8003a74:	f043 0320 	orr.w	r3, r3, #32
 8003a78:	73bb      	strb	r3, [r7, #14]
 8003a7a:	e00d      	b.n	8003a98 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d107      	bne.n	8003a92 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8003a82:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <NRF24_setDataRate+0x88>)
 8003a84:	2201      	movs	r2, #1
 8003a86:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8003a88:	7bbb      	ldrb	r3, [r7, #14]
 8003a8a:	f043 0308 	orr.w	r3, r3, #8
 8003a8e:	73bb      	strb	r3, [r7, #14]
 8003a90:	e002      	b.n	8003a98 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8003a92:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <NRF24_setDataRate+0x88>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8003a98:	7bbb      	ldrb	r3, [r7, #14]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	2006      	movs	r0, #6
 8003a9e:	f7ff fcfd 	bl	800349c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8003aa2:	2006      	movs	r0, #6
 8003aa4:	f7ff fcaa 	bl	80033fc <NRF24_read_register>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	461a      	mov	r2, r3
 8003aac:	7bbb      	ldrb	r3, [r7, #14]
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d102      	bne.n	8003ab8 <NRF24_setDataRate+0x78>
  {
    result = true;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
 8003ab6:	e002      	b.n	8003abe <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8003ab8:	4b03      	ldr	r3, [pc, #12]	; (8003ac8 <NRF24_setDataRate+0x88>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	200000a2 	.word	0x200000a2

08003acc <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	f7ff fc90 	bl	80033fc <NRF24_read_register>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f023 030c 	bic.w	r3, r3, #12
 8003ae2:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00f      	beq.n	8003b0a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d104      	bne.n	8003afa <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	f043 0308 	orr.w	r3, r3, #8
 8003af6:	73fb      	strb	r3, [r7, #15]
 8003af8:	e007      	b.n	8003b0a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	f043 0308 	orr.w	r3, r3, #8
 8003b00:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	f043 0304 	orr.w	r3, r3, #4
 8003b08:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	2000      	movs	r0, #0
 8003b10:	f7ff fcc4 	bl	800349c <NRF24_write_register>
}
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8003b20:	2000      	movs	r0, #0
 8003b22:	f7ff fc6b 	bl	80033fc <NRF24_read_register>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f023 0302 	bic.w	r3, r3, #2
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	4619      	mov	r1, r3
 8003b30:	2000      	movs	r0, #0
 8003b32:	f7ff fcb3 	bl	800349c <NRF24_write_register>
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b084      	sub	sp, #16
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8003b42:	f7ff fd35 	bl	80035b0 <NRF24_get_status>
 8003b46:	4603      	mov	r3, r0
 8003b48:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf14      	ite	ne
 8003b54:	2301      	movne	r3, #1
 8003b56:	2300      	moveq	r3, #0
 8003b58:	73bb      	strb	r3, [r7, #14]

  if (result)
 8003b5a:	7bbb      	ldrb	r3, [r7, #14]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d017      	beq.n	8003b90 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d007      	beq.n	8003b76 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	085b      	lsrs	r3, r3, #1
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8003b76:	2140      	movs	r1, #64	; 0x40
 8003b78:	2007      	movs	r0, #7
 8003b7a:	f7ff fc8f 	bl	800349c <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8003b88:	2120      	movs	r1, #32
 8003b8a:	2007      	movs	r0, #7
 8003b8c:	f7ff fc86 	bl	800349c <NRF24_write_register>
    }
  }
  return result;
 8003b90:	7bbb      	ldrb	r3, [r7, #14]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8003b9e:	2170      	movs	r1, #112	; 0x70
 8003ba0:	2007      	movs	r0, #7
 8003ba2:	f7ff fc7b 	bl	800349c <NRF24_write_register>
}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	f7ff fbe2 	bl	800337c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8003bb8:	2350      	movs	r3, #80	; 0x50
 8003bba:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8003bbc:	2373      	movs	r3, #115	; 0x73
 8003bbe:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8003bc0:	1d39      	adds	r1, r7, #4
 8003bc2:	2364      	movs	r3, #100	; 0x64
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	4805      	ldr	r0, [pc, #20]	; (8003bdc <NRF24_ACTIVATE_cmd+0x30>)
 8003bc8:	f7fd fefa 	bl	80019c0 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8003bcc:	2001      	movs	r0, #1
 8003bce:	f7ff fbd5 	bl	800337c <NRF24_csn>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	200000ac 	.word	0x200000ac

08003be0 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8003be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003be2:	b0a1      	sub	sp, #132	; 0x84
 8003be4:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8003be6:	f107 0308 	add.w	r3, r7, #8
 8003bea:	49c3      	ldr	r1, [pc, #780]	; (8003ef8 <printRadioSettings+0x318>)
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fc77 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003bf2:	f107 0308 	add.w	r3, r7, #8
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fc faa8 	bl	800014c <strlen>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	f107 0108 	add.w	r1, r7, #8
 8003c04:	230a      	movs	r3, #10
 8003c06:	48bd      	ldr	r0, [pc, #756]	; (8003efc <printRadioSettings+0x31c>)
 8003c08:	f7ff fa2e 	bl	8003068 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	f7ff fbf5 	bl	80033fc <NRF24_read_register>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8003c18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d013      	beq.n	8003c4c <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8003c24:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d006      	beq.n	8003c3e <printRadioSettings+0x5e>
 8003c30:	f107 0308 	add.w	r3, r7, #8
 8003c34:	49b2      	ldr	r1, [pc, #712]	; (8003f00 <printRadioSettings+0x320>)
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fc52 	bl	80044e0 <siprintf>
 8003c3c:	e00c      	b.n	8003c58 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8003c3e:	f107 0308 	add.w	r3, r7, #8
 8003c42:	49b0      	ldr	r1, [pc, #704]	; (8003f04 <printRadioSettings+0x324>)
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fc4b 	bl	80044e0 <siprintf>
 8003c4a:	e005      	b.n	8003c58 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8003c4c:	f107 0308 	add.w	r3, r7, #8
 8003c50:	49ad      	ldr	r1, [pc, #692]	; (8003f08 <printRadioSettings+0x328>)
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fc44 	bl	80044e0 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003c58:	f107 0308 	add.w	r3, r7, #8
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fc fa75 	bl	800014c <strlen>
 8003c62:	4603      	mov	r3, r0
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	f107 0108 	add.w	r1, r7, #8
 8003c6a:	230a      	movs	r3, #10
 8003c6c:	48a3      	ldr	r0, [pc, #652]	; (8003efc <printRadioSettings+0x31c>)
 8003c6e:	f7ff f9fb 	bl	8003068 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8003c72:	2001      	movs	r0, #1
 8003c74:	f7ff fbc2 	bl	80033fc <NRF24_read_register>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003c7e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003c82:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bfcc      	ite	gt
 8003c8a:	2301      	movgt	r3, #1
 8003c8c:	2300      	movle	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003c92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003c96:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bfcc      	ite	gt
 8003c9e:	2301      	movgt	r3, #1
 8003ca0:	2300      	movle	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003ca6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003caa:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	bfcc      	ite	gt
 8003cb2:	2301      	movgt	r3, #1
 8003cb4:	2300      	movle	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003cba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003cbe:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bfcc      	ite	gt
 8003cc6:	2301      	movgt	r3, #1
 8003cc8:	2300      	movle	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003cce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003cd2:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	bfcc      	ite	gt
 8003cda:	2301      	movgt	r3, #1
 8003cdc:	2300      	movle	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003ce2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003ce6:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bfcc      	ite	gt
 8003cee:	2301      	movgt	r3, #1
 8003cf0:	2300      	movle	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	f107 0008 	add.w	r0, r7, #8
 8003cf8:	9303      	str	r3, [sp, #12]
 8003cfa:	9402      	str	r4, [sp, #8]
 8003cfc:	9101      	str	r1, [sp, #4]
 8003cfe:	9200      	str	r2, [sp, #0]
 8003d00:	4633      	mov	r3, r6
 8003d02:	462a      	mov	r2, r5
 8003d04:	4981      	ldr	r1, [pc, #516]	; (8003f0c <printRadioSettings+0x32c>)
 8003d06:	f000 fbeb 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003d0a:	f107 0308 	add.w	r3, r7, #8
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fc fa1c 	bl	800014c <strlen>
 8003d14:	4603      	mov	r3, r0
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	f107 0108 	add.w	r1, r7, #8
 8003d1c:	230a      	movs	r3, #10
 8003d1e:	4877      	ldr	r0, [pc, #476]	; (8003efc <printRadioSettings+0x31c>)
 8003d20:	f7ff f9a2 	bl	8003068 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8003d24:	2002      	movs	r0, #2
 8003d26:	f7ff fb69 	bl	80033fc <NRF24_read_register>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003d30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003d34:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bfcc      	ite	gt
 8003d3c:	2301      	movgt	r3, #1
 8003d3e:	2300      	movle	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003d44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003d48:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bfcc      	ite	gt
 8003d50:	2301      	movgt	r3, #1
 8003d52:	2300      	movle	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003d58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003d5c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bfcc      	ite	gt
 8003d64:	2301      	movgt	r3, #1
 8003d66:	2300      	movle	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003d6c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003d70:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bfcc      	ite	gt
 8003d78:	2301      	movgt	r3, #1
 8003d7a:	2300      	movle	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003d80:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003d84:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	bfcc      	ite	gt
 8003d8c:	2301      	movgt	r3, #1
 8003d8e:	2300      	movle	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003d94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003d98:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	bfcc      	ite	gt
 8003da0:	2301      	movgt	r3, #1
 8003da2:	2300      	movle	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f107 0008 	add.w	r0, r7, #8
 8003daa:	9303      	str	r3, [sp, #12]
 8003dac:	9402      	str	r4, [sp, #8]
 8003dae:	9101      	str	r1, [sp, #4]
 8003db0:	9200      	str	r2, [sp, #0]
 8003db2:	4633      	mov	r3, r6
 8003db4:	462a      	mov	r2, r5
 8003db6:	4956      	ldr	r1, [pc, #344]	; (8003f10 <printRadioSettings+0x330>)
 8003db8:	f000 fb92 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003dbc:	f107 0308 	add.w	r3, r7, #8
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fc f9c3 	bl	800014c <strlen>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	f107 0108 	add.w	r1, r7, #8
 8003dce:	230a      	movs	r3, #10
 8003dd0:	484a      	ldr	r0, [pc, #296]	; (8003efc <printRadioSettings+0x31c>)
 8003dd2:	f7ff f949 	bl	8003068 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8003dd6:	2003      	movs	r0, #3
 8003dd8:	f7ff fb10 	bl	80033fc <NRF24_read_register>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8003de6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003dea:	3302      	adds	r3, #2
 8003dec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8003df0:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003df4:	f107 0308 	add.w	r3, r7, #8
 8003df8:	4946      	ldr	r1, [pc, #280]	; (8003f14 <printRadioSettings+0x334>)
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fb70 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003e00:	f107 0308 	add.w	r3, r7, #8
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fc f9a1 	bl	800014c <strlen>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	f107 0108 	add.w	r1, r7, #8
 8003e12:	230a      	movs	r3, #10
 8003e14:	4839      	ldr	r0, [pc, #228]	; (8003efc <printRadioSettings+0x31c>)
 8003e16:	f7ff f927 	bl	8003068 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8003e1a:	2005      	movs	r0, #5
 8003e1c:	f7ff faee 	bl	80033fc <NRF24_read_register>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8003e26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e2e:	f107 0308 	add.w	r3, r7, #8
 8003e32:	4939      	ldr	r1, [pc, #228]	; (8003f18 <printRadioSettings+0x338>)
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fb53 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003e3a:	f107 0308 	add.w	r3, r7, #8
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fc f984 	bl	800014c <strlen>
 8003e44:	4603      	mov	r3, r0
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	f107 0108 	add.w	r1, r7, #8
 8003e4c:	230a      	movs	r3, #10
 8003e4e:	482b      	ldr	r0, [pc, #172]	; (8003efc <printRadioSettings+0x31c>)
 8003e50:	f7ff f90a 	bl	8003068 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8003e54:	2006      	movs	r0, #6
 8003e56:	f7ff fad1 	bl	80033fc <NRF24_read_register>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8003e60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d006      	beq.n	8003e7a <printRadioSettings+0x29a>
 8003e6c:	f107 0308 	add.w	r3, r7, #8
 8003e70:	492a      	ldr	r1, [pc, #168]	; (8003f1c <printRadioSettings+0x33c>)
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fb34 	bl	80044e0 <siprintf>
 8003e78:	e005      	b.n	8003e86 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8003e7a:	f107 0308 	add.w	r3, r7, #8
 8003e7e:	4928      	ldr	r1, [pc, #160]	; (8003f20 <printRadioSettings+0x340>)
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 fb2d 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003e86:	f107 0308 	add.w	r3, r7, #8
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fc f95e 	bl	800014c <strlen>
 8003e90:	4603      	mov	r3, r0
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	f107 0108 	add.w	r1, r7, #8
 8003e98:	230a      	movs	r3, #10
 8003e9a:	4818      	ldr	r0, [pc, #96]	; (8003efc <printRadioSettings+0x31c>)
 8003e9c:	f7ff f8e4 	bl	8003068 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8003ea0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003ea4:	f003 0306 	and.w	r3, r3, #6
 8003ea8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8003eac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003eb0:	085b      	lsrs	r3, r3, #1
 8003eb2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8003eb6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <printRadioSettings+0x2ec>
 8003ebe:	f107 0308 	add.w	r3, r7, #8
 8003ec2:	4918      	ldr	r1, [pc, #96]	; (8003f24 <printRadioSettings+0x344>)
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fb0b 	bl	80044e0 <siprintf>
 8003eca:	e03b      	b.n	8003f44 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8003ecc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d106      	bne.n	8003ee2 <printRadioSettings+0x302>
 8003ed4:	f107 0308 	add.w	r3, r7, #8
 8003ed8:	4913      	ldr	r1, [pc, #76]	; (8003f28 <printRadioSettings+0x348>)
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fb00 	bl	80044e0 <siprintf>
 8003ee0:	e030      	b.n	8003f44 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8003ee2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d122      	bne.n	8003f30 <printRadioSettings+0x350>
 8003eea:	f107 0308 	add.w	r3, r7, #8
 8003eee:	490f      	ldr	r1, [pc, #60]	; (8003f2c <printRadioSettings+0x34c>)
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 faf5 	bl	80044e0 <siprintf>
 8003ef6:	e025      	b.n	8003f44 <printRadioSettings+0x364>
 8003ef8:	08004d60 	.word	0x08004d60
 8003efc:	20000104 	.word	0x20000104
 8003f00:	08004d94 	.word	0x08004d94
 8003f04:	08004db0 	.word	0x08004db0
 8003f08:	08004dcc 	.word	0x08004dcc
 8003f0c:	08004de0 	.word	0x08004de0
 8003f10:	08004e24 	.word	0x08004e24
 8003f14:	08004e70 	.word	0x08004e70
 8003f18:	08004e8c 	.word	0x08004e8c
 8003f1c:	08004ea0 	.word	0x08004ea0
 8003f20:	08004eb8 	.word	0x08004eb8
 8003f24:	08004ed0 	.word	0x08004ed0
 8003f28:	08004ee4 	.word	0x08004ee4
 8003f2c:	08004ef8 	.word	0x08004ef8
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8003f30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d105      	bne.n	8003f44 <printRadioSettings+0x364>
 8003f38:	f107 0308 	add.w	r3, r7, #8
 8003f3c:	49d7      	ldr	r1, [pc, #860]	; (800429c <printRadioSettings+0x6bc>)
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 face 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003f44:	f107 0308 	add.w	r3, r7, #8
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fc f8ff 	bl	800014c <strlen>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	f107 0108 	add.w	r1, r7, #8
 8003f56:	230a      	movs	r3, #10
 8003f58:	48d1      	ldr	r0, [pc, #836]	; (80042a0 <printRadioSettings+0x6c0>)
 8003f5a:	f7ff f885 	bl	8003068 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8003f5e:	463b      	mov	r3, r7
 8003f60:	2205      	movs	r2, #5
 8003f62:	4619      	mov	r1, r3
 8003f64:	200a      	movs	r0, #10
 8003f66:	f7ff fa71 	bl	800344c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8003f6a:	793b      	ldrb	r3, [r7, #4]
 8003f6c:	461c      	mov	r4, r3
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	461d      	mov	r5, r3
 8003f72:	78bb      	ldrb	r3, [r7, #2]
 8003f74:	787a      	ldrb	r2, [r7, #1]
 8003f76:	7839      	ldrb	r1, [r7, #0]
 8003f78:	f107 0008 	add.w	r0, r7, #8
 8003f7c:	9102      	str	r1, [sp, #8]
 8003f7e:	9201      	str	r2, [sp, #4]
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	462b      	mov	r3, r5
 8003f84:	4622      	mov	r2, r4
 8003f86:	49c7      	ldr	r1, [pc, #796]	; (80042a4 <printRadioSettings+0x6c4>)
 8003f88:	f000 faaa 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003f8c:	f107 0308 	add.w	r3, r7, #8
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fc f8db 	bl	800014c <strlen>
 8003f96:	4603      	mov	r3, r0
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	f107 0108 	add.w	r1, r7, #8
 8003f9e:	230a      	movs	r3, #10
 8003fa0:	48bf      	ldr	r0, [pc, #764]	; (80042a0 <printRadioSettings+0x6c0>)
 8003fa2:	f7ff f861 	bl	8003068 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8003fa6:	463b      	mov	r3, r7
 8003fa8:	2205      	movs	r2, #5
 8003faa:	4619      	mov	r1, r3
 8003fac:	200b      	movs	r0, #11
 8003fae:	f7ff fa4d 	bl	800344c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8003fb2:	793b      	ldrb	r3, [r7, #4]
 8003fb4:	461c      	mov	r4, r3
 8003fb6:	78fb      	ldrb	r3, [r7, #3]
 8003fb8:	461d      	mov	r5, r3
 8003fba:	78bb      	ldrb	r3, [r7, #2]
 8003fbc:	787a      	ldrb	r2, [r7, #1]
 8003fbe:	7839      	ldrb	r1, [r7, #0]
 8003fc0:	f107 0008 	add.w	r0, r7, #8
 8003fc4:	9102      	str	r1, [sp, #8]
 8003fc6:	9201      	str	r2, [sp, #4]
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	462b      	mov	r3, r5
 8003fcc:	4622      	mov	r2, r4
 8003fce:	49b6      	ldr	r1, [pc, #728]	; (80042a8 <printRadioSettings+0x6c8>)
 8003fd0:	f000 fa86 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003fd4:	f107 0308 	add.w	r3, r7, #8
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fc f8b7 	bl	800014c <strlen>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	f107 0108 	add.w	r1, r7, #8
 8003fe6:	230a      	movs	r3, #10
 8003fe8:	48ad      	ldr	r0, [pc, #692]	; (80042a0 <printRadioSettings+0x6c0>)
 8003fea:	f7ff f83d 	bl	8003068 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8003fee:	463b      	mov	r3, r7
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	200c      	movs	r0, #12
 8003ff6:	f7ff fa29 	bl	800344c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8003ffa:	783b      	ldrb	r3, [r7, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f107 0308 	add.w	r3, r7, #8
 8004002:	49aa      	ldr	r1, [pc, #680]	; (80042ac <printRadioSettings+0x6cc>)
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fa6b 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800400a:	f107 0308 	add.w	r3, r7, #8
 800400e:	4618      	mov	r0, r3
 8004010:	f7fc f89c 	bl	800014c <strlen>
 8004014:	4603      	mov	r3, r0
 8004016:	b29a      	uxth	r2, r3
 8004018:	f107 0108 	add.w	r1, r7, #8
 800401c:	230a      	movs	r3, #10
 800401e:	48a0      	ldr	r0, [pc, #640]	; (80042a0 <printRadioSettings+0x6c0>)
 8004020:	f7ff f822 	bl	8003068 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8004024:	463b      	mov	r3, r7
 8004026:	2201      	movs	r2, #1
 8004028:	4619      	mov	r1, r3
 800402a:	200d      	movs	r0, #13
 800402c:	f7ff fa0e 	bl	800344c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004030:	783b      	ldrb	r3, [r7, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	f107 0308 	add.w	r3, r7, #8
 8004038:	499d      	ldr	r1, [pc, #628]	; (80042b0 <printRadioSettings+0x6d0>)
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fa50 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004040:	f107 0308 	add.w	r3, r7, #8
 8004044:	4618      	mov	r0, r3
 8004046:	f7fc f881 	bl	800014c <strlen>
 800404a:	4603      	mov	r3, r0
 800404c:	b29a      	uxth	r2, r3
 800404e:	f107 0108 	add.w	r1, r7, #8
 8004052:	230a      	movs	r3, #10
 8004054:	4892      	ldr	r0, [pc, #584]	; (80042a0 <printRadioSettings+0x6c0>)
 8004056:	f7ff f807 	bl	8003068 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800405a:	463b      	mov	r3, r7
 800405c:	2201      	movs	r2, #1
 800405e:	4619      	mov	r1, r3
 8004060:	200e      	movs	r0, #14
 8004062:	f7ff f9f3 	bl	800344c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004066:	783b      	ldrb	r3, [r7, #0]
 8004068:	461a      	mov	r2, r3
 800406a:	f107 0308 	add.w	r3, r7, #8
 800406e:	4991      	ldr	r1, [pc, #580]	; (80042b4 <printRadioSettings+0x6d4>)
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fa35 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004076:	f107 0308 	add.w	r3, r7, #8
 800407a:	4618      	mov	r0, r3
 800407c:	f7fc f866 	bl	800014c <strlen>
 8004080:	4603      	mov	r3, r0
 8004082:	b29a      	uxth	r2, r3
 8004084:	f107 0108 	add.w	r1, r7, #8
 8004088:	230a      	movs	r3, #10
 800408a:	4885      	ldr	r0, [pc, #532]	; (80042a0 <printRadioSettings+0x6c0>)
 800408c:	f7fe ffec 	bl	8003068 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8004090:	463b      	mov	r3, r7
 8004092:	2201      	movs	r2, #1
 8004094:	4619      	mov	r1, r3
 8004096:	200f      	movs	r0, #15
 8004098:	f7ff f9d8 	bl	800344c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800409c:	783b      	ldrb	r3, [r7, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	f107 0308 	add.w	r3, r7, #8
 80040a4:	4984      	ldr	r1, [pc, #528]	; (80042b8 <printRadioSettings+0x6d8>)
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fa1a 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80040ac:	f107 0308 	add.w	r3, r7, #8
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fc f84b 	bl	800014c <strlen>
 80040b6:	4603      	mov	r3, r0
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	f107 0108 	add.w	r1, r7, #8
 80040be:	230a      	movs	r3, #10
 80040c0:	4877      	ldr	r0, [pc, #476]	; (80042a0 <printRadioSettings+0x6c0>)
 80040c2:	f7fe ffd1 	bl	8003068 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80040c6:	463b      	mov	r3, r7
 80040c8:	2205      	movs	r2, #5
 80040ca:	4619      	mov	r1, r3
 80040cc:	2010      	movs	r0, #16
 80040ce:	f7ff f9bd 	bl	800344c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80040d2:	793b      	ldrb	r3, [r7, #4]
 80040d4:	461c      	mov	r4, r3
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	461d      	mov	r5, r3
 80040da:	78bb      	ldrb	r3, [r7, #2]
 80040dc:	787a      	ldrb	r2, [r7, #1]
 80040de:	7839      	ldrb	r1, [r7, #0]
 80040e0:	f107 0008 	add.w	r0, r7, #8
 80040e4:	9102      	str	r1, [sp, #8]
 80040e6:	9201      	str	r2, [sp, #4]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	462b      	mov	r3, r5
 80040ec:	4622      	mov	r2, r4
 80040ee:	4973      	ldr	r1, [pc, #460]	; (80042bc <printRadioSettings+0x6dc>)
 80040f0:	f000 f9f6 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80040f4:	f107 0308 	add.w	r3, r7, #8
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fc f827 	bl	800014c <strlen>
 80040fe:	4603      	mov	r3, r0
 8004100:	b29a      	uxth	r2, r3
 8004102:	f107 0108 	add.w	r1, r7, #8
 8004106:	230a      	movs	r3, #10
 8004108:	4865      	ldr	r0, [pc, #404]	; (80042a0 <printRadioSettings+0x6c0>)
 800410a:	f7fe ffad 	bl	8003068 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800410e:	2011      	movs	r0, #17
 8004110:	f7ff f974 	bl	80033fc <NRF24_read_register>
 8004114:	4603      	mov	r3, r0
 8004116:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800411a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800411e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004122:	f107 0308 	add.w	r3, r7, #8
 8004126:	4966      	ldr	r1, [pc, #408]	; (80042c0 <printRadioSettings+0x6e0>)
 8004128:	4618      	mov	r0, r3
 800412a:	f000 f9d9 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800412e:	f107 0308 	add.w	r3, r7, #8
 8004132:	4618      	mov	r0, r3
 8004134:	f7fc f80a 	bl	800014c <strlen>
 8004138:	4603      	mov	r3, r0
 800413a:	b29a      	uxth	r2, r3
 800413c:	f107 0108 	add.w	r1, r7, #8
 8004140:	230a      	movs	r3, #10
 8004142:	4857      	ldr	r0, [pc, #348]	; (80042a0 <printRadioSettings+0x6c0>)
 8004144:	f7fe ff90 	bl	8003068 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8004148:	2012      	movs	r0, #18
 800414a:	f7ff f957 	bl	80033fc <NRF24_read_register>
 800414e:	4603      	mov	r3, r0
 8004150:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004154:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004158:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800415c:	f107 0308 	add.w	r3, r7, #8
 8004160:	4958      	ldr	r1, [pc, #352]	; (80042c4 <printRadioSettings+0x6e4>)
 8004162:	4618      	mov	r0, r3
 8004164:	f000 f9bc 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004168:	f107 0308 	add.w	r3, r7, #8
 800416c:	4618      	mov	r0, r3
 800416e:	f7fb ffed 	bl	800014c <strlen>
 8004172:	4603      	mov	r3, r0
 8004174:	b29a      	uxth	r2, r3
 8004176:	f107 0108 	add.w	r1, r7, #8
 800417a:	230a      	movs	r3, #10
 800417c:	4848      	ldr	r0, [pc, #288]	; (80042a0 <printRadioSettings+0x6c0>)
 800417e:	f7fe ff73 	bl	8003068 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8004182:	2013      	movs	r0, #19
 8004184:	f7ff f93a 	bl	80033fc <NRF24_read_register>
 8004188:	4603      	mov	r3, r0
 800418a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800418e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004192:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004196:	f107 0308 	add.w	r3, r7, #8
 800419a:	494b      	ldr	r1, [pc, #300]	; (80042c8 <printRadioSettings+0x6e8>)
 800419c:	4618      	mov	r0, r3
 800419e:	f000 f99f 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80041a2:	f107 0308 	add.w	r3, r7, #8
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fb ffd0 	bl	800014c <strlen>
 80041ac:	4603      	mov	r3, r0
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	f107 0108 	add.w	r1, r7, #8
 80041b4:	230a      	movs	r3, #10
 80041b6:	483a      	ldr	r0, [pc, #232]	; (80042a0 <printRadioSettings+0x6c0>)
 80041b8:	f7fe ff56 	bl	8003068 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 80041bc:	2014      	movs	r0, #20
 80041be:	f7ff f91d 	bl	80033fc <NRF24_read_register>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80041c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80041cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041d0:	f107 0308 	add.w	r3, r7, #8
 80041d4:	493d      	ldr	r1, [pc, #244]	; (80042cc <printRadioSettings+0x6ec>)
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 f982 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80041dc:	f107 0308 	add.w	r3, r7, #8
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fb ffb3 	bl	800014c <strlen>
 80041e6:	4603      	mov	r3, r0
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	f107 0108 	add.w	r1, r7, #8
 80041ee:	230a      	movs	r3, #10
 80041f0:	482b      	ldr	r0, [pc, #172]	; (80042a0 <printRadioSettings+0x6c0>)
 80041f2:	f7fe ff39 	bl	8003068 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 80041f6:	2015      	movs	r0, #21
 80041f8:	f7ff f900 	bl	80033fc <NRF24_read_register>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004202:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004206:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800420a:	f107 0308 	add.w	r3, r7, #8
 800420e:	4930      	ldr	r1, [pc, #192]	; (80042d0 <printRadioSettings+0x6f0>)
 8004210:	4618      	mov	r0, r3
 8004212:	f000 f965 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004216:	f107 0308 	add.w	r3, r7, #8
 800421a:	4618      	mov	r0, r3
 800421c:	f7fb ff96 	bl	800014c <strlen>
 8004220:	4603      	mov	r3, r0
 8004222:	b29a      	uxth	r2, r3
 8004224:	f107 0108 	add.w	r1, r7, #8
 8004228:	230a      	movs	r3, #10
 800422a:	481d      	ldr	r0, [pc, #116]	; (80042a0 <printRadioSettings+0x6c0>)
 800422c:	f7fe ff1c 	bl	8003068 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8004230:	2016      	movs	r0, #22
 8004232:	f7ff f8e3 	bl	80033fc <NRF24_read_register>
 8004236:	4603      	mov	r3, r0
 8004238:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800423c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004240:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004244:	f107 0308 	add.w	r3, r7, #8
 8004248:	4922      	ldr	r1, [pc, #136]	; (80042d4 <printRadioSettings+0x6f4>)
 800424a:	4618      	mov	r0, r3
 800424c:	f000 f948 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004250:	f107 0308 	add.w	r3, r7, #8
 8004254:	4618      	mov	r0, r3
 8004256:	f7fb ff79 	bl	800014c <strlen>
 800425a:	4603      	mov	r3, r0
 800425c:	b29a      	uxth	r2, r3
 800425e:	f107 0108 	add.w	r1, r7, #8
 8004262:	230a      	movs	r3, #10
 8004264:	480e      	ldr	r0, [pc, #56]	; (80042a0 <printRadioSettings+0x6c0>)
 8004266:	f7fe feff 	bl	8003068 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800426a:	201c      	movs	r0, #28
 800426c:	f7ff f8c6 	bl	80033fc <NRF24_read_register>
 8004270:	4603      	mov	r3, r0
 8004272:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004276:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800427a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800427e:	2b00      	cmp	r3, #0
 8004280:	bfcc      	ite	gt
 8004282:	2301      	movgt	r3, #1
 8004284:	2300      	movle	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800428a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800428e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004292:	2b00      	cmp	r3, #0
 8004294:	bfcc      	ite	gt
 8004296:	2301      	movgt	r3, #1
 8004298:	2300      	movle	r3, #0
 800429a:	e01d      	b.n	80042d8 <printRadioSettings+0x6f8>
 800429c:	08004f0c 	.word	0x08004f0c
 80042a0:	20000104 	.word	0x20000104
 80042a4:	08004f20 	.word	0x08004f20
 80042a8:	08004f50 	.word	0x08004f50
 80042ac:	08004f80 	.word	0x08004f80
 80042b0:	08004fa8 	.word	0x08004fa8
 80042b4:	08004fd0 	.word	0x08004fd0
 80042b8:	08004ff8 	.word	0x08004ff8
 80042bc:	08005020 	.word	0x08005020
 80042c0:	0800504c 	.word	0x0800504c
 80042c4:	08005068 	.word	0x08005068
 80042c8:	08005084 	.word	0x08005084
 80042cc:	080050a0 	.word	0x080050a0
 80042d0:	080050bc 	.word	0x080050bc
 80042d4:	080050d8 	.word	0x080050d8
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80042dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80042e0:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bfcc      	ite	gt
 80042e8:	2301      	movgt	r3, #1
 80042ea:	2300      	movle	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80042f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80042f4:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	bfcc      	ite	gt
 80042fc:	2301      	movgt	r3, #1
 80042fe:	2300      	movle	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004304:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004308:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800430c:	2b00      	cmp	r3, #0
 800430e:	bfcc      	ite	gt
 8004310:	2301      	movgt	r3, #1
 8004312:	2300      	movle	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004318:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800431c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004320:	2b00      	cmp	r3, #0
 8004322:	bfcc      	ite	gt
 8004324:	2301      	movgt	r3, #1
 8004326:	2300      	movle	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	f107 0008 	add.w	r0, r7, #8
 800432e:	9303      	str	r3, [sp, #12]
 8004330:	9402      	str	r4, [sp, #8]
 8004332:	9101      	str	r1, [sp, #4]
 8004334:	9200      	str	r2, [sp, #0]
 8004336:	4633      	mov	r3, r6
 8004338:	462a      	mov	r2, r5
 800433a:	4936      	ldr	r1, [pc, #216]	; (8004414 <printRadioSettings+0x834>)
 800433c:	f000 f8d0 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004340:	f107 0308 	add.w	r3, r7, #8
 8004344:	4618      	mov	r0, r3
 8004346:	f7fb ff01 	bl	800014c <strlen>
 800434a:	4603      	mov	r3, r0
 800434c:	b29a      	uxth	r2, r3
 800434e:	f107 0108 	add.w	r1, r7, #8
 8004352:	230a      	movs	r3, #10
 8004354:	4830      	ldr	r0, [pc, #192]	; (8004418 <printRadioSettings+0x838>)
 8004356:	f7fe fe87 	bl	8003068 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800435a:	201d      	movs	r0, #29
 800435c:	f7ff f84e 	bl	80033fc <NRF24_read_register>
 8004360:	4603      	mov	r3, r0
 8004362:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8004366:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b00      	cmp	r3, #0
 8004370:	d006      	beq.n	8004380 <printRadioSettings+0x7a0>
 8004372:	f107 0308 	add.w	r3, r7, #8
 8004376:	4929      	ldr	r1, [pc, #164]	; (800441c <printRadioSettings+0x83c>)
 8004378:	4618      	mov	r0, r3
 800437a:	f000 f8b1 	bl	80044e0 <siprintf>
 800437e:	e005      	b.n	800438c <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8004380:	f107 0308 	add.w	r3, r7, #8
 8004384:	4926      	ldr	r1, [pc, #152]	; (8004420 <printRadioSettings+0x840>)
 8004386:	4618      	mov	r0, r3
 8004388:	f000 f8aa 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800438c:	f107 0308 	add.w	r3, r7, #8
 8004390:	4618      	mov	r0, r3
 8004392:	f7fb fedb 	bl	800014c <strlen>
 8004396:	4603      	mov	r3, r0
 8004398:	b29a      	uxth	r2, r3
 800439a:	f107 0108 	add.w	r1, r7, #8
 800439e:	230a      	movs	r3, #10
 80043a0:	481d      	ldr	r0, [pc, #116]	; (8004418 <printRadioSettings+0x838>)
 80043a2:	f7fe fe61 	bl	8003068 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80043a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d006      	beq.n	80043c0 <printRadioSettings+0x7e0>
 80043b2:	f107 0308 	add.w	r3, r7, #8
 80043b6:	491b      	ldr	r1, [pc, #108]	; (8004424 <printRadioSettings+0x844>)
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f891 	bl	80044e0 <siprintf>
 80043be:	e005      	b.n	80043cc <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80043c0:	f107 0308 	add.w	r3, r7, #8
 80043c4:	4918      	ldr	r1, [pc, #96]	; (8004428 <printRadioSettings+0x848>)
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f88a 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80043cc:	f107 0308 	add.w	r3, r7, #8
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fb febb 	bl	800014c <strlen>
 80043d6:	4603      	mov	r3, r0
 80043d8:	b29a      	uxth	r2, r3
 80043da:	f107 0108 	add.w	r1, r7, #8
 80043de:	230a      	movs	r3, #10
 80043e0:	480d      	ldr	r0, [pc, #52]	; (8004418 <printRadioSettings+0x838>)
 80043e2:	f7fe fe41 	bl	8003068 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80043e6:	f107 0308 	add.w	r3, r7, #8
 80043ea:	4910      	ldr	r1, [pc, #64]	; (800442c <printRadioSettings+0x84c>)
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 f877 	bl	80044e0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80043f2:	f107 0308 	add.w	r3, r7, #8
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fb fea8 	bl	800014c <strlen>
 80043fc:	4603      	mov	r3, r0
 80043fe:	b29a      	uxth	r2, r3
 8004400:	f107 0108 	add.w	r1, r7, #8
 8004404:	230a      	movs	r3, #10
 8004406:	4804      	ldr	r0, [pc, #16]	; (8004418 <printRadioSettings+0x838>)
 8004408:	f7fe fe2e 	bl	8003068 <HAL_UART_Transmit>
}
 800440c:	bf00      	nop
 800440e:	3774      	adds	r7, #116	; 0x74
 8004410:	46bd      	mov	sp, r7
 8004412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004414:	080050f4 	.word	0x080050f4
 8004418:	20000104 	.word	0x20000104
 800441c:	08005140 	.word	0x08005140
 8004420:	08005158 	.word	0x08005158
 8004424:	08005170 	.word	0x08005170
 8004428:	0800518c 	.word	0x0800518c
 800442c:	08004d60 	.word	0x08004d60

08004430 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8004430:	b084      	sub	sp, #16
 8004432:	b580      	push	{r7, lr}
 8004434:	af00      	add	r7, sp, #0
 8004436:	f107 0c08 	add.w	ip, r7, #8
 800443a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800443e:	4b07      	ldr	r3, [pc, #28]	; (800445c <nrf24_DebugUART_Init+0x2c>)
 8004440:	4618      	mov	r0, r3
 8004442:	f107 0308 	add.w	r3, r7, #8
 8004446:	2244      	movs	r2, #68	; 0x44
 8004448:	4619      	mov	r1, r3
 800444a:	f000 f833 	bl	80044b4 <memcpy>
}
 800444e:	bf00      	nop
 8004450:	46bd      	mov	sp, r7
 8004452:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004456:	b004      	add	sp, #16
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000104 	.word	0x20000104

08004460 <__errno>:
 8004460:	4b01      	ldr	r3, [pc, #4]	; (8004468 <__errno+0x8>)
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	20000014 	.word	0x20000014

0800446c <__libc_init_array>:
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	2600      	movs	r6, #0
 8004470:	4d0c      	ldr	r5, [pc, #48]	; (80044a4 <__libc_init_array+0x38>)
 8004472:	4c0d      	ldr	r4, [pc, #52]	; (80044a8 <__libc_init_array+0x3c>)
 8004474:	1b64      	subs	r4, r4, r5
 8004476:	10a4      	asrs	r4, r4, #2
 8004478:	42a6      	cmp	r6, r4
 800447a:	d109      	bne.n	8004490 <__libc_init_array+0x24>
 800447c:	f000 fc5c 	bl	8004d38 <_init>
 8004480:	2600      	movs	r6, #0
 8004482:	4d0a      	ldr	r5, [pc, #40]	; (80044ac <__libc_init_array+0x40>)
 8004484:	4c0a      	ldr	r4, [pc, #40]	; (80044b0 <__libc_init_array+0x44>)
 8004486:	1b64      	subs	r4, r4, r5
 8004488:	10a4      	asrs	r4, r4, #2
 800448a:	42a6      	cmp	r6, r4
 800448c:	d105      	bne.n	800449a <__libc_init_array+0x2e>
 800448e:	bd70      	pop	{r4, r5, r6, pc}
 8004490:	f855 3b04 	ldr.w	r3, [r5], #4
 8004494:	4798      	blx	r3
 8004496:	3601      	adds	r6, #1
 8004498:	e7ee      	b.n	8004478 <__libc_init_array+0xc>
 800449a:	f855 3b04 	ldr.w	r3, [r5], #4
 800449e:	4798      	blx	r3
 80044a0:	3601      	adds	r6, #1
 80044a2:	e7f2      	b.n	800448a <__libc_init_array+0x1e>
 80044a4:	08005300 	.word	0x08005300
 80044a8:	08005300 	.word	0x08005300
 80044ac:	08005300 	.word	0x08005300
 80044b0:	08005304 	.word	0x08005304

080044b4 <memcpy>:
 80044b4:	440a      	add	r2, r1
 80044b6:	4291      	cmp	r1, r2
 80044b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80044bc:	d100      	bne.n	80044c0 <memcpy+0xc>
 80044be:	4770      	bx	lr
 80044c0:	b510      	push	{r4, lr}
 80044c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044c6:	4291      	cmp	r1, r2
 80044c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044cc:	d1f9      	bne.n	80044c2 <memcpy+0xe>
 80044ce:	bd10      	pop	{r4, pc}

080044d0 <memset>:
 80044d0:	4603      	mov	r3, r0
 80044d2:	4402      	add	r2, r0
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d100      	bne.n	80044da <memset+0xa>
 80044d8:	4770      	bx	lr
 80044da:	f803 1b01 	strb.w	r1, [r3], #1
 80044de:	e7f9      	b.n	80044d4 <memset+0x4>

080044e0 <siprintf>:
 80044e0:	b40e      	push	{r1, r2, r3}
 80044e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044e6:	b500      	push	{lr}
 80044e8:	b09c      	sub	sp, #112	; 0x70
 80044ea:	ab1d      	add	r3, sp, #116	; 0x74
 80044ec:	9002      	str	r0, [sp, #8]
 80044ee:	9006      	str	r0, [sp, #24]
 80044f0:	9107      	str	r1, [sp, #28]
 80044f2:	9104      	str	r1, [sp, #16]
 80044f4:	4808      	ldr	r0, [pc, #32]	; (8004518 <siprintf+0x38>)
 80044f6:	4909      	ldr	r1, [pc, #36]	; (800451c <siprintf+0x3c>)
 80044f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80044fc:	9105      	str	r1, [sp, #20]
 80044fe:	6800      	ldr	r0, [r0, #0]
 8004500:	a902      	add	r1, sp, #8
 8004502:	9301      	str	r3, [sp, #4]
 8004504:	f000 f868 	bl	80045d8 <_svfiprintf_r>
 8004508:	2200      	movs	r2, #0
 800450a:	9b02      	ldr	r3, [sp, #8]
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	b01c      	add	sp, #112	; 0x70
 8004510:	f85d eb04 	ldr.w	lr, [sp], #4
 8004514:	b003      	add	sp, #12
 8004516:	4770      	bx	lr
 8004518:	20000014 	.word	0x20000014
 800451c:	ffff0208 	.word	0xffff0208

08004520 <__ssputs_r>:
 8004520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004524:	688e      	ldr	r6, [r1, #8]
 8004526:	4682      	mov	sl, r0
 8004528:	429e      	cmp	r6, r3
 800452a:	460c      	mov	r4, r1
 800452c:	4690      	mov	r8, r2
 800452e:	461f      	mov	r7, r3
 8004530:	d838      	bhi.n	80045a4 <__ssputs_r+0x84>
 8004532:	898a      	ldrh	r2, [r1, #12]
 8004534:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004538:	d032      	beq.n	80045a0 <__ssputs_r+0x80>
 800453a:	6825      	ldr	r5, [r4, #0]
 800453c:	6909      	ldr	r1, [r1, #16]
 800453e:	3301      	adds	r3, #1
 8004540:	eba5 0901 	sub.w	r9, r5, r1
 8004544:	6965      	ldr	r5, [r4, #20]
 8004546:	444b      	add	r3, r9
 8004548:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800454c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004550:	106d      	asrs	r5, r5, #1
 8004552:	429d      	cmp	r5, r3
 8004554:	bf38      	it	cc
 8004556:	461d      	movcc	r5, r3
 8004558:	0553      	lsls	r3, r2, #21
 800455a:	d531      	bpl.n	80045c0 <__ssputs_r+0xa0>
 800455c:	4629      	mov	r1, r5
 800455e:	f000 fb45 	bl	8004bec <_malloc_r>
 8004562:	4606      	mov	r6, r0
 8004564:	b950      	cbnz	r0, 800457c <__ssputs_r+0x5c>
 8004566:	230c      	movs	r3, #12
 8004568:	f04f 30ff 	mov.w	r0, #4294967295
 800456c:	f8ca 3000 	str.w	r3, [sl]
 8004570:	89a3      	ldrh	r3, [r4, #12]
 8004572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004576:	81a3      	strh	r3, [r4, #12]
 8004578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800457c:	464a      	mov	r2, r9
 800457e:	6921      	ldr	r1, [r4, #16]
 8004580:	f7ff ff98 	bl	80044b4 <memcpy>
 8004584:	89a3      	ldrh	r3, [r4, #12]
 8004586:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800458a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458e:	81a3      	strh	r3, [r4, #12]
 8004590:	6126      	str	r6, [r4, #16]
 8004592:	444e      	add	r6, r9
 8004594:	6026      	str	r6, [r4, #0]
 8004596:	463e      	mov	r6, r7
 8004598:	6165      	str	r5, [r4, #20]
 800459a:	eba5 0509 	sub.w	r5, r5, r9
 800459e:	60a5      	str	r5, [r4, #8]
 80045a0:	42be      	cmp	r6, r7
 80045a2:	d900      	bls.n	80045a6 <__ssputs_r+0x86>
 80045a4:	463e      	mov	r6, r7
 80045a6:	4632      	mov	r2, r6
 80045a8:	4641      	mov	r1, r8
 80045aa:	6820      	ldr	r0, [r4, #0]
 80045ac:	f000 fab8 	bl	8004b20 <memmove>
 80045b0:	68a3      	ldr	r3, [r4, #8]
 80045b2:	6822      	ldr	r2, [r4, #0]
 80045b4:	1b9b      	subs	r3, r3, r6
 80045b6:	4432      	add	r2, r6
 80045b8:	2000      	movs	r0, #0
 80045ba:	60a3      	str	r3, [r4, #8]
 80045bc:	6022      	str	r2, [r4, #0]
 80045be:	e7db      	b.n	8004578 <__ssputs_r+0x58>
 80045c0:	462a      	mov	r2, r5
 80045c2:	f000 fb6d 	bl	8004ca0 <_realloc_r>
 80045c6:	4606      	mov	r6, r0
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d1e1      	bne.n	8004590 <__ssputs_r+0x70>
 80045cc:	4650      	mov	r0, sl
 80045ce:	6921      	ldr	r1, [r4, #16]
 80045d0:	f000 fac0 	bl	8004b54 <_free_r>
 80045d4:	e7c7      	b.n	8004566 <__ssputs_r+0x46>
	...

080045d8 <_svfiprintf_r>:
 80045d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045dc:	4698      	mov	r8, r3
 80045de:	898b      	ldrh	r3, [r1, #12]
 80045e0:	4607      	mov	r7, r0
 80045e2:	061b      	lsls	r3, r3, #24
 80045e4:	460d      	mov	r5, r1
 80045e6:	4614      	mov	r4, r2
 80045e8:	b09d      	sub	sp, #116	; 0x74
 80045ea:	d50e      	bpl.n	800460a <_svfiprintf_r+0x32>
 80045ec:	690b      	ldr	r3, [r1, #16]
 80045ee:	b963      	cbnz	r3, 800460a <_svfiprintf_r+0x32>
 80045f0:	2140      	movs	r1, #64	; 0x40
 80045f2:	f000 fafb 	bl	8004bec <_malloc_r>
 80045f6:	6028      	str	r0, [r5, #0]
 80045f8:	6128      	str	r0, [r5, #16]
 80045fa:	b920      	cbnz	r0, 8004606 <_svfiprintf_r+0x2e>
 80045fc:	230c      	movs	r3, #12
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	e0d1      	b.n	80047aa <_svfiprintf_r+0x1d2>
 8004606:	2340      	movs	r3, #64	; 0x40
 8004608:	616b      	str	r3, [r5, #20]
 800460a:	2300      	movs	r3, #0
 800460c:	9309      	str	r3, [sp, #36]	; 0x24
 800460e:	2320      	movs	r3, #32
 8004610:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004614:	2330      	movs	r3, #48	; 0x30
 8004616:	f04f 0901 	mov.w	r9, #1
 800461a:	f8cd 800c 	str.w	r8, [sp, #12]
 800461e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80047c4 <_svfiprintf_r+0x1ec>
 8004622:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004626:	4623      	mov	r3, r4
 8004628:	469a      	mov	sl, r3
 800462a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800462e:	b10a      	cbz	r2, 8004634 <_svfiprintf_r+0x5c>
 8004630:	2a25      	cmp	r2, #37	; 0x25
 8004632:	d1f9      	bne.n	8004628 <_svfiprintf_r+0x50>
 8004634:	ebba 0b04 	subs.w	fp, sl, r4
 8004638:	d00b      	beq.n	8004652 <_svfiprintf_r+0x7a>
 800463a:	465b      	mov	r3, fp
 800463c:	4622      	mov	r2, r4
 800463e:	4629      	mov	r1, r5
 8004640:	4638      	mov	r0, r7
 8004642:	f7ff ff6d 	bl	8004520 <__ssputs_r>
 8004646:	3001      	adds	r0, #1
 8004648:	f000 80aa 	beq.w	80047a0 <_svfiprintf_r+0x1c8>
 800464c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800464e:	445a      	add	r2, fp
 8004650:	9209      	str	r2, [sp, #36]	; 0x24
 8004652:	f89a 3000 	ldrb.w	r3, [sl]
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 80a2 	beq.w	80047a0 <_svfiprintf_r+0x1c8>
 800465c:	2300      	movs	r3, #0
 800465e:	f04f 32ff 	mov.w	r2, #4294967295
 8004662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004666:	f10a 0a01 	add.w	sl, sl, #1
 800466a:	9304      	str	r3, [sp, #16]
 800466c:	9307      	str	r3, [sp, #28]
 800466e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004672:	931a      	str	r3, [sp, #104]	; 0x68
 8004674:	4654      	mov	r4, sl
 8004676:	2205      	movs	r2, #5
 8004678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800467c:	4851      	ldr	r0, [pc, #324]	; (80047c4 <_svfiprintf_r+0x1ec>)
 800467e:	f000 fa41 	bl	8004b04 <memchr>
 8004682:	9a04      	ldr	r2, [sp, #16]
 8004684:	b9d8      	cbnz	r0, 80046be <_svfiprintf_r+0xe6>
 8004686:	06d0      	lsls	r0, r2, #27
 8004688:	bf44      	itt	mi
 800468a:	2320      	movmi	r3, #32
 800468c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004690:	0711      	lsls	r1, r2, #28
 8004692:	bf44      	itt	mi
 8004694:	232b      	movmi	r3, #43	; 0x2b
 8004696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800469a:	f89a 3000 	ldrb.w	r3, [sl]
 800469e:	2b2a      	cmp	r3, #42	; 0x2a
 80046a0:	d015      	beq.n	80046ce <_svfiprintf_r+0xf6>
 80046a2:	4654      	mov	r4, sl
 80046a4:	2000      	movs	r0, #0
 80046a6:	f04f 0c0a 	mov.w	ip, #10
 80046aa:	9a07      	ldr	r2, [sp, #28]
 80046ac:	4621      	mov	r1, r4
 80046ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046b2:	3b30      	subs	r3, #48	; 0x30
 80046b4:	2b09      	cmp	r3, #9
 80046b6:	d94e      	bls.n	8004756 <_svfiprintf_r+0x17e>
 80046b8:	b1b0      	cbz	r0, 80046e8 <_svfiprintf_r+0x110>
 80046ba:	9207      	str	r2, [sp, #28]
 80046bc:	e014      	b.n	80046e8 <_svfiprintf_r+0x110>
 80046be:	eba0 0308 	sub.w	r3, r0, r8
 80046c2:	fa09 f303 	lsl.w	r3, r9, r3
 80046c6:	4313      	orrs	r3, r2
 80046c8:	46a2      	mov	sl, r4
 80046ca:	9304      	str	r3, [sp, #16]
 80046cc:	e7d2      	b.n	8004674 <_svfiprintf_r+0x9c>
 80046ce:	9b03      	ldr	r3, [sp, #12]
 80046d0:	1d19      	adds	r1, r3, #4
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	9103      	str	r1, [sp, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	bfbb      	ittet	lt
 80046da:	425b      	neglt	r3, r3
 80046dc:	f042 0202 	orrlt.w	r2, r2, #2
 80046e0:	9307      	strge	r3, [sp, #28]
 80046e2:	9307      	strlt	r3, [sp, #28]
 80046e4:	bfb8      	it	lt
 80046e6:	9204      	strlt	r2, [sp, #16]
 80046e8:	7823      	ldrb	r3, [r4, #0]
 80046ea:	2b2e      	cmp	r3, #46	; 0x2e
 80046ec:	d10c      	bne.n	8004708 <_svfiprintf_r+0x130>
 80046ee:	7863      	ldrb	r3, [r4, #1]
 80046f0:	2b2a      	cmp	r3, #42	; 0x2a
 80046f2:	d135      	bne.n	8004760 <_svfiprintf_r+0x188>
 80046f4:	9b03      	ldr	r3, [sp, #12]
 80046f6:	3402      	adds	r4, #2
 80046f8:	1d1a      	adds	r2, r3, #4
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	9203      	str	r2, [sp, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	bfb8      	it	lt
 8004702:	f04f 33ff 	movlt.w	r3, #4294967295
 8004706:	9305      	str	r3, [sp, #20]
 8004708:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80047d4 <_svfiprintf_r+0x1fc>
 800470c:	2203      	movs	r2, #3
 800470e:	4650      	mov	r0, sl
 8004710:	7821      	ldrb	r1, [r4, #0]
 8004712:	f000 f9f7 	bl	8004b04 <memchr>
 8004716:	b140      	cbz	r0, 800472a <_svfiprintf_r+0x152>
 8004718:	2340      	movs	r3, #64	; 0x40
 800471a:	eba0 000a 	sub.w	r0, r0, sl
 800471e:	fa03 f000 	lsl.w	r0, r3, r0
 8004722:	9b04      	ldr	r3, [sp, #16]
 8004724:	3401      	adds	r4, #1
 8004726:	4303      	orrs	r3, r0
 8004728:	9304      	str	r3, [sp, #16]
 800472a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800472e:	2206      	movs	r2, #6
 8004730:	4825      	ldr	r0, [pc, #148]	; (80047c8 <_svfiprintf_r+0x1f0>)
 8004732:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004736:	f000 f9e5 	bl	8004b04 <memchr>
 800473a:	2800      	cmp	r0, #0
 800473c:	d038      	beq.n	80047b0 <_svfiprintf_r+0x1d8>
 800473e:	4b23      	ldr	r3, [pc, #140]	; (80047cc <_svfiprintf_r+0x1f4>)
 8004740:	bb1b      	cbnz	r3, 800478a <_svfiprintf_r+0x1b2>
 8004742:	9b03      	ldr	r3, [sp, #12]
 8004744:	3307      	adds	r3, #7
 8004746:	f023 0307 	bic.w	r3, r3, #7
 800474a:	3308      	adds	r3, #8
 800474c:	9303      	str	r3, [sp, #12]
 800474e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004750:	4433      	add	r3, r6
 8004752:	9309      	str	r3, [sp, #36]	; 0x24
 8004754:	e767      	b.n	8004626 <_svfiprintf_r+0x4e>
 8004756:	460c      	mov	r4, r1
 8004758:	2001      	movs	r0, #1
 800475a:	fb0c 3202 	mla	r2, ip, r2, r3
 800475e:	e7a5      	b.n	80046ac <_svfiprintf_r+0xd4>
 8004760:	2300      	movs	r3, #0
 8004762:	f04f 0c0a 	mov.w	ip, #10
 8004766:	4619      	mov	r1, r3
 8004768:	3401      	adds	r4, #1
 800476a:	9305      	str	r3, [sp, #20]
 800476c:	4620      	mov	r0, r4
 800476e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004772:	3a30      	subs	r2, #48	; 0x30
 8004774:	2a09      	cmp	r2, #9
 8004776:	d903      	bls.n	8004780 <_svfiprintf_r+0x1a8>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0c5      	beq.n	8004708 <_svfiprintf_r+0x130>
 800477c:	9105      	str	r1, [sp, #20]
 800477e:	e7c3      	b.n	8004708 <_svfiprintf_r+0x130>
 8004780:	4604      	mov	r4, r0
 8004782:	2301      	movs	r3, #1
 8004784:	fb0c 2101 	mla	r1, ip, r1, r2
 8004788:	e7f0      	b.n	800476c <_svfiprintf_r+0x194>
 800478a:	ab03      	add	r3, sp, #12
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	462a      	mov	r2, r5
 8004790:	4638      	mov	r0, r7
 8004792:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <_svfiprintf_r+0x1f8>)
 8004794:	a904      	add	r1, sp, #16
 8004796:	f3af 8000 	nop.w
 800479a:	1c42      	adds	r2, r0, #1
 800479c:	4606      	mov	r6, r0
 800479e:	d1d6      	bne.n	800474e <_svfiprintf_r+0x176>
 80047a0:	89ab      	ldrh	r3, [r5, #12]
 80047a2:	065b      	lsls	r3, r3, #25
 80047a4:	f53f af2c 	bmi.w	8004600 <_svfiprintf_r+0x28>
 80047a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047aa:	b01d      	add	sp, #116	; 0x74
 80047ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b0:	ab03      	add	r3, sp, #12
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	462a      	mov	r2, r5
 80047b6:	4638      	mov	r0, r7
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <_svfiprintf_r+0x1f8>)
 80047ba:	a904      	add	r1, sp, #16
 80047bc:	f000 f87c 	bl	80048b8 <_printf_i>
 80047c0:	e7eb      	b.n	800479a <_svfiprintf_r+0x1c2>
 80047c2:	bf00      	nop
 80047c4:	080052ca 	.word	0x080052ca
 80047c8:	080052d4 	.word	0x080052d4
 80047cc:	00000000 	.word	0x00000000
 80047d0:	08004521 	.word	0x08004521
 80047d4:	080052d0 	.word	0x080052d0

080047d8 <_printf_common>:
 80047d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047dc:	4616      	mov	r6, r2
 80047de:	4699      	mov	r9, r3
 80047e0:	688a      	ldr	r2, [r1, #8]
 80047e2:	690b      	ldr	r3, [r1, #16]
 80047e4:	4607      	mov	r7, r0
 80047e6:	4293      	cmp	r3, r2
 80047e8:	bfb8      	it	lt
 80047ea:	4613      	movlt	r3, r2
 80047ec:	6033      	str	r3, [r6, #0]
 80047ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047f2:	460c      	mov	r4, r1
 80047f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047f8:	b10a      	cbz	r2, 80047fe <_printf_common+0x26>
 80047fa:	3301      	adds	r3, #1
 80047fc:	6033      	str	r3, [r6, #0]
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	0699      	lsls	r1, r3, #26
 8004802:	bf42      	ittt	mi
 8004804:	6833      	ldrmi	r3, [r6, #0]
 8004806:	3302      	addmi	r3, #2
 8004808:	6033      	strmi	r3, [r6, #0]
 800480a:	6825      	ldr	r5, [r4, #0]
 800480c:	f015 0506 	ands.w	r5, r5, #6
 8004810:	d106      	bne.n	8004820 <_printf_common+0x48>
 8004812:	f104 0a19 	add.w	sl, r4, #25
 8004816:	68e3      	ldr	r3, [r4, #12]
 8004818:	6832      	ldr	r2, [r6, #0]
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	42ab      	cmp	r3, r5
 800481e:	dc28      	bgt.n	8004872 <_printf_common+0x9a>
 8004820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004824:	1e13      	subs	r3, r2, #0
 8004826:	6822      	ldr	r2, [r4, #0]
 8004828:	bf18      	it	ne
 800482a:	2301      	movne	r3, #1
 800482c:	0692      	lsls	r2, r2, #26
 800482e:	d42d      	bmi.n	800488c <_printf_common+0xb4>
 8004830:	4649      	mov	r1, r9
 8004832:	4638      	mov	r0, r7
 8004834:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004838:	47c0      	blx	r8
 800483a:	3001      	adds	r0, #1
 800483c:	d020      	beq.n	8004880 <_printf_common+0xa8>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	68e5      	ldr	r5, [r4, #12]
 8004842:	f003 0306 	and.w	r3, r3, #6
 8004846:	2b04      	cmp	r3, #4
 8004848:	bf18      	it	ne
 800484a:	2500      	movne	r5, #0
 800484c:	6832      	ldr	r2, [r6, #0]
 800484e:	f04f 0600 	mov.w	r6, #0
 8004852:	68a3      	ldr	r3, [r4, #8]
 8004854:	bf08      	it	eq
 8004856:	1aad      	subeq	r5, r5, r2
 8004858:	6922      	ldr	r2, [r4, #16]
 800485a:	bf08      	it	eq
 800485c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004860:	4293      	cmp	r3, r2
 8004862:	bfc4      	itt	gt
 8004864:	1a9b      	subgt	r3, r3, r2
 8004866:	18ed      	addgt	r5, r5, r3
 8004868:	341a      	adds	r4, #26
 800486a:	42b5      	cmp	r5, r6
 800486c:	d11a      	bne.n	80048a4 <_printf_common+0xcc>
 800486e:	2000      	movs	r0, #0
 8004870:	e008      	b.n	8004884 <_printf_common+0xac>
 8004872:	2301      	movs	r3, #1
 8004874:	4652      	mov	r2, sl
 8004876:	4649      	mov	r1, r9
 8004878:	4638      	mov	r0, r7
 800487a:	47c0      	blx	r8
 800487c:	3001      	adds	r0, #1
 800487e:	d103      	bne.n	8004888 <_printf_common+0xb0>
 8004880:	f04f 30ff 	mov.w	r0, #4294967295
 8004884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004888:	3501      	adds	r5, #1
 800488a:	e7c4      	b.n	8004816 <_printf_common+0x3e>
 800488c:	2030      	movs	r0, #48	; 0x30
 800488e:	18e1      	adds	r1, r4, r3
 8004890:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800489a:	4422      	add	r2, r4
 800489c:	3302      	adds	r3, #2
 800489e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048a2:	e7c5      	b.n	8004830 <_printf_common+0x58>
 80048a4:	2301      	movs	r3, #1
 80048a6:	4622      	mov	r2, r4
 80048a8:	4649      	mov	r1, r9
 80048aa:	4638      	mov	r0, r7
 80048ac:	47c0      	blx	r8
 80048ae:	3001      	adds	r0, #1
 80048b0:	d0e6      	beq.n	8004880 <_printf_common+0xa8>
 80048b2:	3601      	adds	r6, #1
 80048b4:	e7d9      	b.n	800486a <_printf_common+0x92>
	...

080048b8 <_printf_i>:
 80048b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048bc:	460c      	mov	r4, r1
 80048be:	7e27      	ldrb	r7, [r4, #24]
 80048c0:	4691      	mov	r9, r2
 80048c2:	2f78      	cmp	r7, #120	; 0x78
 80048c4:	4680      	mov	r8, r0
 80048c6:	469a      	mov	sl, r3
 80048c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048ce:	d807      	bhi.n	80048e0 <_printf_i+0x28>
 80048d0:	2f62      	cmp	r7, #98	; 0x62
 80048d2:	d80a      	bhi.n	80048ea <_printf_i+0x32>
 80048d4:	2f00      	cmp	r7, #0
 80048d6:	f000 80d9 	beq.w	8004a8c <_printf_i+0x1d4>
 80048da:	2f58      	cmp	r7, #88	; 0x58
 80048dc:	f000 80a4 	beq.w	8004a28 <_printf_i+0x170>
 80048e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048e8:	e03a      	b.n	8004960 <_printf_i+0xa8>
 80048ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048ee:	2b15      	cmp	r3, #21
 80048f0:	d8f6      	bhi.n	80048e0 <_printf_i+0x28>
 80048f2:	a001      	add	r0, pc, #4	; (adr r0, 80048f8 <_printf_i+0x40>)
 80048f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80048f8:	08004951 	.word	0x08004951
 80048fc:	08004965 	.word	0x08004965
 8004900:	080048e1 	.word	0x080048e1
 8004904:	080048e1 	.word	0x080048e1
 8004908:	080048e1 	.word	0x080048e1
 800490c:	080048e1 	.word	0x080048e1
 8004910:	08004965 	.word	0x08004965
 8004914:	080048e1 	.word	0x080048e1
 8004918:	080048e1 	.word	0x080048e1
 800491c:	080048e1 	.word	0x080048e1
 8004920:	080048e1 	.word	0x080048e1
 8004924:	08004a73 	.word	0x08004a73
 8004928:	08004995 	.word	0x08004995
 800492c:	08004a55 	.word	0x08004a55
 8004930:	080048e1 	.word	0x080048e1
 8004934:	080048e1 	.word	0x080048e1
 8004938:	08004a95 	.word	0x08004a95
 800493c:	080048e1 	.word	0x080048e1
 8004940:	08004995 	.word	0x08004995
 8004944:	080048e1 	.word	0x080048e1
 8004948:	080048e1 	.word	0x080048e1
 800494c:	08004a5d 	.word	0x08004a5d
 8004950:	680b      	ldr	r3, [r1, #0]
 8004952:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004956:	1d1a      	adds	r2, r3, #4
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	600a      	str	r2, [r1, #0]
 800495c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004960:	2301      	movs	r3, #1
 8004962:	e0a4      	b.n	8004aae <_printf_i+0x1f6>
 8004964:	6825      	ldr	r5, [r4, #0]
 8004966:	6808      	ldr	r0, [r1, #0]
 8004968:	062e      	lsls	r6, r5, #24
 800496a:	f100 0304 	add.w	r3, r0, #4
 800496e:	d50a      	bpl.n	8004986 <_printf_i+0xce>
 8004970:	6805      	ldr	r5, [r0, #0]
 8004972:	600b      	str	r3, [r1, #0]
 8004974:	2d00      	cmp	r5, #0
 8004976:	da03      	bge.n	8004980 <_printf_i+0xc8>
 8004978:	232d      	movs	r3, #45	; 0x2d
 800497a:	426d      	negs	r5, r5
 800497c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004980:	230a      	movs	r3, #10
 8004982:	485e      	ldr	r0, [pc, #376]	; (8004afc <_printf_i+0x244>)
 8004984:	e019      	b.n	80049ba <_printf_i+0x102>
 8004986:	f015 0f40 	tst.w	r5, #64	; 0x40
 800498a:	6805      	ldr	r5, [r0, #0]
 800498c:	600b      	str	r3, [r1, #0]
 800498e:	bf18      	it	ne
 8004990:	b22d      	sxthne	r5, r5
 8004992:	e7ef      	b.n	8004974 <_printf_i+0xbc>
 8004994:	680b      	ldr	r3, [r1, #0]
 8004996:	6825      	ldr	r5, [r4, #0]
 8004998:	1d18      	adds	r0, r3, #4
 800499a:	6008      	str	r0, [r1, #0]
 800499c:	0628      	lsls	r0, r5, #24
 800499e:	d501      	bpl.n	80049a4 <_printf_i+0xec>
 80049a0:	681d      	ldr	r5, [r3, #0]
 80049a2:	e002      	b.n	80049aa <_printf_i+0xf2>
 80049a4:	0669      	lsls	r1, r5, #25
 80049a6:	d5fb      	bpl.n	80049a0 <_printf_i+0xe8>
 80049a8:	881d      	ldrh	r5, [r3, #0]
 80049aa:	2f6f      	cmp	r7, #111	; 0x6f
 80049ac:	bf0c      	ite	eq
 80049ae:	2308      	moveq	r3, #8
 80049b0:	230a      	movne	r3, #10
 80049b2:	4852      	ldr	r0, [pc, #328]	; (8004afc <_printf_i+0x244>)
 80049b4:	2100      	movs	r1, #0
 80049b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049ba:	6866      	ldr	r6, [r4, #4]
 80049bc:	2e00      	cmp	r6, #0
 80049be:	bfa8      	it	ge
 80049c0:	6821      	ldrge	r1, [r4, #0]
 80049c2:	60a6      	str	r6, [r4, #8]
 80049c4:	bfa4      	itt	ge
 80049c6:	f021 0104 	bicge.w	r1, r1, #4
 80049ca:	6021      	strge	r1, [r4, #0]
 80049cc:	b90d      	cbnz	r5, 80049d2 <_printf_i+0x11a>
 80049ce:	2e00      	cmp	r6, #0
 80049d0:	d04d      	beq.n	8004a6e <_printf_i+0x1b6>
 80049d2:	4616      	mov	r6, r2
 80049d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80049d8:	fb03 5711 	mls	r7, r3, r1, r5
 80049dc:	5dc7      	ldrb	r7, [r0, r7]
 80049de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049e2:	462f      	mov	r7, r5
 80049e4:	42bb      	cmp	r3, r7
 80049e6:	460d      	mov	r5, r1
 80049e8:	d9f4      	bls.n	80049d4 <_printf_i+0x11c>
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d10b      	bne.n	8004a06 <_printf_i+0x14e>
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	07df      	lsls	r7, r3, #31
 80049f2:	d508      	bpl.n	8004a06 <_printf_i+0x14e>
 80049f4:	6923      	ldr	r3, [r4, #16]
 80049f6:	6861      	ldr	r1, [r4, #4]
 80049f8:	4299      	cmp	r1, r3
 80049fa:	bfde      	ittt	le
 80049fc:	2330      	movle	r3, #48	; 0x30
 80049fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a06:	1b92      	subs	r2, r2, r6
 8004a08:	6122      	str	r2, [r4, #16]
 8004a0a:	464b      	mov	r3, r9
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	4640      	mov	r0, r8
 8004a10:	f8cd a000 	str.w	sl, [sp]
 8004a14:	aa03      	add	r2, sp, #12
 8004a16:	f7ff fedf 	bl	80047d8 <_printf_common>
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	d14c      	bne.n	8004ab8 <_printf_i+0x200>
 8004a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a22:	b004      	add	sp, #16
 8004a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a28:	4834      	ldr	r0, [pc, #208]	; (8004afc <_printf_i+0x244>)
 8004a2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a2e:	680e      	ldr	r6, [r1, #0]
 8004a30:	6823      	ldr	r3, [r4, #0]
 8004a32:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a36:	061f      	lsls	r7, r3, #24
 8004a38:	600e      	str	r6, [r1, #0]
 8004a3a:	d514      	bpl.n	8004a66 <_printf_i+0x1ae>
 8004a3c:	07d9      	lsls	r1, r3, #31
 8004a3e:	bf44      	itt	mi
 8004a40:	f043 0320 	orrmi.w	r3, r3, #32
 8004a44:	6023      	strmi	r3, [r4, #0]
 8004a46:	b91d      	cbnz	r5, 8004a50 <_printf_i+0x198>
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	f023 0320 	bic.w	r3, r3, #32
 8004a4e:	6023      	str	r3, [r4, #0]
 8004a50:	2310      	movs	r3, #16
 8004a52:	e7af      	b.n	80049b4 <_printf_i+0xfc>
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	f043 0320 	orr.w	r3, r3, #32
 8004a5a:	6023      	str	r3, [r4, #0]
 8004a5c:	2378      	movs	r3, #120	; 0x78
 8004a5e:	4828      	ldr	r0, [pc, #160]	; (8004b00 <_printf_i+0x248>)
 8004a60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a64:	e7e3      	b.n	8004a2e <_printf_i+0x176>
 8004a66:	065e      	lsls	r6, r3, #25
 8004a68:	bf48      	it	mi
 8004a6a:	b2ad      	uxthmi	r5, r5
 8004a6c:	e7e6      	b.n	8004a3c <_printf_i+0x184>
 8004a6e:	4616      	mov	r6, r2
 8004a70:	e7bb      	b.n	80049ea <_printf_i+0x132>
 8004a72:	680b      	ldr	r3, [r1, #0]
 8004a74:	6826      	ldr	r6, [r4, #0]
 8004a76:	1d1d      	adds	r5, r3, #4
 8004a78:	6960      	ldr	r0, [r4, #20]
 8004a7a:	600d      	str	r5, [r1, #0]
 8004a7c:	0635      	lsls	r5, r6, #24
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	d501      	bpl.n	8004a86 <_printf_i+0x1ce>
 8004a82:	6018      	str	r0, [r3, #0]
 8004a84:	e002      	b.n	8004a8c <_printf_i+0x1d4>
 8004a86:	0671      	lsls	r1, r6, #25
 8004a88:	d5fb      	bpl.n	8004a82 <_printf_i+0x1ca>
 8004a8a:	8018      	strh	r0, [r3, #0]
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	4616      	mov	r6, r2
 8004a90:	6123      	str	r3, [r4, #16]
 8004a92:	e7ba      	b.n	8004a0a <_printf_i+0x152>
 8004a94:	680b      	ldr	r3, [r1, #0]
 8004a96:	1d1a      	adds	r2, r3, #4
 8004a98:	600a      	str	r2, [r1, #0]
 8004a9a:	681e      	ldr	r6, [r3, #0]
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	6862      	ldr	r2, [r4, #4]
 8004aa2:	f000 f82f 	bl	8004b04 <memchr>
 8004aa6:	b108      	cbz	r0, 8004aac <_printf_i+0x1f4>
 8004aa8:	1b80      	subs	r0, r0, r6
 8004aaa:	6060      	str	r0, [r4, #4]
 8004aac:	6863      	ldr	r3, [r4, #4]
 8004aae:	6123      	str	r3, [r4, #16]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ab6:	e7a8      	b.n	8004a0a <_printf_i+0x152>
 8004ab8:	4632      	mov	r2, r6
 8004aba:	4649      	mov	r1, r9
 8004abc:	4640      	mov	r0, r8
 8004abe:	6923      	ldr	r3, [r4, #16]
 8004ac0:	47d0      	blx	sl
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	d0ab      	beq.n	8004a1e <_printf_i+0x166>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	079b      	lsls	r3, r3, #30
 8004aca:	d413      	bmi.n	8004af4 <_printf_i+0x23c>
 8004acc:	68e0      	ldr	r0, [r4, #12]
 8004ace:	9b03      	ldr	r3, [sp, #12]
 8004ad0:	4298      	cmp	r0, r3
 8004ad2:	bfb8      	it	lt
 8004ad4:	4618      	movlt	r0, r3
 8004ad6:	e7a4      	b.n	8004a22 <_printf_i+0x16a>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	4632      	mov	r2, r6
 8004adc:	4649      	mov	r1, r9
 8004ade:	4640      	mov	r0, r8
 8004ae0:	47d0      	blx	sl
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	d09b      	beq.n	8004a1e <_printf_i+0x166>
 8004ae6:	3501      	adds	r5, #1
 8004ae8:	68e3      	ldr	r3, [r4, #12]
 8004aea:	9903      	ldr	r1, [sp, #12]
 8004aec:	1a5b      	subs	r3, r3, r1
 8004aee:	42ab      	cmp	r3, r5
 8004af0:	dcf2      	bgt.n	8004ad8 <_printf_i+0x220>
 8004af2:	e7eb      	b.n	8004acc <_printf_i+0x214>
 8004af4:	2500      	movs	r5, #0
 8004af6:	f104 0619 	add.w	r6, r4, #25
 8004afa:	e7f5      	b.n	8004ae8 <_printf_i+0x230>
 8004afc:	080052db 	.word	0x080052db
 8004b00:	080052ec 	.word	0x080052ec

08004b04 <memchr>:
 8004b04:	4603      	mov	r3, r0
 8004b06:	b510      	push	{r4, lr}
 8004b08:	b2c9      	uxtb	r1, r1
 8004b0a:	4402      	add	r2, r0
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	d101      	bne.n	8004b16 <memchr+0x12>
 8004b12:	2000      	movs	r0, #0
 8004b14:	e003      	b.n	8004b1e <memchr+0x1a>
 8004b16:	7804      	ldrb	r4, [r0, #0]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	428c      	cmp	r4, r1
 8004b1c:	d1f6      	bne.n	8004b0c <memchr+0x8>
 8004b1e:	bd10      	pop	{r4, pc}

08004b20 <memmove>:
 8004b20:	4288      	cmp	r0, r1
 8004b22:	b510      	push	{r4, lr}
 8004b24:	eb01 0402 	add.w	r4, r1, r2
 8004b28:	d902      	bls.n	8004b30 <memmove+0x10>
 8004b2a:	4284      	cmp	r4, r0
 8004b2c:	4623      	mov	r3, r4
 8004b2e:	d807      	bhi.n	8004b40 <memmove+0x20>
 8004b30:	1e43      	subs	r3, r0, #1
 8004b32:	42a1      	cmp	r1, r4
 8004b34:	d008      	beq.n	8004b48 <memmove+0x28>
 8004b36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b3e:	e7f8      	b.n	8004b32 <memmove+0x12>
 8004b40:	4601      	mov	r1, r0
 8004b42:	4402      	add	r2, r0
 8004b44:	428a      	cmp	r2, r1
 8004b46:	d100      	bne.n	8004b4a <memmove+0x2a>
 8004b48:	bd10      	pop	{r4, pc}
 8004b4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b52:	e7f7      	b.n	8004b44 <memmove+0x24>

08004b54 <_free_r>:
 8004b54:	b538      	push	{r3, r4, r5, lr}
 8004b56:	4605      	mov	r5, r0
 8004b58:	2900      	cmp	r1, #0
 8004b5a:	d043      	beq.n	8004be4 <_free_r+0x90>
 8004b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b60:	1f0c      	subs	r4, r1, #4
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bfb8      	it	lt
 8004b66:	18e4      	addlt	r4, r4, r3
 8004b68:	f000 f8d0 	bl	8004d0c <__malloc_lock>
 8004b6c:	4a1e      	ldr	r2, [pc, #120]	; (8004be8 <_free_r+0x94>)
 8004b6e:	6813      	ldr	r3, [r2, #0]
 8004b70:	4610      	mov	r0, r2
 8004b72:	b933      	cbnz	r3, 8004b82 <_free_r+0x2e>
 8004b74:	6063      	str	r3, [r4, #4]
 8004b76:	6014      	str	r4, [r2, #0]
 8004b78:	4628      	mov	r0, r5
 8004b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b7e:	f000 b8cb 	b.w	8004d18 <__malloc_unlock>
 8004b82:	42a3      	cmp	r3, r4
 8004b84:	d90a      	bls.n	8004b9c <_free_r+0x48>
 8004b86:	6821      	ldr	r1, [r4, #0]
 8004b88:	1862      	adds	r2, r4, r1
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	bf01      	itttt	eq
 8004b8e:	681a      	ldreq	r2, [r3, #0]
 8004b90:	685b      	ldreq	r3, [r3, #4]
 8004b92:	1852      	addeq	r2, r2, r1
 8004b94:	6022      	streq	r2, [r4, #0]
 8004b96:	6063      	str	r3, [r4, #4]
 8004b98:	6004      	str	r4, [r0, #0]
 8004b9a:	e7ed      	b.n	8004b78 <_free_r+0x24>
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	b10b      	cbz	r3, 8004ba6 <_free_r+0x52>
 8004ba2:	42a3      	cmp	r3, r4
 8004ba4:	d9fa      	bls.n	8004b9c <_free_r+0x48>
 8004ba6:	6811      	ldr	r1, [r2, #0]
 8004ba8:	1850      	adds	r0, r2, r1
 8004baa:	42a0      	cmp	r0, r4
 8004bac:	d10b      	bne.n	8004bc6 <_free_r+0x72>
 8004bae:	6820      	ldr	r0, [r4, #0]
 8004bb0:	4401      	add	r1, r0
 8004bb2:	1850      	adds	r0, r2, r1
 8004bb4:	4283      	cmp	r3, r0
 8004bb6:	6011      	str	r1, [r2, #0]
 8004bb8:	d1de      	bne.n	8004b78 <_free_r+0x24>
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4401      	add	r1, r0
 8004bc0:	6011      	str	r1, [r2, #0]
 8004bc2:	6053      	str	r3, [r2, #4]
 8004bc4:	e7d8      	b.n	8004b78 <_free_r+0x24>
 8004bc6:	d902      	bls.n	8004bce <_free_r+0x7a>
 8004bc8:	230c      	movs	r3, #12
 8004bca:	602b      	str	r3, [r5, #0]
 8004bcc:	e7d4      	b.n	8004b78 <_free_r+0x24>
 8004bce:	6820      	ldr	r0, [r4, #0]
 8004bd0:	1821      	adds	r1, r4, r0
 8004bd2:	428b      	cmp	r3, r1
 8004bd4:	bf01      	itttt	eq
 8004bd6:	6819      	ldreq	r1, [r3, #0]
 8004bd8:	685b      	ldreq	r3, [r3, #4]
 8004bda:	1809      	addeq	r1, r1, r0
 8004bdc:	6021      	streq	r1, [r4, #0]
 8004bde:	6063      	str	r3, [r4, #4]
 8004be0:	6054      	str	r4, [r2, #4]
 8004be2:	e7c9      	b.n	8004b78 <_free_r+0x24>
 8004be4:	bd38      	pop	{r3, r4, r5, pc}
 8004be6:	bf00      	nop
 8004be8:	20000148 	.word	0x20000148

08004bec <_malloc_r>:
 8004bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bee:	1ccd      	adds	r5, r1, #3
 8004bf0:	f025 0503 	bic.w	r5, r5, #3
 8004bf4:	3508      	adds	r5, #8
 8004bf6:	2d0c      	cmp	r5, #12
 8004bf8:	bf38      	it	cc
 8004bfa:	250c      	movcc	r5, #12
 8004bfc:	2d00      	cmp	r5, #0
 8004bfe:	4606      	mov	r6, r0
 8004c00:	db01      	blt.n	8004c06 <_malloc_r+0x1a>
 8004c02:	42a9      	cmp	r1, r5
 8004c04:	d903      	bls.n	8004c0e <_malloc_r+0x22>
 8004c06:	230c      	movs	r3, #12
 8004c08:	6033      	str	r3, [r6, #0]
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c0e:	f000 f87d 	bl	8004d0c <__malloc_lock>
 8004c12:	4921      	ldr	r1, [pc, #132]	; (8004c98 <_malloc_r+0xac>)
 8004c14:	680a      	ldr	r2, [r1, #0]
 8004c16:	4614      	mov	r4, r2
 8004c18:	b99c      	cbnz	r4, 8004c42 <_malloc_r+0x56>
 8004c1a:	4f20      	ldr	r7, [pc, #128]	; (8004c9c <_malloc_r+0xb0>)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	b923      	cbnz	r3, 8004c2a <_malloc_r+0x3e>
 8004c20:	4621      	mov	r1, r4
 8004c22:	4630      	mov	r0, r6
 8004c24:	f000 f862 	bl	8004cec <_sbrk_r>
 8004c28:	6038      	str	r0, [r7, #0]
 8004c2a:	4629      	mov	r1, r5
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	f000 f85d 	bl	8004cec <_sbrk_r>
 8004c32:	1c43      	adds	r3, r0, #1
 8004c34:	d123      	bne.n	8004c7e <_malloc_r+0x92>
 8004c36:	230c      	movs	r3, #12
 8004c38:	4630      	mov	r0, r6
 8004c3a:	6033      	str	r3, [r6, #0]
 8004c3c:	f000 f86c 	bl	8004d18 <__malloc_unlock>
 8004c40:	e7e3      	b.n	8004c0a <_malloc_r+0x1e>
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	1b5b      	subs	r3, r3, r5
 8004c46:	d417      	bmi.n	8004c78 <_malloc_r+0x8c>
 8004c48:	2b0b      	cmp	r3, #11
 8004c4a:	d903      	bls.n	8004c54 <_malloc_r+0x68>
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	441c      	add	r4, r3
 8004c50:	6025      	str	r5, [r4, #0]
 8004c52:	e004      	b.n	8004c5e <_malloc_r+0x72>
 8004c54:	6863      	ldr	r3, [r4, #4]
 8004c56:	42a2      	cmp	r2, r4
 8004c58:	bf0c      	ite	eq
 8004c5a:	600b      	streq	r3, [r1, #0]
 8004c5c:	6053      	strne	r3, [r2, #4]
 8004c5e:	4630      	mov	r0, r6
 8004c60:	f000 f85a 	bl	8004d18 <__malloc_unlock>
 8004c64:	f104 000b 	add.w	r0, r4, #11
 8004c68:	1d23      	adds	r3, r4, #4
 8004c6a:	f020 0007 	bic.w	r0, r0, #7
 8004c6e:	1ac2      	subs	r2, r0, r3
 8004c70:	d0cc      	beq.n	8004c0c <_malloc_r+0x20>
 8004c72:	1a1b      	subs	r3, r3, r0
 8004c74:	50a3      	str	r3, [r4, r2]
 8004c76:	e7c9      	b.n	8004c0c <_malloc_r+0x20>
 8004c78:	4622      	mov	r2, r4
 8004c7a:	6864      	ldr	r4, [r4, #4]
 8004c7c:	e7cc      	b.n	8004c18 <_malloc_r+0x2c>
 8004c7e:	1cc4      	adds	r4, r0, #3
 8004c80:	f024 0403 	bic.w	r4, r4, #3
 8004c84:	42a0      	cmp	r0, r4
 8004c86:	d0e3      	beq.n	8004c50 <_malloc_r+0x64>
 8004c88:	1a21      	subs	r1, r4, r0
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f000 f82e 	bl	8004cec <_sbrk_r>
 8004c90:	3001      	adds	r0, #1
 8004c92:	d1dd      	bne.n	8004c50 <_malloc_r+0x64>
 8004c94:	e7cf      	b.n	8004c36 <_malloc_r+0x4a>
 8004c96:	bf00      	nop
 8004c98:	20000148 	.word	0x20000148
 8004c9c:	2000014c 	.word	0x2000014c

08004ca0 <_realloc_r>:
 8004ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca2:	4607      	mov	r7, r0
 8004ca4:	4614      	mov	r4, r2
 8004ca6:	460e      	mov	r6, r1
 8004ca8:	b921      	cbnz	r1, 8004cb4 <_realloc_r+0x14>
 8004caa:	4611      	mov	r1, r2
 8004cac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004cb0:	f7ff bf9c 	b.w	8004bec <_malloc_r>
 8004cb4:	b922      	cbnz	r2, 8004cc0 <_realloc_r+0x20>
 8004cb6:	f7ff ff4d 	bl	8004b54 <_free_r>
 8004cba:	4625      	mov	r5, r4
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cc0:	f000 f830 	bl	8004d24 <_malloc_usable_size_r>
 8004cc4:	42a0      	cmp	r0, r4
 8004cc6:	d20f      	bcs.n	8004ce8 <_realloc_r+0x48>
 8004cc8:	4621      	mov	r1, r4
 8004cca:	4638      	mov	r0, r7
 8004ccc:	f7ff ff8e 	bl	8004bec <_malloc_r>
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d0f2      	beq.n	8004cbc <_realloc_r+0x1c>
 8004cd6:	4631      	mov	r1, r6
 8004cd8:	4622      	mov	r2, r4
 8004cda:	f7ff fbeb 	bl	80044b4 <memcpy>
 8004cde:	4631      	mov	r1, r6
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	f7ff ff37 	bl	8004b54 <_free_r>
 8004ce6:	e7e9      	b.n	8004cbc <_realloc_r+0x1c>
 8004ce8:	4635      	mov	r5, r6
 8004cea:	e7e7      	b.n	8004cbc <_realloc_r+0x1c>

08004cec <_sbrk_r>:
 8004cec:	b538      	push	{r3, r4, r5, lr}
 8004cee:	2300      	movs	r3, #0
 8004cf0:	4d05      	ldr	r5, [pc, #20]	; (8004d08 <_sbrk_r+0x1c>)
 8004cf2:	4604      	mov	r4, r0
 8004cf4:	4608      	mov	r0, r1
 8004cf6:	602b      	str	r3, [r5, #0]
 8004cf8:	f7fb fe5c 	bl	80009b4 <_sbrk>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d102      	bne.n	8004d06 <_sbrk_r+0x1a>
 8004d00:	682b      	ldr	r3, [r5, #0]
 8004d02:	b103      	cbz	r3, 8004d06 <_sbrk_r+0x1a>
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	20000274 	.word	0x20000274

08004d0c <__malloc_lock>:
 8004d0c:	4801      	ldr	r0, [pc, #4]	; (8004d14 <__malloc_lock+0x8>)
 8004d0e:	f000 b811 	b.w	8004d34 <__retarget_lock_acquire_recursive>
 8004d12:	bf00      	nop
 8004d14:	2000027c 	.word	0x2000027c

08004d18 <__malloc_unlock>:
 8004d18:	4801      	ldr	r0, [pc, #4]	; (8004d20 <__malloc_unlock+0x8>)
 8004d1a:	f000 b80c 	b.w	8004d36 <__retarget_lock_release_recursive>
 8004d1e:	bf00      	nop
 8004d20:	2000027c 	.word	0x2000027c

08004d24 <_malloc_usable_size_r>:
 8004d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d28:	1f18      	subs	r0, r3, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	bfbc      	itt	lt
 8004d2e:	580b      	ldrlt	r3, [r1, r0]
 8004d30:	18c0      	addlt	r0, r0, r3
 8004d32:	4770      	bx	lr

08004d34 <__retarget_lock_acquire_recursive>:
 8004d34:	4770      	bx	lr

08004d36 <__retarget_lock_release_recursive>:
 8004d36:	4770      	bx	lr

08004d38 <_init>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	bf00      	nop
 8004d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3e:	bc08      	pop	{r3}
 8004d40:	469e      	mov	lr, r3
 8004d42:	4770      	bx	lr

08004d44 <_fini>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	bf00      	nop
 8004d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4a:	bc08      	pop	{r3}
 8004d4c:	469e      	mov	lr, r3
 8004d4e:	4770      	bx	lr
